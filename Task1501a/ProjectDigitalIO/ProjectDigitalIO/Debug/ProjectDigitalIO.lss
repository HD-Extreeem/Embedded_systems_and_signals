
ProjectDigitalIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ef0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084ef0  00084ef0  0000cef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00084ef8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001f0  2007099c  00085894  0001099c  2**2
                  ALLOC
  4 .stack        00002004  20070b8c  00085a84  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f4b8  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000274d  00000000  00000000  0001fed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000061c6  00000000  00000000  00022625  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b30  00000000  00000000  000287eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a08  00000000  00000000  0002931b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001955c  00000000  00000000  00029d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fc8e  00000000  00000000  0004327f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006babf  00000000  00000000  00052f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023a8  00000000  00000000  000be9cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b90 	.word	0x20072b90
   80004:	00081a51 	.word	0x00081a51
   80008:	00081a4d 	.word	0x00081a4d
   8000c:	00081a4d 	.word	0x00081a4d
   80010:	00081a4d 	.word	0x00081a4d
   80014:	00081a4d 	.word	0x00081a4d
   80018:	00081a4d 	.word	0x00081a4d
	...
   8002c:	00081a4d 	.word	0x00081a4d
   80030:	00081a4d 	.word	0x00081a4d
   80034:	00000000 	.word	0x00000000
   80038:	00081a4d 	.word	0x00081a4d
   8003c:	00081a4d 	.word	0x00081a4d
   80040:	00081a4d 	.word	0x00081a4d
   80044:	00081a4d 	.word	0x00081a4d
   80048:	00081a4d 	.word	0x00081a4d
   8004c:	00081a4d 	.word	0x00081a4d
   80050:	00081a4d 	.word	0x00081a4d
   80054:	00081a4d 	.word	0x00081a4d
   80058:	00081a4d 	.word	0x00081a4d
   8005c:	00081a4d 	.word	0x00081a4d
   80060:	00081a4d 	.word	0x00081a4d
   80064:	00081a4d 	.word	0x00081a4d
   80068:	00000000 	.word	0x00000000
   8006c:	000818bd 	.word	0x000818bd
   80070:	000818d1 	.word	0x000818d1
   80074:	000818e5 	.word	0x000818e5
   80078:	000818f9 	.word	0x000818f9
	...
   80084:	000801b5 	.word	0x000801b5
   80088:	00081a4d 	.word	0x00081a4d
   8008c:	00081a4d 	.word	0x00081a4d
   80090:	00081a4d 	.word	0x00081a4d
   80094:	00081a4d 	.word	0x00081a4d
   80098:	00081a4d 	.word	0x00081a4d
   8009c:	00081a4d 	.word	0x00081a4d
   800a0:	00081a4d 	.word	0x00081a4d
   800a4:	00000000 	.word	0x00000000
   800a8:	00081a4d 	.word	0x00081a4d
   800ac:	00081a4d 	.word	0x00081a4d
   800b0:	00081a4d 	.word	0x00081a4d
   800b4:	00081a4d 	.word	0x00081a4d
   800b8:	00081a4d 	.word	0x00081a4d
   800bc:	00081a4d 	.word	0x00081a4d
   800c0:	00081a4d 	.word	0x00081a4d
   800c4:	00081a4d 	.word	0x00081a4d
   800c8:	00081a4d 	.word	0x00081a4d
   800cc:	00081a4d 	.word	0x00081a4d
   800d0:	00081a4d 	.word	0x00081a4d
   800d4:	00081a4d 	.word	0x00081a4d
   800d8:	00081a4d 	.word	0x00081a4d
   800dc:	00081a4d 	.word	0x00081a4d
   800e0:	00081a4d 	.word	0x00081a4d
   800e4:	00081a4d 	.word	0x00081a4d
   800e8:	00081a4d 	.word	0x00081a4d
   800ec:	00081a4d 	.word	0x00081a4d
   800f0:	00081a4d 	.word	0x00081a4d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00084ef8 	.word	0x00084ef8

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084ef8 	.word	0x00084ef8
   8013c:	200709a0 	.word	0x200709a0
   80140:	00084ef8 	.word	0x00084ef8
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070b84 	.word	0x20070b84
   80184:	20070b00 	.word	0x20070b00

00080188 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80188:	6943      	ldr	r3, [r0, #20]
   8018a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8018e:	bf1d      	ittte	ne
   80190:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80194:	61c1      	strne	r1, [r0, #28]
	return 0;
   80196:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80198:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019a:	4770      	bx	lr

0008019c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f01 	tst.w	r3, #1
   801a2:	d005      	beq.n	801b0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a4:	6983      	ldr	r3, [r0, #24]
   801a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801aa:	600b      	str	r3, [r1, #0]

	return 0;
   801ac:	2000      	movs	r0, #0
   801ae:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b2:	4770      	bx	lr

000801b4 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801b4:	b500      	push	{lr}
   801b6:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801b8:	4811      	ldr	r0, [pc, #68]	; (80200 <USART0_Handler+0x4c>)
   801ba:	f10d 0107 	add.w	r1, sp, #7
   801be:	2201      	movs	r2, #1
   801c0:	4b10      	ldr	r3, [pc, #64]	; (80204 <USART0_Handler+0x50>)
   801c2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   801c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801c6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801ca:	2200      	movs	r2, #0
   801cc:	4b0e      	ldr	r3, [pc, #56]	; (80208 <USART0_Handler+0x54>)
   801ce:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801d0:	4b0e      	ldr	r3, [pc, #56]	; (8020c <USART0_Handler+0x58>)
   801d2:	781b      	ldrb	r3, [r3, #0]
   801d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801d8:	4a0d      	ldr	r2, [pc, #52]	; (80210 <USART0_Handler+0x5c>)
   801da:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801dc:	2b9b      	cmp	r3, #155	; 0x9b
   801de:	d103      	bne.n	801e8 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   801e0:	2200      	movs	r2, #0
   801e2:	4b0a      	ldr	r3, [pc, #40]	; (8020c <USART0_Handler+0x58>)
   801e4:	701a      	strb	r2, [r3, #0]
   801e6:	e002      	b.n	801ee <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   801e8:	3301      	adds	r3, #1
   801ea:	4a08      	ldr	r2, [pc, #32]	; (8020c <USART0_Handler+0x58>)
   801ec:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801ee:	2201      	movs	r2, #1
   801f0:	4b05      	ldr	r3, [pc, #20]	; (80208 <USART0_Handler+0x54>)
   801f2:	701a      	strb	r2, [r3, #0]
   801f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   801f8:	b662      	cpsie	i
}
   801fa:	b003      	add	sp, #12
   801fc:	f85d fb04 	ldr.w	pc, [sp], #4
   80200:	40098000 	.word	0x40098000
   80204:	00080ed9 	.word	0x00080ed9
   80208:	2007012c 	.word	0x2007012c
   8020c:	20070a54 	.word	0x20070a54
   80210:	200709b8 	.word	0x200709b8

00080214 <pinMode>:
#define PIOB_BASE_ADDRESS 0x400E1000U


void pinMode(int pinNumber, mode_definition mode)
{
	if (mode == OUTPUT)	/* You only have to program a function that cares about OUTPUT, and does nothing for the other values */
   80214:	2902      	cmp	r1, #2
   80216:	d118      	bne.n	8024a <pinMode+0x36>
	{
		uint32_t *p_PIOB_PER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0000U);
		uint32_t *p_PIOB_OER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0010U);
		
		if (pinNumber == 13)
   80218:	280d      	cmp	r0, #13
   8021a:	d10a      	bne.n	80232 <pinMode+0x1e>
		{
			
			*p_PIOB_PER |= (1<<27);
   8021c:	4b0b      	ldr	r3, [pc, #44]	; (8024c <pinMode+0x38>)
   8021e:	681a      	ldr	r2, [r3, #0]
   80220:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80224:	601a      	str	r2, [r3, #0]
			*p_PIOB_OER |= (1<<27);
   80226:	3310      	adds	r3, #16
   80228:	681a      	ldr	r2, [r3, #0]
   8022a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   8022e:	601a      	str	r2, [r3, #0]
   80230:	4770      	bx	lr
			
		}
		else if (pinNumber == 22)
   80232:	2816      	cmp	r0, #22
   80234:	d109      	bne.n	8024a <pinMode+0x36>
		{
			*p_PIOB_PER |= (1<<26);
   80236:	4b05      	ldr	r3, [pc, #20]	; (8024c <pinMode+0x38>)
   80238:	681a      	ldr	r2, [r3, #0]
   8023a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   8023e:	601a      	str	r2, [r3, #0]
			*p_PIOB_OER |= (1<<26);
   80240:	3310      	adds	r3, #16
   80242:	681a      	ldr	r2, [r3, #0]
   80244:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80248:	601a      	str	r2, [r3, #0]
   8024a:	4770      	bx	lr
   8024c:	400e1000 	.word	0x400e1000

00080250 <digitalWrite>:
		/* Do nothing */
	}
}

void digitalWrite(int pinNumber, int value)
{
   80250:	b508      	push	{r3, lr}
	uint32_t *p_PIOB_SODR = (uint32_t *) (PIOB_BASE_ADDRESS+0x0030U);
	uint32_t *p_PIOB_CODR = (uint32_t *) (PIOB_BASE_ADDRESS+0x0034U);
	
	if (value == HIGH)
   80252:	2901      	cmp	r1, #1
   80254:	d10f      	bne.n	80276 <digitalWrite+0x26>
	{
		/* Write code here */
		if (pinNumber == 13)
   80256:	280d      	cmp	r0, #13
   80258:	d105      	bne.n	80266 <digitalWrite+0x16>
		{
			*p_PIOB_SODR|=(1<<27);
   8025a:	4b11      	ldr	r3, [pc, #68]	; (802a0 <digitalWrite+0x50>)
   8025c:	681a      	ldr	r2, [r3, #0]
   8025e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80262:	601a      	str	r2, [r3, #0]
   80264:	bd08      	pop	{r3, pc}
		}
		else if (pinNumber==22)
   80266:	2816      	cmp	r0, #22
   80268:	d119      	bne.n	8029e <digitalWrite+0x4e>
		{
			*p_PIOB_SODR|=(1<<26);
   8026a:	4b0d      	ldr	r3, [pc, #52]	; (802a0 <digitalWrite+0x50>)
   8026c:	681a      	ldr	r2, [r3, #0]
   8026e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80272:	601a      	str	r2, [r3, #0]
   80274:	bd08      	pop	{r3, pc}
		}
		
	}
	else if (value == LOW)
   80276:	b979      	cbnz	r1, 80298 <digitalWrite+0x48>
	{
		/* Write code here */
		if (pinNumber == 13)
   80278:	280d      	cmp	r0, #13
   8027a:	d105      	bne.n	80288 <digitalWrite+0x38>
		{
			*p_PIOB_CODR|=(1<<27);
   8027c:	4b09      	ldr	r3, [pc, #36]	; (802a4 <digitalWrite+0x54>)
   8027e:	681a      	ldr	r2, [r3, #0]
   80280:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80284:	601a      	str	r2, [r3, #0]
   80286:	bd08      	pop	{r3, pc}
		}
		else if (pinNumber==22)
   80288:	2816      	cmp	r0, #22
   8028a:	d108      	bne.n	8029e <digitalWrite+0x4e>
		{
			*p_PIOB_CODR|=(1<<26);
   8028c:	4b05      	ldr	r3, [pc, #20]	; (802a4 <digitalWrite+0x54>)
   8028e:	681a      	ldr	r2, [r3, #0]
   80290:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80294:	601a      	str	r2, [r3, #0]
   80296:	bd08      	pop	{r3, pc}
				
	}
	else
	{
		/* Something is wrong */
		printf("Error!!! AHEHAEHEHAEHAE");
   80298:	4803      	ldr	r0, [pc, #12]	; (802a8 <digitalWrite+0x58>)
   8029a:	4b04      	ldr	r3, [pc, #16]	; (802ac <digitalWrite+0x5c>)
   8029c:	4798      	blx	r3
   8029e:	bd08      	pop	{r3, pc}
   802a0:	400e1030 	.word	0x400e1030
   802a4:	400e1034 	.word	0x400e1034
   802a8:	00084c1c 	.word	0x00084c1c
   802ac:	00081cbd 	.word	0x00081cbd

000802b0 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   802b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802b4:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   802b6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   802ba:	d132      	bne.n	80322 <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   802bc:	4b5f      	ldr	r3, [pc, #380]	; (8043c <UnityPrintNumber+0x18c>)
   802be:	6818      	ldr	r0, [r3, #0]
   802c0:	6882      	ldr	r2, [r0, #8]
   802c2:	6893      	ldr	r3, [r2, #8]
   802c4:	3b01      	subs	r3, #1
   802c6:	6093      	str	r3, [r2, #8]
   802c8:	2b00      	cmp	r3, #0
   802ca:	da1d      	bge.n	80308 <UnityPrintNumber+0x58>
   802cc:	6882      	ldr	r2, [r0, #8]
   802ce:	6891      	ldr	r1, [r2, #8]
   802d0:	6993      	ldr	r3, [r2, #24]
   802d2:	4299      	cmp	r1, r3
   802d4:	db12      	blt.n	802fc <UnityPrintNumber+0x4c>
   802d6:	6813      	ldr	r3, [r2, #0]
   802d8:	222d      	movs	r2, #45	; 0x2d
   802da:	701a      	strb	r2, [r3, #0]
   802dc:	4b57      	ldr	r3, [pc, #348]	; (8043c <UnityPrintNumber+0x18c>)
   802de:	6818      	ldr	r0, [r3, #0]
   802e0:	6882      	ldr	r2, [r0, #8]
   802e2:	6813      	ldr	r3, [r2, #0]
   802e4:	7819      	ldrb	r1, [r3, #0]
   802e6:	290a      	cmp	r1, #10
   802e8:	d002      	beq.n	802f0 <UnityPrintNumber+0x40>
   802ea:	3301      	adds	r3, #1
   802ec:	6013      	str	r3, [r2, #0]
   802ee:	e04f      	b.n	80390 <UnityPrintNumber+0xe0>
   802f0:	210a      	movs	r1, #10
   802f2:	4b53      	ldr	r3, [pc, #332]	; (80440 <UnityPrintNumber+0x190>)
   802f4:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   802f6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   802fa:	e049      	b.n	80390 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   802fc:	212d      	movs	r1, #45	; 0x2d
   802fe:	4b50      	ldr	r3, [pc, #320]	; (80440 <UnityPrintNumber+0x190>)
   80300:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80302:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80306:	e043      	b.n	80390 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80308:	6883      	ldr	r3, [r0, #8]
   8030a:	681b      	ldr	r3, [r3, #0]
   8030c:	222d      	movs	r2, #45	; 0x2d
   8030e:	701a      	strb	r2, [r3, #0]
   80310:	4b4a      	ldr	r3, [pc, #296]	; (8043c <UnityPrintNumber+0x18c>)
   80312:	681b      	ldr	r3, [r3, #0]
   80314:	689b      	ldr	r3, [r3, #8]
   80316:	681a      	ldr	r2, [r3, #0]
   80318:	3201      	adds	r2, #1
   8031a:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8031c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80320:	e036      	b.n	80390 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   80322:	2800      	cmp	r0, #0
   80324:	da34      	bge.n	80390 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   80326:	4b45      	ldr	r3, [pc, #276]	; (8043c <UnityPrintNumber+0x18c>)
   80328:	6818      	ldr	r0, [r3, #0]
   8032a:	6882      	ldr	r2, [r0, #8]
   8032c:	6893      	ldr	r3, [r2, #8]
   8032e:	3b01      	subs	r3, #1
   80330:	6093      	str	r3, [r2, #8]
   80332:	2b00      	cmp	r3, #0
   80334:	da19      	bge.n	8036a <UnityPrintNumber+0xba>
   80336:	6882      	ldr	r2, [r0, #8]
   80338:	6891      	ldr	r1, [r2, #8]
   8033a:	6993      	ldr	r3, [r2, #24]
   8033c:	4299      	cmp	r1, r3
   8033e:	db10      	blt.n	80362 <UnityPrintNumber+0xb2>
   80340:	6813      	ldr	r3, [r2, #0]
   80342:	222d      	movs	r2, #45	; 0x2d
   80344:	701a      	strb	r2, [r3, #0]
   80346:	4b3d      	ldr	r3, [pc, #244]	; (8043c <UnityPrintNumber+0x18c>)
   80348:	6818      	ldr	r0, [r3, #0]
   8034a:	6882      	ldr	r2, [r0, #8]
   8034c:	6813      	ldr	r3, [r2, #0]
   8034e:	7819      	ldrb	r1, [r3, #0]
   80350:	290a      	cmp	r1, #10
   80352:	d002      	beq.n	8035a <UnityPrintNumber+0xaa>
   80354:	3301      	adds	r3, #1
   80356:	6013      	str	r3, [r2, #0]
   80358:	e011      	b.n	8037e <UnityPrintNumber+0xce>
   8035a:	210a      	movs	r1, #10
   8035c:	4b38      	ldr	r3, [pc, #224]	; (80440 <UnityPrintNumber+0x190>)
   8035e:	4798      	blx	r3
   80360:	e00d      	b.n	8037e <UnityPrintNumber+0xce>
   80362:	212d      	movs	r1, #45	; 0x2d
   80364:	4b36      	ldr	r3, [pc, #216]	; (80440 <UnityPrintNumber+0x190>)
   80366:	4798      	blx	r3
   80368:	e009      	b.n	8037e <UnityPrintNumber+0xce>
   8036a:	6883      	ldr	r3, [r0, #8]
   8036c:	681b      	ldr	r3, [r3, #0]
   8036e:	222d      	movs	r2, #45	; 0x2d
   80370:	701a      	strb	r2, [r3, #0]
   80372:	4b32      	ldr	r3, [pc, #200]	; (8043c <UnityPrintNumber+0x18c>)
   80374:	681b      	ldr	r3, [r3, #0]
   80376:	689b      	ldr	r3, [r3, #8]
   80378:	681a      	ldr	r2, [r3, #0]
   8037a:	3201      	adds	r2, #1
   8037c:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   8037e:	426d      	negs	r5, r5
   80380:	e006      	b.n	80390 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   80382:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   80386:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   80388:	429c      	cmp	r4, r3
   8038a:	da06      	bge.n	8039a <UnityPrintNumber+0xea>
            divisor = next_divisor;
   8038c:	461c      	mov	r4, r3
   8038e:	e000      	b.n	80392 <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80390:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   80392:	fbb5 f3f4 	udiv	r3, r5, r4
   80396:	2b09      	cmp	r3, #9
   80398:	d8f3      	bhi.n	80382 <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   8039a:	4e28      	ldr	r6, [pc, #160]	; (8043c <UnityPrintNumber+0x18c>)
   8039c:	4f29      	ldr	r7, [pc, #164]	; (80444 <UnityPrintNumber+0x194>)
   8039e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80440 <UnityPrintNumber+0x190>
   803a2:	6830      	ldr	r0, [r6, #0]
   803a4:	6882      	ldr	r2, [r0, #8]
   803a6:	6893      	ldr	r3, [r2, #8]
   803a8:	3b01      	subs	r3, #1
   803aa:	6093      	str	r3, [r2, #8]
   803ac:	2b00      	cmp	r3, #0
   803ae:	da29      	bge.n	80404 <UnityPrintNumber+0x154>
   803b0:	6882      	ldr	r2, [r0, #8]
   803b2:	6891      	ldr	r1, [r2, #8]
   803b4:	6993      	ldr	r3, [r2, #24]
   803b6:	4299      	cmp	r1, r3
   803b8:	db17      	blt.n	803ea <UnityPrintNumber+0x13a>
   803ba:	6811      	ldr	r1, [r2, #0]
   803bc:	fbb5 f3f4 	udiv	r3, r5, r4
   803c0:	fba7 0203 	umull	r0, r2, r7, r3
   803c4:	08d2      	lsrs	r2, r2, #3
   803c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   803ca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   803ce:	3330      	adds	r3, #48	; 0x30
   803d0:	700b      	strb	r3, [r1, #0]
   803d2:	6830      	ldr	r0, [r6, #0]
   803d4:	6882      	ldr	r2, [r0, #8]
   803d6:	6813      	ldr	r3, [r2, #0]
   803d8:	7819      	ldrb	r1, [r3, #0]
   803da:	290a      	cmp	r1, #10
   803dc:	d002      	beq.n	803e4 <UnityPrintNumber+0x134>
   803de:	3301      	adds	r3, #1
   803e0:	6013      	str	r3, [r2, #0]
   803e2:	e021      	b.n	80428 <UnityPrintNumber+0x178>
   803e4:	210a      	movs	r1, #10
   803e6:	47c0      	blx	r8
   803e8:	e01e      	b.n	80428 <UnityPrintNumber+0x178>
   803ea:	fbb5 f3f4 	udiv	r3, r5, r4
   803ee:	fba7 e103 	umull	lr, r1, r7, r3
   803f2:	08c9      	lsrs	r1, r1, #3
   803f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   803f8:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   803fc:	3130      	adds	r1, #48	; 0x30
   803fe:	b2c9      	uxtb	r1, r1
   80400:	47c0      	blx	r8
   80402:	e011      	b.n	80428 <UnityPrintNumber+0x178>
   80404:	6883      	ldr	r3, [r0, #8]
   80406:	6819      	ldr	r1, [r3, #0]
   80408:	fbb5 f3f4 	udiv	r3, r5, r4
   8040c:	fba7 0203 	umull	r0, r2, r7, r3
   80410:	08d2      	lsrs	r2, r2, #3
   80412:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80416:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8041a:	3330      	adds	r3, #48	; 0x30
   8041c:	700b      	strb	r3, [r1, #0]
   8041e:	6833      	ldr	r3, [r6, #0]
   80420:	689b      	ldr	r3, [r3, #8]
   80422:	681a      	ldr	r2, [r3, #0]
   80424:	3201      	adds	r2, #1
   80426:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   80428:	4b07      	ldr	r3, [pc, #28]	; (80448 <UnityPrintNumber+0x198>)
   8042a:	fb83 2304 	smull	r2, r3, r3, r4
   8042e:	17e4      	asrs	r4, r4, #31
   80430:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   80434:	2c00      	cmp	r4, #0
   80436:	dcb4      	bgt.n	803a2 <UnityPrintNumber+0xf2>
}
   80438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8043c:	20070560 	.word	0x20070560
   80440:	00082bed 	.word	0x00082bed
   80444:	cccccccd 	.word	0xcccccccd
   80448:	66666667 	.word	0x66666667

0008044c <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   8044c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80450:	4606      	mov	r6, r0
   80452:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   80454:	4b5e      	ldr	r3, [pc, #376]	; (805d0 <UnityPrintNumberHex+0x184>)
   80456:	6818      	ldr	r0, [r3, #0]
   80458:	6882      	ldr	r2, [r0, #8]
   8045a:	6893      	ldr	r3, [r2, #8]
   8045c:	3b01      	subs	r3, #1
   8045e:	6093      	str	r3, [r2, #8]
   80460:	2b00      	cmp	r3, #0
   80462:	da19      	bge.n	80498 <UnityPrintNumberHex+0x4c>
   80464:	6882      	ldr	r2, [r0, #8]
   80466:	6891      	ldr	r1, [r2, #8]
   80468:	6993      	ldr	r3, [r2, #24]
   8046a:	4299      	cmp	r1, r3
   8046c:	db10      	blt.n	80490 <UnityPrintNumberHex+0x44>
   8046e:	6813      	ldr	r3, [r2, #0]
   80470:	2230      	movs	r2, #48	; 0x30
   80472:	701a      	strb	r2, [r3, #0]
   80474:	4b56      	ldr	r3, [pc, #344]	; (805d0 <UnityPrintNumberHex+0x184>)
   80476:	6818      	ldr	r0, [r3, #0]
   80478:	6882      	ldr	r2, [r0, #8]
   8047a:	6813      	ldr	r3, [r2, #0]
   8047c:	7819      	ldrb	r1, [r3, #0]
   8047e:	290a      	cmp	r1, #10
   80480:	d002      	beq.n	80488 <UnityPrintNumberHex+0x3c>
   80482:	3301      	adds	r3, #1
   80484:	6013      	str	r3, [r2, #0]
   80486:	e011      	b.n	804ac <UnityPrintNumberHex+0x60>
   80488:	210a      	movs	r1, #10
   8048a:	4b52      	ldr	r3, [pc, #328]	; (805d4 <UnityPrintNumberHex+0x188>)
   8048c:	4798      	blx	r3
   8048e:	e00d      	b.n	804ac <UnityPrintNumberHex+0x60>
   80490:	2130      	movs	r1, #48	; 0x30
   80492:	4b50      	ldr	r3, [pc, #320]	; (805d4 <UnityPrintNumberHex+0x188>)
   80494:	4798      	blx	r3
   80496:	e009      	b.n	804ac <UnityPrintNumberHex+0x60>
   80498:	6883      	ldr	r3, [r0, #8]
   8049a:	681b      	ldr	r3, [r3, #0]
   8049c:	2230      	movs	r2, #48	; 0x30
   8049e:	701a      	strb	r2, [r3, #0]
   804a0:	4b4b      	ldr	r3, [pc, #300]	; (805d0 <UnityPrintNumberHex+0x184>)
   804a2:	681b      	ldr	r3, [r3, #0]
   804a4:	689b      	ldr	r3, [r3, #8]
   804a6:	681a      	ldr	r2, [r3, #0]
   804a8:	3201      	adds	r2, #1
   804aa:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   804ac:	4b48      	ldr	r3, [pc, #288]	; (805d0 <UnityPrintNumberHex+0x184>)
   804ae:	6818      	ldr	r0, [r3, #0]
   804b0:	6882      	ldr	r2, [r0, #8]
   804b2:	6893      	ldr	r3, [r2, #8]
   804b4:	3b01      	subs	r3, #1
   804b6:	6093      	str	r3, [r2, #8]
   804b8:	2b00      	cmp	r3, #0
   804ba:	da1b      	bge.n	804f4 <UnityPrintNumberHex+0xa8>
   804bc:	6882      	ldr	r2, [r0, #8]
   804be:	6891      	ldr	r1, [r2, #8]
   804c0:	6993      	ldr	r3, [r2, #24]
   804c2:	4299      	cmp	r1, r3
   804c4:	db10      	blt.n	804e8 <UnityPrintNumberHex+0x9c>
   804c6:	6813      	ldr	r3, [r2, #0]
   804c8:	2278      	movs	r2, #120	; 0x78
   804ca:	701a      	strb	r2, [r3, #0]
   804cc:	4b40      	ldr	r3, [pc, #256]	; (805d0 <UnityPrintNumberHex+0x184>)
   804ce:	6818      	ldr	r0, [r3, #0]
   804d0:	6882      	ldr	r2, [r0, #8]
   804d2:	6813      	ldr	r3, [r2, #0]
   804d4:	7819      	ldrb	r1, [r3, #0]
   804d6:	290a      	cmp	r1, #10
   804d8:	d002      	beq.n	804e0 <UnityPrintNumberHex+0x94>
   804da:	3301      	adds	r3, #1
   804dc:	6013      	str	r3, [r2, #0]
   804de:	e006      	b.n	804ee <UnityPrintNumberHex+0xa2>
   804e0:	210a      	movs	r1, #10
   804e2:	4b3c      	ldr	r3, [pc, #240]	; (805d4 <UnityPrintNumberHex+0x188>)
   804e4:	4798      	blx	r3
   804e6:	e002      	b.n	804ee <UnityPrintNumberHex+0xa2>
   804e8:	2178      	movs	r1, #120	; 0x78
   804ea:	4b3a      	ldr	r3, [pc, #232]	; (805d4 <UnityPrintNumberHex+0x188>)
   804ec:	4798      	blx	r3

    while (nibbles > 0)
   804ee:	b964      	cbnz	r4, 8050a <UnityPrintNumberHex+0xbe>
   804f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   804f4:	6883      	ldr	r3, [r0, #8]
   804f6:	681b      	ldr	r3, [r3, #0]
   804f8:	2278      	movs	r2, #120	; 0x78
   804fa:	701a      	strb	r2, [r3, #0]
   804fc:	4b34      	ldr	r3, [pc, #208]	; (805d0 <UnityPrintNumberHex+0x184>)
   804fe:	681b      	ldr	r3, [r3, #0]
   80500:	689b      	ldr	r3, [r3, #8]
   80502:	681a      	ldr	r2, [r3, #0]
   80504:	3201      	adds	r2, #1
   80506:	601a      	str	r2, [r3, #0]
   80508:	e7f1      	b.n	804ee <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   8050a:	4d31      	ldr	r5, [pc, #196]	; (805d0 <UnityPrintNumberHex+0x184>)
   8050c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 805d4 <UnityPrintNumberHex+0x188>
   80510:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   80514:	3c01      	subs	r4, #1
   80516:	b2e4      	uxtb	r4, r4
   80518:	00a3      	lsls	r3, r4, #2
   8051a:	fa26 f303 	lsr.w	r3, r6, r3
   8051e:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   80522:	2b09      	cmp	r3, #9
   80524:	d828      	bhi.n	80578 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   80526:	6828      	ldr	r0, [r5, #0]
   80528:	6881      	ldr	r1, [r0, #8]
   8052a:	688a      	ldr	r2, [r1, #8]
   8052c:	3a01      	subs	r2, #1
   8052e:	608a      	str	r2, [r1, #8]
   80530:	2a00      	cmp	r2, #0
   80532:	da17      	bge.n	80564 <UnityPrintNumberHex+0x118>
   80534:	6882      	ldr	r2, [r0, #8]
   80536:	6891      	ldr	r1, [r2, #8]
   80538:	6997      	ldr	r7, [r2, #24]
   8053a:	42b9      	cmp	r1, r7
   8053c:	db0e      	blt.n	8055c <UnityPrintNumberHex+0x110>
   8053e:	6812      	ldr	r2, [r2, #0]
   80540:	3330      	adds	r3, #48	; 0x30
   80542:	7013      	strb	r3, [r2, #0]
   80544:	6828      	ldr	r0, [r5, #0]
   80546:	6882      	ldr	r2, [r0, #8]
   80548:	6813      	ldr	r3, [r2, #0]
   8054a:	7819      	ldrb	r1, [r3, #0]
   8054c:	290a      	cmp	r1, #10
   8054e:	d002      	beq.n	80556 <UnityPrintNumberHex+0x10a>
   80550:	3301      	adds	r3, #1
   80552:	6013      	str	r3, [r2, #0]
   80554:	e038      	b.n	805c8 <UnityPrintNumberHex+0x17c>
   80556:	4641      	mov	r1, r8
   80558:	47c8      	blx	r9
   8055a:	e035      	b.n	805c8 <UnityPrintNumberHex+0x17c>
   8055c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   80560:	47c8      	blx	r9
   80562:	e031      	b.n	805c8 <UnityPrintNumberHex+0x17c>
   80564:	6882      	ldr	r2, [r0, #8]
   80566:	6812      	ldr	r2, [r2, #0]
   80568:	3330      	adds	r3, #48	; 0x30
   8056a:	7013      	strb	r3, [r2, #0]
   8056c:	682b      	ldr	r3, [r5, #0]
   8056e:	689b      	ldr	r3, [r3, #8]
   80570:	681a      	ldr	r2, [r3, #0]
   80572:	3201      	adds	r2, #1
   80574:	601a      	str	r2, [r3, #0]
   80576:	e027      	b.n	805c8 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80578:	6828      	ldr	r0, [r5, #0]
   8057a:	6881      	ldr	r1, [r0, #8]
   8057c:	688a      	ldr	r2, [r1, #8]
   8057e:	3a01      	subs	r2, #1
   80580:	608a      	str	r2, [r1, #8]
   80582:	2a00      	cmp	r2, #0
   80584:	da17      	bge.n	805b6 <UnityPrintNumberHex+0x16a>
   80586:	6882      	ldr	r2, [r0, #8]
   80588:	6891      	ldr	r1, [r2, #8]
   8058a:	6997      	ldr	r7, [r2, #24]
   8058c:	42b9      	cmp	r1, r7
   8058e:	db0e      	blt.n	805ae <UnityPrintNumberHex+0x162>
   80590:	6812      	ldr	r2, [r2, #0]
   80592:	3337      	adds	r3, #55	; 0x37
   80594:	7013      	strb	r3, [r2, #0]
   80596:	6828      	ldr	r0, [r5, #0]
   80598:	6882      	ldr	r2, [r0, #8]
   8059a:	6813      	ldr	r3, [r2, #0]
   8059c:	7819      	ldrb	r1, [r3, #0]
   8059e:	290a      	cmp	r1, #10
   805a0:	d002      	beq.n	805a8 <UnityPrintNumberHex+0x15c>
   805a2:	3301      	adds	r3, #1
   805a4:	6013      	str	r3, [r2, #0]
   805a6:	e00f      	b.n	805c8 <UnityPrintNumberHex+0x17c>
   805a8:	4641      	mov	r1, r8
   805aa:	47c8      	blx	r9
   805ac:	e00c      	b.n	805c8 <UnityPrintNumberHex+0x17c>
   805ae:	f103 0137 	add.w	r1, r3, #55	; 0x37
   805b2:	47c8      	blx	r9
   805b4:	e008      	b.n	805c8 <UnityPrintNumberHex+0x17c>
   805b6:	6882      	ldr	r2, [r0, #8]
   805b8:	6812      	ldr	r2, [r2, #0]
   805ba:	3337      	adds	r3, #55	; 0x37
   805bc:	7013      	strb	r3, [r2, #0]
   805be:	682b      	ldr	r3, [r5, #0]
   805c0:	689b      	ldr	r3, [r3, #8]
   805c2:	681a      	ldr	r2, [r3, #0]
   805c4:	3201      	adds	r2, #1
   805c6:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   805c8:	2c00      	cmp	r4, #0
   805ca:	d1a3      	bne.n	80514 <UnityPrintNumberHex+0xc8>
   805cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   805d0:	20070560 	.word	0x20070560
   805d4:	00082bed 	.word	0x00082bed

000805d8 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   805d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   805da:	2800      	cmp	r0, #0
   805dc:	f000 810a 	beq.w	807f4 <UnityPrint+0x21c>
    {
        while (*pch)
   805e0:	7803      	ldrb	r3, [r0, #0]
   805e2:	2b00      	cmp	r3, #0
   805e4:	f000 8106 	beq.w	807f4 <UnityPrint+0x21c>
   805e8:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   805ea:	4d83      	ldr	r5, [pc, #524]	; (807f8 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   805ec:	4e83      	ldr	r6, [pc, #524]	; (807fc <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   805ee:	4f84      	ldr	r7, [pc, #528]	; (80800 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   805f0:	f1a3 0220 	sub.w	r2, r3, #32
   805f4:	b2d2      	uxtb	r2, r2
   805f6:	2a5e      	cmp	r2, #94	; 0x5e
   805f8:	d82a      	bhi.n	80650 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   805fa:	6828      	ldr	r0, [r5, #0]
   805fc:	6882      	ldr	r2, [r0, #8]
   805fe:	6893      	ldr	r3, [r2, #8]
   80600:	3b01      	subs	r3, #1
   80602:	6093      	str	r3, [r2, #8]
   80604:	2b00      	cmp	r3, #0
   80606:	da18      	bge.n	8063a <UnityPrint+0x62>
   80608:	6882      	ldr	r2, [r0, #8]
   8060a:	6891      	ldr	r1, [r2, #8]
   8060c:	6993      	ldr	r3, [r2, #24]
   8060e:	4299      	cmp	r1, r3
   80610:	db0f      	blt.n	80632 <UnityPrint+0x5a>
   80612:	6813      	ldr	r3, [r2, #0]
   80614:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80618:	701a      	strb	r2, [r3, #0]
   8061a:	6828      	ldr	r0, [r5, #0]
   8061c:	6882      	ldr	r2, [r0, #8]
   8061e:	6813      	ldr	r3, [r2, #0]
   80620:	7819      	ldrb	r1, [r3, #0]
   80622:	290a      	cmp	r1, #10
   80624:	d002      	beq.n	8062c <UnityPrint+0x54>
   80626:	3301      	adds	r3, #1
   80628:	6013      	str	r3, [r2, #0]
   8062a:	e0de      	b.n	807ea <UnityPrint+0x212>
   8062c:	210a      	movs	r1, #10
   8062e:	47b8      	blx	r7
   80630:	e0db      	b.n	807ea <UnityPrint+0x212>
   80632:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   80636:	47b8      	blx	r7
   80638:	e0d7      	b.n	807ea <UnityPrint+0x212>
   8063a:	6883      	ldr	r3, [r0, #8]
   8063c:	681b      	ldr	r3, [r3, #0]
   8063e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80642:	701a      	strb	r2, [r3, #0]
   80644:	682b      	ldr	r3, [r5, #0]
   80646:	689b      	ldr	r3, [r3, #8]
   80648:	681a      	ldr	r2, [r3, #0]
   8064a:	3201      	adds	r2, #1
   8064c:	601a      	str	r2, [r3, #0]
   8064e:	e0cc      	b.n	807ea <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80650:	2b0d      	cmp	r3, #13
   80652:	d14e      	bne.n	806f2 <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   80654:	6828      	ldr	r0, [r5, #0]
   80656:	6882      	ldr	r2, [r0, #8]
   80658:	6893      	ldr	r3, [r2, #8]
   8065a:	3b01      	subs	r3, #1
   8065c:	6093      	str	r3, [r2, #8]
   8065e:	2b00      	cmp	r3, #0
   80660:	da16      	bge.n	80690 <UnityPrint+0xb8>
   80662:	6882      	ldr	r2, [r0, #8]
   80664:	6891      	ldr	r1, [r2, #8]
   80666:	6993      	ldr	r3, [r2, #24]
   80668:	4299      	cmp	r1, r3
   8066a:	db0e      	blt.n	8068a <UnityPrint+0xb2>
   8066c:	6813      	ldr	r3, [r2, #0]
   8066e:	225c      	movs	r2, #92	; 0x5c
   80670:	701a      	strb	r2, [r3, #0]
   80672:	6828      	ldr	r0, [r5, #0]
   80674:	6882      	ldr	r2, [r0, #8]
   80676:	6813      	ldr	r3, [r2, #0]
   80678:	7819      	ldrb	r1, [r3, #0]
   8067a:	290a      	cmp	r1, #10
   8067c:	d002      	beq.n	80684 <UnityPrint+0xac>
   8067e:	3301      	adds	r3, #1
   80680:	6013      	str	r3, [r2, #0]
   80682:	e00e      	b.n	806a2 <UnityPrint+0xca>
   80684:	210a      	movs	r1, #10
   80686:	47b8      	blx	r7
   80688:	e00b      	b.n	806a2 <UnityPrint+0xca>
   8068a:	215c      	movs	r1, #92	; 0x5c
   8068c:	47b8      	blx	r7
   8068e:	e008      	b.n	806a2 <UnityPrint+0xca>
   80690:	6883      	ldr	r3, [r0, #8]
   80692:	681b      	ldr	r3, [r3, #0]
   80694:	225c      	movs	r2, #92	; 0x5c
   80696:	701a      	strb	r2, [r3, #0]
   80698:	682b      	ldr	r3, [r5, #0]
   8069a:	689b      	ldr	r3, [r3, #8]
   8069c:	681a      	ldr	r2, [r3, #0]
   8069e:	3201      	adds	r2, #1
   806a0:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   806a2:	6828      	ldr	r0, [r5, #0]
   806a4:	6882      	ldr	r2, [r0, #8]
   806a6:	6893      	ldr	r3, [r2, #8]
   806a8:	3b01      	subs	r3, #1
   806aa:	6093      	str	r3, [r2, #8]
   806ac:	2b00      	cmp	r3, #0
   806ae:	da16      	bge.n	806de <UnityPrint+0x106>
   806b0:	6882      	ldr	r2, [r0, #8]
   806b2:	6891      	ldr	r1, [r2, #8]
   806b4:	6993      	ldr	r3, [r2, #24]
   806b6:	4299      	cmp	r1, r3
   806b8:	db0e      	blt.n	806d8 <UnityPrint+0x100>
   806ba:	6813      	ldr	r3, [r2, #0]
   806bc:	2272      	movs	r2, #114	; 0x72
   806be:	701a      	strb	r2, [r3, #0]
   806c0:	6828      	ldr	r0, [r5, #0]
   806c2:	6882      	ldr	r2, [r0, #8]
   806c4:	6813      	ldr	r3, [r2, #0]
   806c6:	7819      	ldrb	r1, [r3, #0]
   806c8:	290a      	cmp	r1, #10
   806ca:	d002      	beq.n	806d2 <UnityPrint+0xfa>
   806cc:	3301      	adds	r3, #1
   806ce:	6013      	str	r3, [r2, #0]
   806d0:	e08b      	b.n	807ea <UnityPrint+0x212>
   806d2:	210a      	movs	r1, #10
   806d4:	47b8      	blx	r7
   806d6:	e088      	b.n	807ea <UnityPrint+0x212>
   806d8:	2172      	movs	r1, #114	; 0x72
   806da:	47b8      	blx	r7
   806dc:	e085      	b.n	807ea <UnityPrint+0x212>
   806de:	6883      	ldr	r3, [r0, #8]
   806e0:	681b      	ldr	r3, [r3, #0]
   806e2:	2272      	movs	r2, #114	; 0x72
   806e4:	701a      	strb	r2, [r3, #0]
   806e6:	682b      	ldr	r3, [r5, #0]
   806e8:	689b      	ldr	r3, [r3, #8]
   806ea:	681a      	ldr	r2, [r3, #0]
   806ec:	3201      	adds	r2, #1
   806ee:	601a      	str	r2, [r3, #0]
   806f0:	e07b      	b.n	807ea <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   806f2:	2b0a      	cmp	r3, #10
   806f4:	d14e      	bne.n	80794 <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   806f6:	6828      	ldr	r0, [r5, #0]
   806f8:	6882      	ldr	r2, [r0, #8]
   806fa:	6893      	ldr	r3, [r2, #8]
   806fc:	3b01      	subs	r3, #1
   806fe:	6093      	str	r3, [r2, #8]
   80700:	2b00      	cmp	r3, #0
   80702:	da16      	bge.n	80732 <UnityPrint+0x15a>
   80704:	6882      	ldr	r2, [r0, #8]
   80706:	6891      	ldr	r1, [r2, #8]
   80708:	6993      	ldr	r3, [r2, #24]
   8070a:	4299      	cmp	r1, r3
   8070c:	db0e      	blt.n	8072c <UnityPrint+0x154>
   8070e:	6813      	ldr	r3, [r2, #0]
   80710:	225c      	movs	r2, #92	; 0x5c
   80712:	701a      	strb	r2, [r3, #0]
   80714:	6828      	ldr	r0, [r5, #0]
   80716:	6882      	ldr	r2, [r0, #8]
   80718:	6813      	ldr	r3, [r2, #0]
   8071a:	7819      	ldrb	r1, [r3, #0]
   8071c:	290a      	cmp	r1, #10
   8071e:	d002      	beq.n	80726 <UnityPrint+0x14e>
   80720:	3301      	adds	r3, #1
   80722:	6013      	str	r3, [r2, #0]
   80724:	e00e      	b.n	80744 <UnityPrint+0x16c>
   80726:	210a      	movs	r1, #10
   80728:	47b8      	blx	r7
   8072a:	e00b      	b.n	80744 <UnityPrint+0x16c>
   8072c:	215c      	movs	r1, #92	; 0x5c
   8072e:	47b8      	blx	r7
   80730:	e008      	b.n	80744 <UnityPrint+0x16c>
   80732:	6883      	ldr	r3, [r0, #8]
   80734:	681b      	ldr	r3, [r3, #0]
   80736:	225c      	movs	r2, #92	; 0x5c
   80738:	701a      	strb	r2, [r3, #0]
   8073a:	682b      	ldr	r3, [r5, #0]
   8073c:	689b      	ldr	r3, [r3, #8]
   8073e:	681a      	ldr	r2, [r3, #0]
   80740:	3201      	adds	r2, #1
   80742:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   80744:	6828      	ldr	r0, [r5, #0]
   80746:	6882      	ldr	r2, [r0, #8]
   80748:	6893      	ldr	r3, [r2, #8]
   8074a:	3b01      	subs	r3, #1
   8074c:	6093      	str	r3, [r2, #8]
   8074e:	2b00      	cmp	r3, #0
   80750:	da16      	bge.n	80780 <UnityPrint+0x1a8>
   80752:	6882      	ldr	r2, [r0, #8]
   80754:	6891      	ldr	r1, [r2, #8]
   80756:	6993      	ldr	r3, [r2, #24]
   80758:	4299      	cmp	r1, r3
   8075a:	db0e      	blt.n	8077a <UnityPrint+0x1a2>
   8075c:	6813      	ldr	r3, [r2, #0]
   8075e:	226e      	movs	r2, #110	; 0x6e
   80760:	701a      	strb	r2, [r3, #0]
   80762:	6828      	ldr	r0, [r5, #0]
   80764:	6882      	ldr	r2, [r0, #8]
   80766:	6813      	ldr	r3, [r2, #0]
   80768:	7819      	ldrb	r1, [r3, #0]
   8076a:	290a      	cmp	r1, #10
   8076c:	d002      	beq.n	80774 <UnityPrint+0x19c>
   8076e:	3301      	adds	r3, #1
   80770:	6013      	str	r3, [r2, #0]
   80772:	e03a      	b.n	807ea <UnityPrint+0x212>
   80774:	210a      	movs	r1, #10
   80776:	47b8      	blx	r7
   80778:	e037      	b.n	807ea <UnityPrint+0x212>
   8077a:	216e      	movs	r1, #110	; 0x6e
   8077c:	47b8      	blx	r7
   8077e:	e034      	b.n	807ea <UnityPrint+0x212>
   80780:	6883      	ldr	r3, [r0, #8]
   80782:	681b      	ldr	r3, [r3, #0]
   80784:	226e      	movs	r2, #110	; 0x6e
   80786:	701a      	strb	r2, [r3, #0]
   80788:	682b      	ldr	r3, [r5, #0]
   8078a:	689b      	ldr	r3, [r3, #8]
   8078c:	681a      	ldr	r2, [r3, #0]
   8078e:	3201      	adds	r2, #1
   80790:	601a      	str	r2, [r3, #0]
   80792:	e02a      	b.n	807ea <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80794:	6828      	ldr	r0, [r5, #0]
   80796:	6882      	ldr	r2, [r0, #8]
   80798:	6893      	ldr	r3, [r2, #8]
   8079a:	3b01      	subs	r3, #1
   8079c:	6093      	str	r3, [r2, #8]
   8079e:	2b00      	cmp	r3, #0
   807a0:	da16      	bge.n	807d0 <UnityPrint+0x1f8>
   807a2:	6882      	ldr	r2, [r0, #8]
   807a4:	6891      	ldr	r1, [r2, #8]
   807a6:	6993      	ldr	r3, [r2, #24]
   807a8:	4299      	cmp	r1, r3
   807aa:	db0e      	blt.n	807ca <UnityPrint+0x1f2>
   807ac:	6813      	ldr	r3, [r2, #0]
   807ae:	225c      	movs	r2, #92	; 0x5c
   807b0:	701a      	strb	r2, [r3, #0]
   807b2:	6828      	ldr	r0, [r5, #0]
   807b4:	6882      	ldr	r2, [r0, #8]
   807b6:	6813      	ldr	r3, [r2, #0]
   807b8:	7819      	ldrb	r1, [r3, #0]
   807ba:	290a      	cmp	r1, #10
   807bc:	d002      	beq.n	807c4 <UnityPrint+0x1ec>
   807be:	3301      	adds	r3, #1
   807c0:	6013      	str	r3, [r2, #0]
   807c2:	e00e      	b.n	807e2 <UnityPrint+0x20a>
   807c4:	210a      	movs	r1, #10
   807c6:	47b8      	blx	r7
   807c8:	e00b      	b.n	807e2 <UnityPrint+0x20a>
   807ca:	215c      	movs	r1, #92	; 0x5c
   807cc:	47b8      	blx	r7
   807ce:	e008      	b.n	807e2 <UnityPrint+0x20a>
   807d0:	6883      	ldr	r3, [r0, #8]
   807d2:	681b      	ldr	r3, [r3, #0]
   807d4:	225c      	movs	r2, #92	; 0x5c
   807d6:	701a      	strb	r2, [r3, #0]
   807d8:	682b      	ldr	r3, [r5, #0]
   807da:	689b      	ldr	r3, [r3, #8]
   807dc:	681a      	ldr	r2, [r3, #0]
   807de:	3201      	adds	r2, #1
   807e0:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   807e2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   807e6:	2102      	movs	r1, #2
   807e8:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   807ea:	f814 3b01 	ldrb.w	r3, [r4], #1
   807ee:	2b00      	cmp	r3, #0
   807f0:	f47f aefe 	bne.w	805f0 <UnityPrint+0x18>
   807f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   807f6:	bf00      	nop
   807f8:	20070560 	.word	0x20070560
   807fc:	0008044d 	.word	0x0008044d
   80800:	00082bed 	.word	0x00082bed

00080804 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   80804:	b538      	push	{r3, r4, r5, lr}
   80806:	460d      	mov	r5, r1
    UnityPrint(file);
   80808:	4b46      	ldr	r3, [pc, #280]	; (80924 <UnityTestResultsBegin+0x120>)
   8080a:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   8080c:	4b46      	ldr	r3, [pc, #280]	; (80928 <UnityTestResultsBegin+0x124>)
   8080e:	6818      	ldr	r0, [r3, #0]
   80810:	6884      	ldr	r4, [r0, #8]
   80812:	68a2      	ldr	r2, [r4, #8]
   80814:	3a01      	subs	r2, #1
   80816:	60a2      	str	r2, [r4, #8]
   80818:	2a00      	cmp	r2, #0
   8081a:	da19      	bge.n	80850 <UnityTestResultsBegin+0x4c>
   8081c:	6882      	ldr	r2, [r0, #8]
   8081e:	6893      	ldr	r3, [r2, #8]
   80820:	6991      	ldr	r1, [r2, #24]
   80822:	428b      	cmp	r3, r1
   80824:	db10      	blt.n	80848 <UnityTestResultsBegin+0x44>
   80826:	6813      	ldr	r3, [r2, #0]
   80828:	223a      	movs	r2, #58	; 0x3a
   8082a:	701a      	strb	r2, [r3, #0]
   8082c:	4b3e      	ldr	r3, [pc, #248]	; (80928 <UnityTestResultsBegin+0x124>)
   8082e:	6818      	ldr	r0, [r3, #0]
   80830:	6882      	ldr	r2, [r0, #8]
   80832:	6813      	ldr	r3, [r2, #0]
   80834:	7819      	ldrb	r1, [r3, #0]
   80836:	290a      	cmp	r1, #10
   80838:	d002      	beq.n	80840 <UnityTestResultsBegin+0x3c>
   8083a:	3301      	adds	r3, #1
   8083c:	6013      	str	r3, [r2, #0]
   8083e:	e011      	b.n	80864 <UnityTestResultsBegin+0x60>
   80840:	210a      	movs	r1, #10
   80842:	4b3a      	ldr	r3, [pc, #232]	; (8092c <UnityTestResultsBegin+0x128>)
   80844:	4798      	blx	r3
   80846:	e00d      	b.n	80864 <UnityTestResultsBegin+0x60>
   80848:	213a      	movs	r1, #58	; 0x3a
   8084a:	4b38      	ldr	r3, [pc, #224]	; (8092c <UnityTestResultsBegin+0x128>)
   8084c:	4798      	blx	r3
   8084e:	e009      	b.n	80864 <UnityTestResultsBegin+0x60>
   80850:	6883      	ldr	r3, [r0, #8]
   80852:	681b      	ldr	r3, [r3, #0]
   80854:	223a      	movs	r2, #58	; 0x3a
   80856:	701a      	strb	r2, [r3, #0]
   80858:	4b33      	ldr	r3, [pc, #204]	; (80928 <UnityTestResultsBegin+0x124>)
   8085a:	681b      	ldr	r3, [r3, #0]
   8085c:	689b      	ldr	r3, [r3, #8]
   8085e:	681a      	ldr	r2, [r3, #0]
   80860:	3201      	adds	r2, #1
   80862:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   80864:	4628      	mov	r0, r5
   80866:	4b32      	ldr	r3, [pc, #200]	; (80930 <UnityTestResultsBegin+0x12c>)
   80868:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   8086a:	4b2f      	ldr	r3, [pc, #188]	; (80928 <UnityTestResultsBegin+0x124>)
   8086c:	6818      	ldr	r0, [r3, #0]
   8086e:	6882      	ldr	r2, [r0, #8]
   80870:	6893      	ldr	r3, [r2, #8]
   80872:	3b01      	subs	r3, #1
   80874:	6093      	str	r3, [r2, #8]
   80876:	2b00      	cmp	r3, #0
   80878:	da19      	bge.n	808ae <UnityTestResultsBegin+0xaa>
   8087a:	6882      	ldr	r2, [r0, #8]
   8087c:	6891      	ldr	r1, [r2, #8]
   8087e:	6993      	ldr	r3, [r2, #24]
   80880:	4299      	cmp	r1, r3
   80882:	db10      	blt.n	808a6 <UnityTestResultsBegin+0xa2>
   80884:	6813      	ldr	r3, [r2, #0]
   80886:	223a      	movs	r2, #58	; 0x3a
   80888:	701a      	strb	r2, [r3, #0]
   8088a:	4b27      	ldr	r3, [pc, #156]	; (80928 <UnityTestResultsBegin+0x124>)
   8088c:	6818      	ldr	r0, [r3, #0]
   8088e:	6882      	ldr	r2, [r0, #8]
   80890:	6813      	ldr	r3, [r2, #0]
   80892:	7819      	ldrb	r1, [r3, #0]
   80894:	290a      	cmp	r1, #10
   80896:	d002      	beq.n	8089e <UnityTestResultsBegin+0x9a>
   80898:	3301      	adds	r3, #1
   8089a:	6013      	str	r3, [r2, #0]
   8089c:	e011      	b.n	808c2 <UnityTestResultsBegin+0xbe>
   8089e:	210a      	movs	r1, #10
   808a0:	4b22      	ldr	r3, [pc, #136]	; (8092c <UnityTestResultsBegin+0x128>)
   808a2:	4798      	blx	r3
   808a4:	e00d      	b.n	808c2 <UnityTestResultsBegin+0xbe>
   808a6:	213a      	movs	r1, #58	; 0x3a
   808a8:	4b20      	ldr	r3, [pc, #128]	; (8092c <UnityTestResultsBegin+0x128>)
   808aa:	4798      	blx	r3
   808ac:	e009      	b.n	808c2 <UnityTestResultsBegin+0xbe>
   808ae:	6883      	ldr	r3, [r0, #8]
   808b0:	681b      	ldr	r3, [r3, #0]
   808b2:	223a      	movs	r2, #58	; 0x3a
   808b4:	701a      	strb	r2, [r3, #0]
   808b6:	4b1c      	ldr	r3, [pc, #112]	; (80928 <UnityTestResultsBegin+0x124>)
   808b8:	681b      	ldr	r3, [r3, #0]
   808ba:	689b      	ldr	r3, [r3, #8]
   808bc:	681a      	ldr	r2, [r3, #0]
   808be:	3201      	adds	r2, #1
   808c0:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   808c2:	4b1c      	ldr	r3, [pc, #112]	; (80934 <UnityTestResultsBegin+0x130>)
   808c4:	6858      	ldr	r0, [r3, #4]
   808c6:	4b17      	ldr	r3, [pc, #92]	; (80924 <UnityTestResultsBegin+0x120>)
   808c8:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   808ca:	4b17      	ldr	r3, [pc, #92]	; (80928 <UnityTestResultsBegin+0x124>)
   808cc:	6818      	ldr	r0, [r3, #0]
   808ce:	6882      	ldr	r2, [r0, #8]
   808d0:	6893      	ldr	r3, [r2, #8]
   808d2:	3b01      	subs	r3, #1
   808d4:	6093      	str	r3, [r2, #8]
   808d6:	2b00      	cmp	r3, #0
   808d8:	da19      	bge.n	8090e <UnityTestResultsBegin+0x10a>
   808da:	6882      	ldr	r2, [r0, #8]
   808dc:	6891      	ldr	r1, [r2, #8]
   808de:	6993      	ldr	r3, [r2, #24]
   808e0:	4299      	cmp	r1, r3
   808e2:	db10      	blt.n	80906 <UnityTestResultsBegin+0x102>
   808e4:	6813      	ldr	r3, [r2, #0]
   808e6:	223a      	movs	r2, #58	; 0x3a
   808e8:	701a      	strb	r2, [r3, #0]
   808ea:	4b0f      	ldr	r3, [pc, #60]	; (80928 <UnityTestResultsBegin+0x124>)
   808ec:	6818      	ldr	r0, [r3, #0]
   808ee:	6882      	ldr	r2, [r0, #8]
   808f0:	6813      	ldr	r3, [r2, #0]
   808f2:	7819      	ldrb	r1, [r3, #0]
   808f4:	290a      	cmp	r1, #10
   808f6:	d002      	beq.n	808fe <UnityTestResultsBegin+0xfa>
   808f8:	3301      	adds	r3, #1
   808fa:	6013      	str	r3, [r2, #0]
   808fc:	bd38      	pop	{r3, r4, r5, pc}
   808fe:	210a      	movs	r1, #10
   80900:	4b0a      	ldr	r3, [pc, #40]	; (8092c <UnityTestResultsBegin+0x128>)
   80902:	4798      	blx	r3
   80904:	bd38      	pop	{r3, r4, r5, pc}
   80906:	213a      	movs	r1, #58	; 0x3a
   80908:	4b08      	ldr	r3, [pc, #32]	; (8092c <UnityTestResultsBegin+0x128>)
   8090a:	4798      	blx	r3
   8090c:	bd38      	pop	{r3, r4, r5, pc}
   8090e:	6883      	ldr	r3, [r0, #8]
   80910:	681b      	ldr	r3, [r3, #0]
   80912:	223a      	movs	r2, #58	; 0x3a
   80914:	701a      	strb	r2, [r3, #0]
   80916:	4b04      	ldr	r3, [pc, #16]	; (80928 <UnityTestResultsBegin+0x124>)
   80918:	681b      	ldr	r3, [r3, #0]
   8091a:	689b      	ldr	r3, [r3, #8]
   8091c:	681a      	ldr	r2, [r3, #0]
   8091e:	3201      	adds	r2, #1
   80920:	601a      	str	r2, [r3, #0]
   80922:	bd38      	pop	{r3, r4, r5, pc}
   80924:	000805d9 	.word	0x000805d9
   80928:	20070560 	.word	0x20070560
   8092c:	00082bed 	.word	0x00082bed
   80930:	000802b1 	.word	0x000802b1
   80934:	20070b04 	.word	0x20070b04

00080938 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   80938:	b508      	push	{r3, lr}
   8093a:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   8093c:	4b19      	ldr	r3, [pc, #100]	; (809a4 <UnityTestResultsFailBegin+0x6c>)
   8093e:	6818      	ldr	r0, [r3, #0]
   80940:	4b19      	ldr	r3, [pc, #100]	; (809a8 <UnityTestResultsFailBegin+0x70>)
   80942:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   80944:	4819      	ldr	r0, [pc, #100]	; (809ac <UnityTestResultsFailBegin+0x74>)
   80946:	4b1a      	ldr	r3, [pc, #104]	; (809b0 <UnityTestResultsFailBegin+0x78>)
   80948:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   8094a:	4b1a      	ldr	r3, [pc, #104]	; (809b4 <UnityTestResultsFailBegin+0x7c>)
   8094c:	6818      	ldr	r0, [r3, #0]
   8094e:	6882      	ldr	r2, [r0, #8]
   80950:	6893      	ldr	r3, [r2, #8]
   80952:	3b01      	subs	r3, #1
   80954:	6093      	str	r3, [r2, #8]
   80956:	2b00      	cmp	r3, #0
   80958:	da19      	bge.n	8098e <UnityTestResultsFailBegin+0x56>
   8095a:	6882      	ldr	r2, [r0, #8]
   8095c:	6891      	ldr	r1, [r2, #8]
   8095e:	6993      	ldr	r3, [r2, #24]
   80960:	4299      	cmp	r1, r3
   80962:	db10      	blt.n	80986 <UnityTestResultsFailBegin+0x4e>
   80964:	6813      	ldr	r3, [r2, #0]
   80966:	223a      	movs	r2, #58	; 0x3a
   80968:	701a      	strb	r2, [r3, #0]
   8096a:	4b12      	ldr	r3, [pc, #72]	; (809b4 <UnityTestResultsFailBegin+0x7c>)
   8096c:	6818      	ldr	r0, [r3, #0]
   8096e:	6882      	ldr	r2, [r0, #8]
   80970:	6813      	ldr	r3, [r2, #0]
   80972:	7819      	ldrb	r1, [r3, #0]
   80974:	290a      	cmp	r1, #10
   80976:	d002      	beq.n	8097e <UnityTestResultsFailBegin+0x46>
   80978:	3301      	adds	r3, #1
   8097a:	6013      	str	r3, [r2, #0]
   8097c:	bd08      	pop	{r3, pc}
   8097e:	210a      	movs	r1, #10
   80980:	4b0d      	ldr	r3, [pc, #52]	; (809b8 <UnityTestResultsFailBegin+0x80>)
   80982:	4798      	blx	r3
   80984:	bd08      	pop	{r3, pc}
   80986:	213a      	movs	r1, #58	; 0x3a
   80988:	4b0b      	ldr	r3, [pc, #44]	; (809b8 <UnityTestResultsFailBegin+0x80>)
   8098a:	4798      	blx	r3
   8098c:	bd08      	pop	{r3, pc}
   8098e:	6883      	ldr	r3, [r0, #8]
   80990:	681b      	ldr	r3, [r3, #0]
   80992:	223a      	movs	r2, #58	; 0x3a
   80994:	701a      	strb	r2, [r3, #0]
   80996:	4b07      	ldr	r3, [pc, #28]	; (809b4 <UnityTestResultsFailBegin+0x7c>)
   80998:	681b      	ldr	r3, [r3, #0]
   8099a:	689b      	ldr	r3, [r3, #8]
   8099c:	681a      	ldr	r2, [r3, #0]
   8099e:	3201      	adds	r2, #1
   809a0:	601a      	str	r2, [r3, #0]
   809a2:	bd08      	pop	{r3, pc}
   809a4:	20070b04 	.word	0x20070b04
   809a8:	00080805 	.word	0x00080805
   809ac:	00084c44 	.word	0x00084c44
   809b0:	000805d9 	.word	0x000805d9
   809b4:	20070560 	.word	0x20070560
   809b8:	00082bed 	.word	0x00082bed

000809bc <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   809bc:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   809be:	4605      	mov	r5, r0
   809c0:	b120      	cbz	r0, 809cc <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   809c2:	4803      	ldr	r0, [pc, #12]	; (809d0 <UnityAddMsgIfSpecified+0x14>)
   809c4:	4c03      	ldr	r4, [pc, #12]	; (809d4 <UnityAddMsgIfSpecified+0x18>)
   809c6:	47a0      	blx	r4
        UnityPrint(msg);
   809c8:	4628      	mov	r0, r5
   809ca:	47a0      	blx	r4
   809cc:	bd38      	pop	{r3, r4, r5, pc}
   809ce:	bf00      	nop
   809d0:	00084c38 	.word	0x00084c38
   809d4:	000805d9 	.word	0x000805d9

000809d8 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   809d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   809dc:	4607      	mov	r7, r0
   809de:	4688      	mov	r8, r1
   809e0:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   809e2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   809e6:	4e43      	ldr	r6, [pc, #268]	; (80af4 <UnityPrintMask+0x11c>)
   809e8:	f04f 0958 	mov.w	r9, #88	; 0x58
   809ec:	f8df a108 	ldr.w	sl, [pc, #264]	; 80af8 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   809f0:	423c      	tst	r4, r7
   809f2:	d052      	beq.n	80a9a <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   809f4:	ea14 0f08 	tst.w	r4, r8
   809f8:	d027      	beq.n	80a4a <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   809fa:	6830      	ldr	r0, [r6, #0]
   809fc:	6882      	ldr	r2, [r0, #8]
   809fe:	6893      	ldr	r3, [r2, #8]
   80a00:	3b01      	subs	r3, #1
   80a02:	6093      	str	r3, [r2, #8]
   80a04:	2b00      	cmp	r3, #0
   80a06:	da16      	bge.n	80a36 <UnityPrintMask+0x5e>
   80a08:	6882      	ldr	r2, [r0, #8]
   80a0a:	6891      	ldr	r1, [r2, #8]
   80a0c:	6993      	ldr	r3, [r2, #24]
   80a0e:	4299      	cmp	r1, r3
   80a10:	db0e      	blt.n	80a30 <UnityPrintMask+0x58>
   80a12:	6813      	ldr	r3, [r2, #0]
   80a14:	2231      	movs	r2, #49	; 0x31
   80a16:	701a      	strb	r2, [r3, #0]
   80a18:	6830      	ldr	r0, [r6, #0]
   80a1a:	6882      	ldr	r2, [r0, #8]
   80a1c:	6813      	ldr	r3, [r2, #0]
   80a1e:	7819      	ldrb	r1, [r3, #0]
   80a20:	290a      	cmp	r1, #10
   80a22:	d002      	beq.n	80a2a <UnityPrintMask+0x52>
   80a24:	3301      	adds	r3, #1
   80a26:	6013      	str	r3, [r2, #0]
   80a28:	e05e      	b.n	80ae8 <UnityPrintMask+0x110>
   80a2a:	210a      	movs	r1, #10
   80a2c:	47d0      	blx	sl
   80a2e:	e05b      	b.n	80ae8 <UnityPrintMask+0x110>
   80a30:	2131      	movs	r1, #49	; 0x31
   80a32:	47d0      	blx	sl
   80a34:	e058      	b.n	80ae8 <UnityPrintMask+0x110>
   80a36:	6883      	ldr	r3, [r0, #8]
   80a38:	681b      	ldr	r3, [r3, #0]
   80a3a:	2231      	movs	r2, #49	; 0x31
   80a3c:	701a      	strb	r2, [r3, #0]
   80a3e:	6833      	ldr	r3, [r6, #0]
   80a40:	689b      	ldr	r3, [r3, #8]
   80a42:	681a      	ldr	r2, [r3, #0]
   80a44:	3201      	adds	r2, #1
   80a46:	601a      	str	r2, [r3, #0]
   80a48:	e04e      	b.n	80ae8 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   80a4a:	6830      	ldr	r0, [r6, #0]
   80a4c:	6882      	ldr	r2, [r0, #8]
   80a4e:	6893      	ldr	r3, [r2, #8]
   80a50:	3b01      	subs	r3, #1
   80a52:	6093      	str	r3, [r2, #8]
   80a54:	2b00      	cmp	r3, #0
   80a56:	da16      	bge.n	80a86 <UnityPrintMask+0xae>
   80a58:	6882      	ldr	r2, [r0, #8]
   80a5a:	6891      	ldr	r1, [r2, #8]
   80a5c:	6993      	ldr	r3, [r2, #24]
   80a5e:	4299      	cmp	r1, r3
   80a60:	db0e      	blt.n	80a80 <UnityPrintMask+0xa8>
   80a62:	6813      	ldr	r3, [r2, #0]
   80a64:	2230      	movs	r2, #48	; 0x30
   80a66:	701a      	strb	r2, [r3, #0]
   80a68:	6830      	ldr	r0, [r6, #0]
   80a6a:	6882      	ldr	r2, [r0, #8]
   80a6c:	6813      	ldr	r3, [r2, #0]
   80a6e:	7819      	ldrb	r1, [r3, #0]
   80a70:	290a      	cmp	r1, #10
   80a72:	d002      	beq.n	80a7a <UnityPrintMask+0xa2>
   80a74:	3301      	adds	r3, #1
   80a76:	6013      	str	r3, [r2, #0]
   80a78:	e036      	b.n	80ae8 <UnityPrintMask+0x110>
   80a7a:	210a      	movs	r1, #10
   80a7c:	47d0      	blx	sl
   80a7e:	e033      	b.n	80ae8 <UnityPrintMask+0x110>
   80a80:	2130      	movs	r1, #48	; 0x30
   80a82:	47d0      	blx	sl
   80a84:	e030      	b.n	80ae8 <UnityPrintMask+0x110>
   80a86:	6883      	ldr	r3, [r0, #8]
   80a88:	681b      	ldr	r3, [r3, #0]
   80a8a:	2230      	movs	r2, #48	; 0x30
   80a8c:	701a      	strb	r2, [r3, #0]
   80a8e:	6833      	ldr	r3, [r6, #0]
   80a90:	689b      	ldr	r3, [r3, #8]
   80a92:	681a      	ldr	r2, [r3, #0]
   80a94:	3201      	adds	r2, #1
   80a96:	601a      	str	r2, [r3, #0]
   80a98:	e026      	b.n	80ae8 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   80a9a:	6830      	ldr	r0, [r6, #0]
   80a9c:	6882      	ldr	r2, [r0, #8]
   80a9e:	6893      	ldr	r3, [r2, #8]
   80aa0:	3b01      	subs	r3, #1
   80aa2:	6093      	str	r3, [r2, #8]
   80aa4:	2b00      	cmp	r3, #0
   80aa6:	da16      	bge.n	80ad6 <UnityPrintMask+0xfe>
   80aa8:	6882      	ldr	r2, [r0, #8]
   80aaa:	6891      	ldr	r1, [r2, #8]
   80aac:	6993      	ldr	r3, [r2, #24]
   80aae:	4299      	cmp	r1, r3
   80ab0:	db0e      	blt.n	80ad0 <UnityPrintMask+0xf8>
   80ab2:	6813      	ldr	r3, [r2, #0]
   80ab4:	f883 9000 	strb.w	r9, [r3]
   80ab8:	6830      	ldr	r0, [r6, #0]
   80aba:	6882      	ldr	r2, [r0, #8]
   80abc:	6813      	ldr	r3, [r2, #0]
   80abe:	7819      	ldrb	r1, [r3, #0]
   80ac0:	290a      	cmp	r1, #10
   80ac2:	d002      	beq.n	80aca <UnityPrintMask+0xf2>
   80ac4:	3301      	adds	r3, #1
   80ac6:	6013      	str	r3, [r2, #0]
   80ac8:	e00e      	b.n	80ae8 <UnityPrintMask+0x110>
   80aca:	210a      	movs	r1, #10
   80acc:	47d0      	blx	sl
   80ace:	e00b      	b.n	80ae8 <UnityPrintMask+0x110>
   80ad0:	4649      	mov	r1, r9
   80ad2:	47d0      	blx	sl
   80ad4:	e008      	b.n	80ae8 <UnityPrintMask+0x110>
   80ad6:	6883      	ldr	r3, [r0, #8]
   80ad8:	681b      	ldr	r3, [r3, #0]
   80ada:	f883 9000 	strb.w	r9, [r3]
   80ade:	6833      	ldr	r3, [r6, #0]
   80ae0:	689b      	ldr	r3, [r3, #8]
   80ae2:	681a      	ldr	r2, [r3, #0]
   80ae4:	3201      	adds	r2, #1
   80ae6:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   80ae8:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   80aea:	3d01      	subs	r5, #1
   80aec:	d180      	bne.n	809f0 <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   80aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80af2:	bf00      	nop
   80af4:	20070560 	.word	0x20070560
   80af8:	00082bed 	.word	0x00082bed

00080afc <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80afc:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80afe:	4802      	ldr	r0, [pc, #8]	; (80b08 <UnityPrintFail+0xc>)
   80b00:	4b02      	ldr	r3, [pc, #8]	; (80b0c <UnityPrintFail+0x10>)
   80b02:	4798      	blx	r3
   80b04:	bd08      	pop	{r3, pc}
   80b06:	bf00      	nop
   80b08:	00084c44 	.word	0x00084c44
   80b0c:	000805d9 	.word	0x000805d9

00080b10 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80b10:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80b12:	4802      	ldr	r0, [pc, #8]	; (80b1c <UnityPrintOk+0xc>)
   80b14:	4b02      	ldr	r3, [pc, #8]	; (80b20 <UnityPrintOk+0x10>)
   80b16:	4798      	blx	r3
   80b18:	bd08      	pop	{r3, pc}
   80b1a:	bf00      	nop
   80b1c:	00084c34 	.word	0x00084c34
   80b20:	000805d9 	.word	0x000805d9

00080b24 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80b24:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80b26:	4b24      	ldr	r3, [pc, #144]	; (80bb8 <UnityConcludeTest+0x94>)
   80b28:	69db      	ldr	r3, [r3, #28]
   80b2a:	b123      	cbz	r3, 80b36 <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80b2c:	4b22      	ldr	r3, [pc, #136]	; (80bb8 <UnityConcludeTest+0x94>)
   80b2e:	695a      	ldr	r2, [r3, #20]
   80b30:	3201      	adds	r2, #1
   80b32:	615a      	str	r2, [r3, #20]
   80b34:	e00f      	b.n	80b56 <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80b36:	4b20      	ldr	r3, [pc, #128]	; (80bb8 <UnityConcludeTest+0x94>)
   80b38:	699b      	ldr	r3, [r3, #24]
   80b3a:	b943      	cbnz	r3, 80b4e <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80b3c:	4b1e      	ldr	r3, [pc, #120]	; (80bb8 <UnityConcludeTest+0x94>)
   80b3e:	6818      	ldr	r0, [r3, #0]
   80b40:	6899      	ldr	r1, [r3, #8]
   80b42:	4b1e      	ldr	r3, [pc, #120]	; (80bbc <UnityConcludeTest+0x98>)
   80b44:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80b46:	481e      	ldr	r0, [pc, #120]	; (80bc0 <UnityConcludeTest+0x9c>)
   80b48:	4b1e      	ldr	r3, [pc, #120]	; (80bc4 <UnityConcludeTest+0xa0>)
   80b4a:	4798      	blx	r3
   80b4c:	e003      	b.n	80b56 <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   80b4e:	4b1a      	ldr	r3, [pc, #104]	; (80bb8 <UnityConcludeTest+0x94>)
   80b50:	691a      	ldr	r2, [r3, #16]
   80b52:	3201      	adds	r2, #1
   80b54:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   80b56:	4b18      	ldr	r3, [pc, #96]	; (80bb8 <UnityConcludeTest+0x94>)
   80b58:	2200      	movs	r2, #0
   80b5a:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80b5c:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   80b5e:	4b1a      	ldr	r3, [pc, #104]	; (80bc8 <UnityConcludeTest+0xa4>)
   80b60:	6818      	ldr	r0, [r3, #0]
   80b62:	6882      	ldr	r2, [r0, #8]
   80b64:	6893      	ldr	r3, [r2, #8]
   80b66:	3b01      	subs	r3, #1
   80b68:	6093      	str	r3, [r2, #8]
   80b6a:	2b00      	cmp	r3, #0
   80b6c:	da19      	bge.n	80ba2 <UnityConcludeTest+0x7e>
   80b6e:	6882      	ldr	r2, [r0, #8]
   80b70:	6891      	ldr	r1, [r2, #8]
   80b72:	6993      	ldr	r3, [r2, #24]
   80b74:	4299      	cmp	r1, r3
   80b76:	db10      	blt.n	80b9a <UnityConcludeTest+0x76>
   80b78:	6813      	ldr	r3, [r2, #0]
   80b7a:	220a      	movs	r2, #10
   80b7c:	701a      	strb	r2, [r3, #0]
   80b7e:	4b12      	ldr	r3, [pc, #72]	; (80bc8 <UnityConcludeTest+0xa4>)
   80b80:	6818      	ldr	r0, [r3, #0]
   80b82:	6882      	ldr	r2, [r0, #8]
   80b84:	6813      	ldr	r3, [r2, #0]
   80b86:	7819      	ldrb	r1, [r3, #0]
   80b88:	290a      	cmp	r1, #10
   80b8a:	d002      	beq.n	80b92 <UnityConcludeTest+0x6e>
   80b8c:	3301      	adds	r3, #1
   80b8e:	6013      	str	r3, [r2, #0]
   80b90:	bd08      	pop	{r3, pc}
   80b92:	210a      	movs	r1, #10
   80b94:	4b0d      	ldr	r3, [pc, #52]	; (80bcc <UnityConcludeTest+0xa8>)
   80b96:	4798      	blx	r3
   80b98:	bd08      	pop	{r3, pc}
   80b9a:	210a      	movs	r1, #10
   80b9c:	4b0b      	ldr	r3, [pc, #44]	; (80bcc <UnityConcludeTest+0xa8>)
   80b9e:	4798      	blx	r3
   80ba0:	bd08      	pop	{r3, pc}
   80ba2:	6883      	ldr	r3, [r0, #8]
   80ba4:	681b      	ldr	r3, [r3, #0]
   80ba6:	220a      	movs	r2, #10
   80ba8:	701a      	strb	r2, [r3, #0]
   80baa:	4b07      	ldr	r3, [pc, #28]	; (80bc8 <UnityConcludeTest+0xa4>)
   80bac:	681b      	ldr	r3, [r3, #0]
   80bae:	689b      	ldr	r3, [r3, #8]
   80bb0:	681a      	ldr	r2, [r3, #0]
   80bb2:	3201      	adds	r2, #1
   80bb4:	601a      	str	r2, [r3, #0]
   80bb6:	bd08      	pop	{r3, pc}
   80bb8:	20070b04 	.word	0x20070b04
   80bbc:	00080805 	.word	0x00080805
   80bc0:	00084c90 	.word	0x00084c90
   80bc4:	000805d9 	.word	0x000805d9
   80bc8:	20070560 	.word	0x20070560
   80bcc:	00082bed 	.word	0x00082bed

00080bd0 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   80bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80bd4:	4605      	mov	r5, r0
   80bd6:	460f      	mov	r7, r1
   80bd8:	4616      	mov	r6, r2
   80bda:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   80bdc:	4c12      	ldr	r4, [pc, #72]	; (80c28 <UnityAssertBits+0x58>)
   80bde:	69a4      	ldr	r4, [r4, #24]
   80be0:	b9fc      	cbnz	r4, 80c22 <UnityAssertBits+0x52>
   80be2:	4a11      	ldr	r2, [pc, #68]	; (80c28 <UnityAssertBits+0x58>)
   80be4:	69d2      	ldr	r2, [r2, #28]
   80be6:	b9e2      	cbnz	r2, 80c22 <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   80be8:	ea81 0306 	eor.w	r3, r1, r6
   80bec:	4203      	tst	r3, r0
   80bee:	d018      	beq.n	80c22 <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   80bf0:	9808      	ldr	r0, [sp, #32]
   80bf2:	4b0e      	ldr	r3, [pc, #56]	; (80c2c <UnityAssertBits+0x5c>)
   80bf4:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   80bf6:	480e      	ldr	r0, [pc, #56]	; (80c30 <UnityAssertBits+0x60>)
   80bf8:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80c44 <UnityAssertBits+0x74>
   80bfc:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   80bfe:	4628      	mov	r0, r5
   80c00:	4639      	mov	r1, r7
   80c02:	4c0c      	ldr	r4, [pc, #48]	; (80c34 <UnityAssertBits+0x64>)
   80c04:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   80c06:	480c      	ldr	r0, [pc, #48]	; (80c38 <UnityAssertBits+0x68>)
   80c08:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   80c0a:	4628      	mov	r0, r5
   80c0c:	4631      	mov	r1, r6
   80c0e:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   80c10:	4640      	mov	r0, r8
   80c12:	4b0a      	ldr	r3, [pc, #40]	; (80c3c <UnityAssertBits+0x6c>)
   80c14:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   80c16:	4804      	ldr	r0, [pc, #16]	; (80c28 <UnityAssertBits+0x58>)
   80c18:	2101      	movs	r1, #1
   80c1a:	6181      	str	r1, [r0, #24]
   80c1c:	3020      	adds	r0, #32
   80c1e:	4b08      	ldr	r3, [pc, #32]	; (80c40 <UnityAssertBits+0x70>)
   80c20:	4798      	blx	r3
   80c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80c26:	bf00      	nop
   80c28:	20070b04 	.word	0x20070b04
   80c2c:	00080939 	.word	0x00080939
   80c30:	00084c4c 	.word	0x00084c4c
   80c34:	000809d9 	.word	0x000809d9
   80c38:	00084c3c 	.word	0x00084c3c
   80c3c:	000809bd 	.word	0x000809bd
   80c40:	00081d95 	.word	0x00081d95
   80c44:	000805d9 	.word	0x000805d9

00080c48 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   80c48:	b500      	push	{lr}
   80c4a:	b083      	sub	sp, #12
   80c4c:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   80c4e:	480e      	ldr	r0, [pc, #56]	; (80c88 <UnityDefaultTestRun+0x40>)
   80c50:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   80c52:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   80c54:	68c3      	ldr	r3, [r0, #12]
   80c56:	3301      	adds	r3, #1
   80c58:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   80c5a:	3020      	adds	r0, #32
   80c5c:	4b0b      	ldr	r3, [pc, #44]	; (80c8c <UnityDefaultTestRun+0x44>)
   80c5e:	4798      	blx	r3
   80c60:	b918      	cbnz	r0, 80c6a <UnityDefaultTestRun+0x22>
    {
        setUp();
   80c62:	4b0b      	ldr	r3, [pc, #44]	; (80c90 <UnityDefaultTestRun+0x48>)
   80c64:	4798      	blx	r3
        Func();
   80c66:	9b01      	ldr	r3, [sp, #4]
   80c68:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   80c6a:	480a      	ldr	r0, [pc, #40]	; (80c94 <UnityDefaultTestRun+0x4c>)
   80c6c:	4b07      	ldr	r3, [pc, #28]	; (80c8c <UnityDefaultTestRun+0x44>)
   80c6e:	4798      	blx	r3
   80c70:	b920      	cbnz	r0, 80c7c <UnityDefaultTestRun+0x34>
   80c72:	4b05      	ldr	r3, [pc, #20]	; (80c88 <UnityDefaultTestRun+0x40>)
   80c74:	69db      	ldr	r3, [r3, #28]
   80c76:	b90b      	cbnz	r3, 80c7c <UnityDefaultTestRun+0x34>
    {
        tearDown();
   80c78:	4b07      	ldr	r3, [pc, #28]	; (80c98 <UnityDefaultTestRun+0x50>)
   80c7a:	4798      	blx	r3
    }
    UnityConcludeTest();
   80c7c:	4b07      	ldr	r3, [pc, #28]	; (80c9c <UnityDefaultTestRun+0x54>)
   80c7e:	4798      	blx	r3
}
   80c80:	b003      	add	sp, #12
   80c82:	f85d fb04 	ldr.w	pc, [sp], #4
   80c86:	bf00      	nop
   80c88:	20070b04 	.word	0x20070b04
   80c8c:	00081d89 	.word	0x00081d89
   80c90:	00080ff9 	.word	0x00080ff9
   80c94:	20070b24 	.word	0x20070b24
   80c98:	00081009 	.word	0x00081009
   80c9c:	00080b25 	.word	0x00080b25

00080ca0 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   80ca0:	4b05      	ldr	r3, [pc, #20]	; (80cb8 <UnityBegin+0x18>)
   80ca2:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   80ca4:	2200      	movs	r2, #0
   80ca6:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   80ca8:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   80caa:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   80cac:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   80cae:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   80cb0:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   80cb2:	61da      	str	r2, [r3, #28]
   80cb4:	4770      	bx	lr
   80cb6:	bf00      	nop
   80cb8:	20070b04 	.word	0x20070b04

00080cbc <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   80cbc:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   80cbe:	4b66      	ldr	r3, [pc, #408]	; (80e58 <UnityEnd+0x19c>)
   80cc0:	6818      	ldr	r0, [r3, #0]
   80cc2:	6882      	ldr	r2, [r0, #8]
   80cc4:	6893      	ldr	r3, [r2, #8]
   80cc6:	3b01      	subs	r3, #1
   80cc8:	6093      	str	r3, [r2, #8]
   80cca:	2b00      	cmp	r3, #0
   80ccc:	da19      	bge.n	80d02 <UnityEnd+0x46>
   80cce:	6882      	ldr	r2, [r0, #8]
   80cd0:	6891      	ldr	r1, [r2, #8]
   80cd2:	6993      	ldr	r3, [r2, #24]
   80cd4:	4299      	cmp	r1, r3
   80cd6:	db10      	blt.n	80cfa <UnityEnd+0x3e>
   80cd8:	6813      	ldr	r3, [r2, #0]
   80cda:	220a      	movs	r2, #10
   80cdc:	701a      	strb	r2, [r3, #0]
   80cde:	4b5e      	ldr	r3, [pc, #376]	; (80e58 <UnityEnd+0x19c>)
   80ce0:	6818      	ldr	r0, [r3, #0]
   80ce2:	6882      	ldr	r2, [r0, #8]
   80ce4:	6813      	ldr	r3, [r2, #0]
   80ce6:	7819      	ldrb	r1, [r3, #0]
   80ce8:	290a      	cmp	r1, #10
   80cea:	d002      	beq.n	80cf2 <UnityEnd+0x36>
   80cec:	3301      	adds	r3, #1
   80cee:	6013      	str	r3, [r2, #0]
   80cf0:	e011      	b.n	80d16 <UnityEnd+0x5a>
   80cf2:	210a      	movs	r1, #10
   80cf4:	4b59      	ldr	r3, [pc, #356]	; (80e5c <UnityEnd+0x1a0>)
   80cf6:	4798      	blx	r3
   80cf8:	e00d      	b.n	80d16 <UnityEnd+0x5a>
   80cfa:	210a      	movs	r1, #10
   80cfc:	4b57      	ldr	r3, [pc, #348]	; (80e5c <UnityEnd+0x1a0>)
   80cfe:	4798      	blx	r3
   80d00:	e009      	b.n	80d16 <UnityEnd+0x5a>
   80d02:	6883      	ldr	r3, [r0, #8]
   80d04:	681b      	ldr	r3, [r3, #0]
   80d06:	220a      	movs	r2, #10
   80d08:	701a      	strb	r2, [r3, #0]
   80d0a:	4b53      	ldr	r3, [pc, #332]	; (80e58 <UnityEnd+0x19c>)
   80d0c:	681b      	ldr	r3, [r3, #0]
   80d0e:	689b      	ldr	r3, [r3, #8]
   80d10:	681a      	ldr	r2, [r3, #0]
   80d12:	3201      	adds	r2, #1
   80d14:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   80d16:	4852      	ldr	r0, [pc, #328]	; (80e60 <UnityEnd+0x1a4>)
   80d18:	4b52      	ldr	r3, [pc, #328]	; (80e64 <UnityEnd+0x1a8>)
   80d1a:	4798      	blx	r3
    UNITY_PRINT_EOL;
   80d1c:	4b4e      	ldr	r3, [pc, #312]	; (80e58 <UnityEnd+0x19c>)
   80d1e:	6818      	ldr	r0, [r3, #0]
   80d20:	6882      	ldr	r2, [r0, #8]
   80d22:	6893      	ldr	r3, [r2, #8]
   80d24:	3b01      	subs	r3, #1
   80d26:	6093      	str	r3, [r2, #8]
   80d28:	2b00      	cmp	r3, #0
   80d2a:	da19      	bge.n	80d60 <UnityEnd+0xa4>
   80d2c:	6882      	ldr	r2, [r0, #8]
   80d2e:	6891      	ldr	r1, [r2, #8]
   80d30:	6993      	ldr	r3, [r2, #24]
   80d32:	4299      	cmp	r1, r3
   80d34:	db10      	blt.n	80d58 <UnityEnd+0x9c>
   80d36:	6813      	ldr	r3, [r2, #0]
   80d38:	220a      	movs	r2, #10
   80d3a:	701a      	strb	r2, [r3, #0]
   80d3c:	4b46      	ldr	r3, [pc, #280]	; (80e58 <UnityEnd+0x19c>)
   80d3e:	6818      	ldr	r0, [r3, #0]
   80d40:	6882      	ldr	r2, [r0, #8]
   80d42:	6813      	ldr	r3, [r2, #0]
   80d44:	7819      	ldrb	r1, [r3, #0]
   80d46:	290a      	cmp	r1, #10
   80d48:	d002      	beq.n	80d50 <UnityEnd+0x94>
   80d4a:	3301      	adds	r3, #1
   80d4c:	6013      	str	r3, [r2, #0]
   80d4e:	e011      	b.n	80d74 <UnityEnd+0xb8>
   80d50:	210a      	movs	r1, #10
   80d52:	4b42      	ldr	r3, [pc, #264]	; (80e5c <UnityEnd+0x1a0>)
   80d54:	4798      	blx	r3
   80d56:	e00d      	b.n	80d74 <UnityEnd+0xb8>
   80d58:	210a      	movs	r1, #10
   80d5a:	4b40      	ldr	r3, [pc, #256]	; (80e5c <UnityEnd+0x1a0>)
   80d5c:	4798      	blx	r3
   80d5e:	e009      	b.n	80d74 <UnityEnd+0xb8>
   80d60:	6883      	ldr	r3, [r0, #8]
   80d62:	681b      	ldr	r3, [r3, #0]
   80d64:	220a      	movs	r2, #10
   80d66:	701a      	strb	r2, [r3, #0]
   80d68:	4b3b      	ldr	r3, [pc, #236]	; (80e58 <UnityEnd+0x19c>)
   80d6a:	681b      	ldr	r3, [r3, #0]
   80d6c:	689b      	ldr	r3, [r3, #8]
   80d6e:	681a      	ldr	r2, [r3, #0]
   80d70:	3201      	adds	r2, #1
   80d72:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   80d74:	4e3c      	ldr	r6, [pc, #240]	; (80e68 <UnityEnd+0x1ac>)
   80d76:	68f0      	ldr	r0, [r6, #12]
   80d78:	4d3c      	ldr	r5, [pc, #240]	; (80e6c <UnityEnd+0x1b0>)
   80d7a:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   80d7c:	483c      	ldr	r0, [pc, #240]	; (80e70 <UnityEnd+0x1b4>)
   80d7e:	4c39      	ldr	r4, [pc, #228]	; (80e64 <UnityEnd+0x1a8>)
   80d80:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   80d82:	6930      	ldr	r0, [r6, #16]
   80d84:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   80d86:	483b      	ldr	r0, [pc, #236]	; (80e74 <UnityEnd+0x1b8>)
   80d88:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   80d8a:	6970      	ldr	r0, [r6, #20]
   80d8c:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   80d8e:	483a      	ldr	r0, [pc, #232]	; (80e78 <UnityEnd+0x1bc>)
   80d90:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   80d92:	4b31      	ldr	r3, [pc, #196]	; (80e58 <UnityEnd+0x19c>)
   80d94:	6818      	ldr	r0, [r3, #0]
   80d96:	6882      	ldr	r2, [r0, #8]
   80d98:	6893      	ldr	r3, [r2, #8]
   80d9a:	3b01      	subs	r3, #1
   80d9c:	6093      	str	r3, [r2, #8]
   80d9e:	2b00      	cmp	r3, #0
   80da0:	da19      	bge.n	80dd6 <UnityEnd+0x11a>
   80da2:	6882      	ldr	r2, [r0, #8]
   80da4:	6891      	ldr	r1, [r2, #8]
   80da6:	6993      	ldr	r3, [r2, #24]
   80da8:	4299      	cmp	r1, r3
   80daa:	db10      	blt.n	80dce <UnityEnd+0x112>
   80dac:	6813      	ldr	r3, [r2, #0]
   80dae:	220a      	movs	r2, #10
   80db0:	701a      	strb	r2, [r3, #0]
   80db2:	4b29      	ldr	r3, [pc, #164]	; (80e58 <UnityEnd+0x19c>)
   80db4:	6818      	ldr	r0, [r3, #0]
   80db6:	6882      	ldr	r2, [r0, #8]
   80db8:	6813      	ldr	r3, [r2, #0]
   80dba:	7819      	ldrb	r1, [r3, #0]
   80dbc:	290a      	cmp	r1, #10
   80dbe:	d002      	beq.n	80dc6 <UnityEnd+0x10a>
   80dc0:	3301      	adds	r3, #1
   80dc2:	6013      	str	r3, [r2, #0]
   80dc4:	e011      	b.n	80dea <UnityEnd+0x12e>
   80dc6:	210a      	movs	r1, #10
   80dc8:	4b24      	ldr	r3, [pc, #144]	; (80e5c <UnityEnd+0x1a0>)
   80dca:	4798      	blx	r3
   80dcc:	e00d      	b.n	80dea <UnityEnd+0x12e>
   80dce:	210a      	movs	r1, #10
   80dd0:	4b22      	ldr	r3, [pc, #136]	; (80e5c <UnityEnd+0x1a0>)
   80dd2:	4798      	blx	r3
   80dd4:	e009      	b.n	80dea <UnityEnd+0x12e>
   80dd6:	6883      	ldr	r3, [r0, #8]
   80dd8:	681b      	ldr	r3, [r3, #0]
   80dda:	220a      	movs	r2, #10
   80ddc:	701a      	strb	r2, [r3, #0]
   80dde:	4b1e      	ldr	r3, [pc, #120]	; (80e58 <UnityEnd+0x19c>)
   80de0:	681b      	ldr	r3, [r3, #0]
   80de2:	689b      	ldr	r3, [r3, #8]
   80de4:	681a      	ldr	r2, [r3, #0]
   80de6:	3201      	adds	r2, #1
   80de8:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   80dea:	4b1f      	ldr	r3, [pc, #124]	; (80e68 <UnityEnd+0x1ac>)
   80dec:	691b      	ldr	r3, [r3, #16]
   80dee:	b913      	cbnz	r3, 80df6 <UnityEnd+0x13a>
    {
        UnityPrintOk();
   80df0:	4b22      	ldr	r3, [pc, #136]	; (80e7c <UnityEnd+0x1c0>)
   80df2:	4798      	blx	r3
   80df4:	e001      	b.n	80dfa <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   80df6:	4b22      	ldr	r3, [pc, #136]	; (80e80 <UnityEnd+0x1c4>)
   80df8:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   80dfa:	4b17      	ldr	r3, [pc, #92]	; (80e58 <UnityEnd+0x19c>)
   80dfc:	6818      	ldr	r0, [r3, #0]
   80dfe:	6882      	ldr	r2, [r0, #8]
   80e00:	6893      	ldr	r3, [r2, #8]
   80e02:	3b01      	subs	r3, #1
   80e04:	6093      	str	r3, [r2, #8]
   80e06:	2b00      	cmp	r3, #0
   80e08:	da19      	bge.n	80e3e <UnityEnd+0x182>
   80e0a:	6882      	ldr	r2, [r0, #8]
   80e0c:	6891      	ldr	r1, [r2, #8]
   80e0e:	6993      	ldr	r3, [r2, #24]
   80e10:	4299      	cmp	r1, r3
   80e12:	db10      	blt.n	80e36 <UnityEnd+0x17a>
   80e14:	6813      	ldr	r3, [r2, #0]
   80e16:	220a      	movs	r2, #10
   80e18:	701a      	strb	r2, [r3, #0]
   80e1a:	4b0f      	ldr	r3, [pc, #60]	; (80e58 <UnityEnd+0x19c>)
   80e1c:	6818      	ldr	r0, [r3, #0]
   80e1e:	6882      	ldr	r2, [r0, #8]
   80e20:	6813      	ldr	r3, [r2, #0]
   80e22:	7819      	ldrb	r1, [r3, #0]
   80e24:	290a      	cmp	r1, #10
   80e26:	d002      	beq.n	80e2e <UnityEnd+0x172>
   80e28:	3301      	adds	r3, #1
   80e2a:	6013      	str	r3, [r2, #0]
   80e2c:	e011      	b.n	80e52 <UnityEnd+0x196>
   80e2e:	210a      	movs	r1, #10
   80e30:	4b0a      	ldr	r3, [pc, #40]	; (80e5c <UnityEnd+0x1a0>)
   80e32:	4798      	blx	r3
   80e34:	e00d      	b.n	80e52 <UnityEnd+0x196>
   80e36:	210a      	movs	r1, #10
   80e38:	4b08      	ldr	r3, [pc, #32]	; (80e5c <UnityEnd+0x1a0>)
   80e3a:	4798      	blx	r3
   80e3c:	e009      	b.n	80e52 <UnityEnd+0x196>
   80e3e:	6883      	ldr	r3, [r0, #8]
   80e40:	681b      	ldr	r3, [r3, #0]
   80e42:	220a      	movs	r2, #10
   80e44:	701a      	strb	r2, [r3, #0]
   80e46:	4b04      	ldr	r3, [pc, #16]	; (80e58 <UnityEnd+0x19c>)
   80e48:	681b      	ldr	r3, [r3, #0]
   80e4a:	689b      	ldr	r3, [r3, #8]
   80e4c:	681a      	ldr	r2, [r3, #0]
   80e4e:	3201      	adds	r2, #1
   80e50:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   80e52:	4b05      	ldr	r3, [pc, #20]	; (80e68 <UnityEnd+0x1ac>)
   80e54:	6918      	ldr	r0, [r3, #16]
   80e56:	bd70      	pop	{r4, r5, r6, pc}
   80e58:	20070560 	.word	0x20070560
   80e5c:	00082bed 	.word	0x00082bed
   80e60:	00084c58 	.word	0x00084c58
   80e64:	000805d9 	.word	0x000805d9
   80e68:	20070b04 	.word	0x20070b04
   80e6c:	000802b1 	.word	0x000802b1
   80e70:	00084c88 	.word	0x00084c88
   80e74:	00084c70 	.word	0x00084c70
   80e78:	00084c7c 	.word	0x00084c7c
   80e7c:	00080b11 	.word	0x00080b11
   80e80:	00080afd 	.word	0x00080afd

00080e84 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e88:	460e      	mov	r6, r1
   80e8a:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80e8c:	3801      	subs	r0, #1
   80e8e:	2802      	cmp	r0, #2
   80e90:	d80f      	bhi.n	80eb2 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80e92:	b192      	cbz	r2, 80eba <_write+0x36>
   80e94:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80e96:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80ed4 <_write+0x50>
   80e9a:	4f0d      	ldr	r7, [pc, #52]	; (80ed0 <_write+0x4c>)
   80e9c:	f8d8 0000 	ldr.w	r0, [r8]
   80ea0:	5d31      	ldrb	r1, [r6, r4]
   80ea2:	683b      	ldr	r3, [r7, #0]
   80ea4:	4798      	blx	r3
   80ea6:	2800      	cmp	r0, #0
   80ea8:	db0a      	blt.n	80ec0 <_write+0x3c>
			return -1;
		}
		++nChars;
   80eaa:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80eac:	42a5      	cmp	r5, r4
   80eae:	d1f5      	bne.n	80e9c <_write+0x18>
   80eb0:	e00a      	b.n	80ec8 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80eb2:	f04f 30ff 	mov.w	r0, #4294967295
   80eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80eba:	2000      	movs	r0, #0
   80ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80ec0:	f04f 30ff 	mov.w	r0, #4294967295
   80ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80ec8:	4620      	mov	r0, r4
	}
	return nChars;
}
   80eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ece:	bf00      	nop
   80ed0:	20070b80 	.word	0x20070b80
   80ed4:	20070b84 	.word	0x20070b84

00080ed8 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80edc:	b083      	sub	sp, #12
   80ede:	4605      	mov	r5, r0
	while (len) {
   80ee0:	4690      	mov	r8, r2
   80ee2:	2a00      	cmp	r2, #0
   80ee4:	d047      	beq.n	80f76 <usart_serial_read_packet+0x9e>
   80ee6:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ee8:	4f25      	ldr	r7, [pc, #148]	; (80f80 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80eea:	4c26      	ldr	r4, [pc, #152]	; (80f84 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80eec:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80f98 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80ef0:	f8df b094 	ldr.w	fp, [pc, #148]	; 80f88 <usart_serial_read_packet+0xb0>
   80ef4:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80ef8:	2300      	movs	r3, #0
   80efa:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80efc:	4b22      	ldr	r3, [pc, #136]	; (80f88 <usart_serial_read_packet+0xb0>)
   80efe:	429d      	cmp	r5, r3
   80f00:	d106      	bne.n	80f10 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80f02:	4658      	mov	r0, fp
   80f04:	4649      	mov	r1, r9
   80f06:	4b21      	ldr	r3, [pc, #132]	; (80f8c <usart_serial_read_packet+0xb4>)
   80f08:	4798      	blx	r3
   80f0a:	2800      	cmp	r0, #0
   80f0c:	d1f9      	bne.n	80f02 <usart_serial_read_packet+0x2a>
   80f0e:	e019      	b.n	80f44 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80f10:	4b1f      	ldr	r3, [pc, #124]	; (80f90 <usart_serial_read_packet+0xb8>)
   80f12:	429d      	cmp	r5, r3
   80f14:	d109      	bne.n	80f2a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80f16:	4699      	mov	r9, r3
   80f18:	4648      	mov	r0, r9
   80f1a:	a901      	add	r1, sp, #4
   80f1c:	47a0      	blx	r4
   80f1e:	2800      	cmp	r0, #0
   80f20:	d1fa      	bne.n	80f18 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80f22:	9b01      	ldr	r3, [sp, #4]
   80f24:	f806 3c01 	strb.w	r3, [r6, #-1]
   80f28:	e017      	b.n	80f5a <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80f2a:	4b1a      	ldr	r3, [pc, #104]	; (80f94 <usart_serial_read_packet+0xbc>)
   80f2c:	429d      	cmp	r5, r3
   80f2e:	d109      	bne.n	80f44 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80f30:	4699      	mov	r9, r3
   80f32:	4648      	mov	r0, r9
   80f34:	a901      	add	r1, sp, #4
   80f36:	47a0      	blx	r4
   80f38:	2800      	cmp	r0, #0
   80f3a:	d1fa      	bne.n	80f32 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80f3c:	9b01      	ldr	r3, [sp, #4]
   80f3e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80f42:	e014      	b.n	80f6e <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80f44:	4555      	cmp	r5, sl
   80f46:	d108      	bne.n	80f5a <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80f48:	4650      	mov	r0, sl
   80f4a:	a901      	add	r1, sp, #4
   80f4c:	47a0      	blx	r4
   80f4e:	2800      	cmp	r0, #0
   80f50:	d1fa      	bne.n	80f48 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80f52:	9b01      	ldr	r3, [sp, #4]
   80f54:	f806 3c01 	strb.w	r3, [r6, #-1]
   80f58:	e009      	b.n	80f6e <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80f5a:	42bd      	cmp	r5, r7
   80f5c:	d107      	bne.n	80f6e <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80f5e:	4638      	mov	r0, r7
   80f60:	a901      	add	r1, sp, #4
   80f62:	47a0      	blx	r4
   80f64:	2800      	cmp	r0, #0
   80f66:	d1fa      	bne.n	80f5e <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80f68:	9b01      	ldr	r3, [sp, #4]
   80f6a:	f806 3c01 	strb.w	r3, [r6, #-1]
   80f6e:	3601      	adds	r6, #1
   80f70:	f1b8 0801 	subs.w	r8, r8, #1
   80f74:	d1be      	bne.n	80ef4 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80f76:	2000      	movs	r0, #0
   80f78:	b003      	add	sp, #12
   80f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f7e:	bf00      	nop
   80f80:	400a4000 	.word	0x400a4000
   80f84:	0008019d 	.word	0x0008019d
   80f88:	400e0800 	.word	0x400e0800
   80f8c:	00080fe5 	.word	0x00080fe5
   80f90:	40098000 	.word	0x40098000
   80f94:	4009c000 	.word	0x4009c000
   80f98:	400a0000 	.word	0x400a0000

00080f9c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80f9c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80f9e:	23ac      	movs	r3, #172	; 0xac
   80fa0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80fa2:	680a      	ldr	r2, [r1, #0]
   80fa4:	684b      	ldr	r3, [r1, #4]
   80fa6:	fbb2 f3f3 	udiv	r3, r2, r3
   80faa:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80fac:	1e5c      	subs	r4, r3, #1
   80fae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80fb2:	4294      	cmp	r4, r2
   80fb4:	d80a      	bhi.n	80fcc <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   80fb6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80fb8:	688b      	ldr	r3, [r1, #8]
   80fba:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80fbc:	f240 2302 	movw	r3, #514	; 0x202
   80fc0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80fc4:	2350      	movs	r3, #80	; 0x50
   80fc6:	6003      	str	r3, [r0, #0]

	return 0;
   80fc8:	2000      	movs	r0, #0
   80fca:	e000      	b.n	80fce <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80fcc:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80fce:	f85d 4b04 	ldr.w	r4, [sp], #4
   80fd2:	4770      	bx	lr

00080fd4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80fd4:	6943      	ldr	r3, [r0, #20]
   80fd6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80fda:	bf1a      	itte	ne
   80fdc:	61c1      	strne	r1, [r0, #28]
	return 0;
   80fde:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80fe0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80fe2:	4770      	bx	lr

00080fe4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80fe4:	6943      	ldr	r3, [r0, #20]
   80fe6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80fea:	bf1d      	ittte	ne
   80fec:	6983      	ldrne	r3, [r0, #24]
   80fee:	700b      	strbne	r3, [r1, #0]
	return 0;
   80ff0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80ff2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80ff4:	4770      	bx	lr
   80ff6:	bf00      	nop

00080ff8 <setUp>:
uint32_t *const p_PIOB_ODSR = (uint32_t *) (PIOB_BASE_ADDRESS+0x0038U);	/* defines the address for status (values) of the output pins of the B register  */
uint32_t *const p_PIOB_OWER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0010U);	/*   */

void setUp(void)
{
	*p_PIOB_PDR = 0xFFFFFFFFU; /* Disable PORT B */
   80ff8:	f04f 32ff 	mov.w	r2, #4294967295
   80ffc:	4b01      	ldr	r3, [pc, #4]	; (81004 <setUp+0xc>)
   80ffe:	601a      	str	r2, [r3, #0]
   81000:	4770      	bx	lr
   81002:	bf00      	nop
   81004:	400e1004 	.word	0x400e1004

00081008 <tearDown>:
}

void tearDown(void)
{
	*p_PIOB_PDR = 0xFFFFFFFF; /* Disable PORT B */
   81008:	f04f 32ff 	mov.w	r2, #4294967295
   8100c:	4b01      	ldr	r3, [pc, #4]	; (81014 <tearDown+0xc>)
   8100e:	601a      	str	r2, [r3, #0]
   81010:	4770      	bx	lr
   81012:	bf00      	nop
   81014:	400e1004 	.word	0x400e1004

00081018 <test_digitalDuePin13InitialiseProperly>:
	tearDown();
	setUp();
}

void test_digitalDuePin13InitialiseProperly(void)
{
   81018:	b510      	push	{r4, lr}
   8101a:	b082      	sub	sp, #8
		/* Initialise pin 13 on the Due as an output */
		pinMode(13, OUTPUT);
   8101c:	200d      	movs	r0, #13
   8101e:	2102      	movs	r1, #2
   81020:	4b0c      	ldr	r3, [pc, #48]	; (81054 <test_digitalDuePin13InitialiseProperly+0x3c>)
   81022:	4798      	blx	r3
		
		/* Check the status bit that PB27 on port B is properly initialised */
		TEST_ASSERT_BIT_HIGH(27, *p_PIOB_OSR);
   81024:	4b0c      	ldr	r3, [pc, #48]	; (81058 <test_digitalDuePin13InitialiseProperly+0x40>)
   81026:	681a      	ldr	r2, [r3, #0]
   81028:	2337      	movs	r3, #55	; 0x37
   8102a:	9300      	str	r3, [sp, #0]
   8102c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81030:	f04f 31ff 	mov.w	r1, #4294967295
   81034:	2300      	movs	r3, #0
   81036:	4c09      	ldr	r4, [pc, #36]	; (8105c <test_digitalDuePin13InitialiseProperly+0x44>)
   81038:	47a0      	blx	r4
		
		/* Check the status bit that PB27 on port B is set */
		TEST_ASSERT_BIT_HIGH(27, *p_PIOB_ODSR);	
   8103a:	4b09      	ldr	r3, [pc, #36]	; (81060 <test_digitalDuePin13InitialiseProperly+0x48>)
   8103c:	681a      	ldr	r2, [r3, #0]
   8103e:	233a      	movs	r3, #58	; 0x3a
   81040:	9300      	str	r3, [sp, #0]
   81042:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81046:	f04f 31ff 	mov.w	r1, #4294967295
   8104a:	2300      	movs	r3, #0
   8104c:	47a0      	blx	r4
}
   8104e:	b002      	add	sp, #8
   81050:	bd10      	pop	{r4, pc}
   81052:	bf00      	nop
   81054:	00080215 	.word	0x00080215
   81058:	400e1018 	.word	0x400e1018
   8105c:	00080bd1 	.word	0x00080bd1
   81060:	400e1038 	.word	0x400e1038

00081064 <test_digitalDuePin13IsSet>:

void test_digitalDuePin13IsSet(void)
{
   81064:	b510      	push	{r4, lr}
   81066:	b082      	sub	sp, #8
	/* Initialise pin 13 on the Due as an output, already proven to work in previous test */
	pinMode(13,OUTPUT);
   81068:	200d      	movs	r0, #13
   8106a:	2102      	movs	r1, #2
   8106c:	4b09      	ldr	r3, [pc, #36]	; (81094 <test_digitalDuePin13IsSet+0x30>)
   8106e:	4798      	blx	r3
	/* set pin 13 on the Due to high, lighting up the amber diode */
	digitalWrite(13,HIGH);
   81070:	200d      	movs	r0, #13
   81072:	2101      	movs	r1, #1
   81074:	4b08      	ldr	r3, [pc, #32]	; (81098 <test_digitalDuePin13IsSet+0x34>)
   81076:	4798      	blx	r3
	/* Check the status bit that PB27 on port B is set */
	TEST_ASSERT_BIT_HIGH(27,*p_PIOB_ODSR);
   81078:	4b08      	ldr	r3, [pc, #32]	; (8109c <test_digitalDuePin13IsSet+0x38>)
   8107a:	681a      	ldr	r2, [r3, #0]
   8107c:	2344      	movs	r3, #68	; 0x44
   8107e:	9300      	str	r3, [sp, #0]
   81080:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81084:	f04f 31ff 	mov.w	r1, #4294967295
   81088:	2300      	movs	r3, #0
   8108a:	4c05      	ldr	r4, [pc, #20]	; (810a0 <test_digitalDuePin13IsSet+0x3c>)
   8108c:	47a0      	blx	r4
	/* Note that you need to understand the board pin mapping on http://www.arduino.cc/en/Hacking/PinMappingSAM3X */
}
   8108e:	b002      	add	sp, #8
   81090:	bd10      	pop	{r4, pc}
   81092:	bf00      	nop
   81094:	00080215 	.word	0x00080215
   81098:	00080251 	.word	0x00080251
   8109c:	400e1038 	.word	0x400e1038
   810a0:	00080bd1 	.word	0x00080bd1

000810a4 <test_digitalDuePin13IsCleared>:

void test_digitalDuePin13IsCleared(void)
{
   810a4:	b510      	push	{r4, lr}
   810a6:	b082      	sub	sp, #8
	/* Initialise pin 13 on the Due as an output, function proven to work in previous test */
	pinMode(13,OUTPUT);
   810a8:	200d      	movs	r0, #13
   810aa:	2102      	movs	r1, #2
   810ac:	4b0a      	ldr	r3, [pc, #40]	; (810d8 <test_digitalDuePin13IsCleared+0x34>)
   810ae:	4798      	blx	r3
	/* set pin 13 on the Due to high, lighting up the amber diode, function proven to work in previous test */
	digitalWrite(13,HIGH);
   810b0:	200d      	movs	r0, #13
   810b2:	2101      	movs	r1, #1
   810b4:	4c09      	ldr	r4, [pc, #36]	; (810dc <test_digitalDuePin13IsCleared+0x38>)
   810b6:	47a0      	blx	r4
	/* set pin 13 on the Due to low, turning off the amber diode */
	digitalWrite(13,LOW);
   810b8:	200d      	movs	r0, #13
   810ba:	2100      	movs	r1, #0
   810bc:	47a0      	blx	r4
	/* Check the status bit that PB27 on port B is cleared */
	TEST_ASSERT_BIT_LOW(27, *p_PIOB_ODSR);
   810be:	4b08      	ldr	r3, [pc, #32]	; (810e0 <test_digitalDuePin13IsCleared+0x3c>)
   810c0:	681a      	ldr	r2, [r3, #0]
   810c2:	2351      	movs	r3, #81	; 0x51
   810c4:	9300      	str	r3, [sp, #0]
   810c6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   810ca:	2100      	movs	r1, #0
   810cc:	460b      	mov	r3, r1
   810ce:	4c05      	ldr	r4, [pc, #20]	; (810e4 <test_digitalDuePin13IsCleared+0x40>)
   810d0:	47a0      	blx	r4
}
   810d2:	b002      	add	sp, #8
   810d4:	bd10      	pop	{r4, pc}
   810d6:	bf00      	nop
   810d8:	00080215 	.word	0x00080215
   810dc:	00080251 	.word	0x00080251
   810e0:	400e1038 	.word	0x400e1038
   810e4:	00080bd1 	.word	0x00080bd1

000810e8 <test_digitalDuePin22InitialiseProperly>:

void test_digitalDuePin22InitialiseProperly(void)
{
   810e8:	b510      	push	{r4, lr}
   810ea:	b082      	sub	sp, #8
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   810ec:	2016      	movs	r0, #22
   810ee:	2102      	movs	r1, #2
   810f0:	4b07      	ldr	r3, [pc, #28]	; (81110 <test_digitalDuePin22InitialiseProperly+0x28>)
   810f2:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(26, *p_PIOB_OSR);	/* Check the status bit that PB26 on port B is properly initialised */
   810f4:	4b07      	ldr	r3, [pc, #28]	; (81114 <test_digitalDuePin22InitialiseProperly+0x2c>)
   810f6:	681a      	ldr	r2, [r3, #0]
   810f8:	2357      	movs	r3, #87	; 0x57
   810fa:	9300      	str	r3, [sp, #0]
   810fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   81100:	f04f 31ff 	mov.w	r1, #4294967295
   81104:	2300      	movs	r3, #0
   81106:	4c04      	ldr	r4, [pc, #16]	; (81118 <test_digitalDuePin22InitialiseProperly+0x30>)
   81108:	47a0      	blx	r4
}
   8110a:	b002      	add	sp, #8
   8110c:	bd10      	pop	{r4, pc}
   8110e:	bf00      	nop
   81110:	00080215 	.word	0x00080215
   81114:	400e1018 	.word	0x400e1018
   81118:	00080bd1 	.word	0x00080bd1

0008111c <test_digitalDuePin22IsSet>:
void test_digitalDuePin22IsSet(void)
{
   8111c:	b510      	push	{r4, lr}
   8111e:	b082      	sub	sp, #8
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output, already proven to work in previous test */
   81120:	2016      	movs	r0, #22
   81122:	2102      	movs	r1, #2
   81124:	4b09      	ldr	r3, [pc, #36]	; (8114c <test_digitalDuePin22IsSet+0x30>)
   81126:	4798      	blx	r3
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high */
   81128:	2016      	movs	r0, #22
   8112a:	2101      	movs	r1, #1
   8112c:	4b08      	ldr	r3, [pc, #32]	; (81150 <test_digitalDuePin22IsSet+0x34>)
   8112e:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is set */
   81130:	4b08      	ldr	r3, [pc, #32]	; (81154 <test_digitalDuePin22IsSet+0x38>)
   81132:	681a      	ldr	r2, [r3, #0]
   81134:	235d      	movs	r3, #93	; 0x5d
   81136:	9300      	str	r3, [sp, #0]
   81138:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   8113c:	f04f 31ff 	mov.w	r1, #4294967295
   81140:	2300      	movs	r3, #0
   81142:	4c05      	ldr	r4, [pc, #20]	; (81158 <test_digitalDuePin22IsSet+0x3c>)
   81144:	47a0      	blx	r4
}
   81146:	b002      	add	sp, #8
   81148:	bd10      	pop	{r4, pc}
   8114a:	bf00      	nop
   8114c:	00080215 	.word	0x00080215
   81150:	00080251 	.word	0x00080251
   81154:	400e1038 	.word	0x400e1038
   81158:	00080bd1 	.word	0x00080bd1

0008115c <test_digitalDuePin22IsCleared>:
void test_digitalDuePin22IsCleared(void)
{
   8115c:	b510      	push	{r4, lr}
   8115e:	b082      	sub	sp, #8
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output, proven to work in previous test */
   81160:	2016      	movs	r0, #22
   81162:	2102      	movs	r1, #2
   81164:	4b0a      	ldr	r3, [pc, #40]	; (81190 <test_digitalDuePin22IsCleared+0x34>)
   81166:	4798      	blx	r3
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high, proven to work in previous test */
   81168:	2016      	movs	r0, #22
   8116a:	2101      	movs	r1, #1
   8116c:	4c09      	ldr	r4, [pc, #36]	; (81194 <test_digitalDuePin22IsCleared+0x38>)
   8116e:	47a0      	blx	r4
	
	digitalWrite(22, LOW);	/* set pin 22 on the Due to low */
   81170:	2016      	movs	r0, #22
   81172:	2100      	movs	r1, #0
   81174:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is cleared */
   81176:	4b08      	ldr	r3, [pc, #32]	; (81198 <test_digitalDuePin22IsCleared+0x3c>)
   81178:	681a      	ldr	r2, [r3, #0]
   8117a:	2365      	movs	r3, #101	; 0x65
   8117c:	9300      	str	r3, [sp, #0]
   8117e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   81182:	2100      	movs	r1, #0
   81184:	460b      	mov	r3, r1
   81186:	4c05      	ldr	r4, [pc, #20]	; (8119c <test_digitalDuePin22IsCleared+0x40>)
   81188:	47a0      	blx	r4
}
   8118a:	b002      	add	sp, #8
   8118c:	bd10      	pop	{r4, pc}
   8118e:	bf00      	nop
   81190:	00080215 	.word	0x00080215
   81194:	00080251 	.word	0x00080251
   81198:	400e1038 	.word	0x400e1038
   8119c:	00080bd1 	.word	0x00080bd1

000811a0 <test_digitalDuePin13And22InitialiseProperly>:

void test_digitalDuePin13And22InitialiseProperly(void)
{
   811a0:	b530      	push	{r4, r5, lr}
   811a2:	b083      	sub	sp, #12
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   811a4:	200d      	movs	r0, #13
   811a6:	2102      	movs	r1, #2
   811a8:	4c0d      	ldr	r4, [pc, #52]	; (811e0 <test_digitalDuePin13And22InitialiseProperly+0x40>)
   811aa:	47a0      	blx	r4
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   811ac:	2016      	movs	r0, #22
   811ae:	2102      	movs	r1, #2
   811b0:	47a0      	blx	r4
	
	TEST_ASSERT_BIT_HIGH_MESSAGE(26, *p_PIOB_OSR, "PB26 is not an output");	/* Check the status bit that PB26 on port B is properly initialised as an output*/
   811b2:	4d0c      	ldr	r5, [pc, #48]	; (811e4 <test_digitalDuePin13And22InitialiseProperly+0x44>)
   811b4:	682a      	ldr	r2, [r5, #0]
   811b6:	236d      	movs	r3, #109	; 0x6d
   811b8:	9300      	str	r3, [sp, #0]
   811ba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   811be:	f04f 31ff 	mov.w	r1, #4294967295
   811c2:	4b09      	ldr	r3, [pc, #36]	; (811e8 <test_digitalDuePin13And22InitialiseProperly+0x48>)
   811c4:	4c09      	ldr	r4, [pc, #36]	; (811ec <test_digitalDuePin13And22InitialiseProperly+0x4c>)
   811c6:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(27, *p_PIOB_OSR, "PB27 is not an output");	/* Check the status bit that PB27 on port B is properly initialised as an output*/
   811c8:	682a      	ldr	r2, [r5, #0]
   811ca:	236e      	movs	r3, #110	; 0x6e
   811cc:	9300      	str	r3, [sp, #0]
   811ce:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   811d2:	f04f 31ff 	mov.w	r1, #4294967295
   811d6:	4b06      	ldr	r3, [pc, #24]	; (811f0 <test_digitalDuePin13And22InitialiseProperly+0x50>)
   811d8:	47a0      	blx	r4
}
   811da:	b003      	add	sp, #12
   811dc:	bd30      	pop	{r4, r5, pc}
   811de:	bf00      	nop
   811e0:	00080215 	.word	0x00080215
   811e4:	400e1018 	.word	0x400e1018
   811e8:	00084c98 	.word	0x00084c98
   811ec:	00080bd1 	.word	0x00080bd1
   811f0:	00084cb0 	.word	0x00084cb0

000811f4 <test_digitalDuePin13And22IsSet>:

void test_digitalDuePin13And22IsSet(void)
{		
   811f4:	b530      	push	{r4, r5, lr}
   811f6:	b083      	sub	sp, #12
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   811f8:	200d      	movs	r0, #13
   811fa:	2102      	movs	r1, #2
   811fc:	4c10      	ldr	r4, [pc, #64]	; (81240 <test_digitalDuePin13And22IsSet+0x4c>)
   811fe:	47a0      	blx	r4
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   81200:	2016      	movs	r0, #22
   81202:	2102      	movs	r1, #2
   81204:	47a0      	blx	r4
		
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high, lighting up the amber diode */
   81206:	200d      	movs	r0, #13
   81208:	2101      	movs	r1, #1
   8120a:	4c0e      	ldr	r4, [pc, #56]	; (81244 <test_digitalDuePin13And22IsSet+0x50>)
   8120c:	47a0      	blx	r4
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high */
   8120e:	2016      	movs	r0, #22
   81210:	2101      	movs	r1, #1
   81212:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(26, *p_PIOB_ODSR, "PB26 is not high");	/* Check the status bit that PB26 on port B is set */
   81214:	4d0c      	ldr	r5, [pc, #48]	; (81248 <test_digitalDuePin13And22IsSet+0x54>)
   81216:	682a      	ldr	r2, [r5, #0]
   81218:	2378      	movs	r3, #120	; 0x78
   8121a:	9300      	str	r3, [sp, #0]
   8121c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   81220:	f04f 31ff 	mov.w	r1, #4294967295
   81224:	4b09      	ldr	r3, [pc, #36]	; (8124c <test_digitalDuePin13And22IsSet+0x58>)
   81226:	4c0a      	ldr	r4, [pc, #40]	; (81250 <test_digitalDuePin13And22IsSet+0x5c>)
   81228:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(27, *p_PIOB_ODSR, "PB27 is not high");	/* Check the status bit that PB27 on port B is set */
   8122a:	682a      	ldr	r2, [r5, #0]
   8122c:	2379      	movs	r3, #121	; 0x79
   8122e:	9300      	str	r3, [sp, #0]
   81230:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81234:	f04f 31ff 	mov.w	r1, #4294967295
   81238:	4b06      	ldr	r3, [pc, #24]	; (81254 <test_digitalDuePin13And22IsSet+0x60>)
   8123a:	47a0      	blx	r4
}
   8123c:	b003      	add	sp, #12
   8123e:	bd30      	pop	{r4, r5, pc}
   81240:	00080215 	.word	0x00080215
   81244:	00080251 	.word	0x00080251
   81248:	400e1038 	.word	0x400e1038
   8124c:	00084cc8 	.word	0x00084cc8
   81250:	00080bd1 	.word	0x00080bd1
   81254:	00084cdc 	.word	0x00084cdc

00081258 <test_digitalDuePin13isClearedAnd22IsSet>:

void test_digitalDuePin13isClearedAnd22IsSet(void)
{
   81258:	b530      	push	{r4, r5, lr}
   8125a:	b083      	sub	sp, #12
	pinMode(13, OUTPUT);	/* Initialise pin 13 on the Due as an output */
   8125c:	200d      	movs	r0, #13
   8125e:	2102      	movs	r1, #2
   81260:	4c13      	ldr	r4, [pc, #76]	; (812b0 <test_digitalDuePin13isClearedAnd22IsSet+0x58>)
   81262:	47a0      	blx	r4
	pinMode(22, OUTPUT);	/* Initialise pin 22 on the Due as an output */
   81264:	2016      	movs	r0, #22
   81266:	2102      	movs	r1, #2
   81268:	47a0      	blx	r4

	/* First write opposite values compared to what is going to be tested */
	digitalWrite(13, HIGH); /* set pin 13 on the Due to high */
   8126a:	200d      	movs	r0, #13
   8126c:	2101      	movs	r1, #1
   8126e:	4c11      	ldr	r4, [pc, #68]	; (812b4 <test_digitalDuePin13isClearedAnd22IsSet+0x5c>)
   81270:	47a0      	blx	r4
	digitalWrite(22, LOW); /* set pin 22 on the Due to LOW */
   81272:	2016      	movs	r0, #22
   81274:	2100      	movs	r1, #0
   81276:	47a0      	blx	r4
	//TEST_ASSERT_BIT_HIGH(27, *p_PIOB_ODSR);	/* Check the status bit that PB27 on port B is cleared */
	//TEST_ASSERT_BIT_LOW(26, *p_PIOB_ODSR);	/* Check the status bit that PB26 on port B is set */
			
	digitalWrite(13, LOW); /* set pin 13 on the Due to low */
   81278:	200d      	movs	r0, #13
   8127a:	2100      	movs	r1, #0
   8127c:	47a0      	blx	r4
	digitalWrite(22, HIGH); /* set pin 22 on the Due to high */
   8127e:	2016      	movs	r0, #22
   81280:	2101      	movs	r1, #1
   81282:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW_MESSAGE(27, *p_PIOB_ODSR, "PB27 is not low");	/* Check the status bit that PB27 on port B is set */	
   81284:	4d0c      	ldr	r5, [pc, #48]	; (812b8 <test_digitalDuePin13isClearedAnd22IsSet+0x60>)
   81286:	682a      	ldr	r2, [r5, #0]
   81288:	2389      	movs	r3, #137	; 0x89
   8128a:	9300      	str	r3, [sp, #0]
   8128c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   81290:	2100      	movs	r1, #0
   81292:	4b0a      	ldr	r3, [pc, #40]	; (812bc <test_digitalDuePin13isClearedAnd22IsSet+0x64>)
   81294:	4c0a      	ldr	r4, [pc, #40]	; (812c0 <test_digitalDuePin13isClearedAnd22IsSet+0x68>)
   81296:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(26, *p_PIOB_ODSR, "PB26 is not high");	/* Check the status bit that PB26 on port B is cleared */
   81298:	682a      	ldr	r2, [r5, #0]
   8129a:	238a      	movs	r3, #138	; 0x8a
   8129c:	9300      	str	r3, [sp, #0]
   8129e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   812a2:	f04f 31ff 	mov.w	r1, #4294967295
   812a6:	4b07      	ldr	r3, [pc, #28]	; (812c4 <test_digitalDuePin13isClearedAnd22IsSet+0x6c>)
   812a8:	47a0      	blx	r4
   812aa:	b003      	add	sp, #12
   812ac:	bd30      	pop	{r4, r5, pc}
   812ae:	bf00      	nop
   812b0:	00080215 	.word	0x00080215
   812b4:	00080251 	.word	0x00080251
   812b8:	400e1038 	.word	0x400e1038
   812bc:	00084cf0 	.word	0x00084cf0
   812c0:	00080bd1 	.word	0x00080bd1
   812c4:	00084cc8 	.word	0x00084cc8

000812c8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   812c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   812ca:	b083      	sub	sp, #12
   812cc:	4604      	mov	r4, r0
   812ce:	460d      	mov	r5, r1
	uint32_t val = 0;
   812d0:	2300      	movs	r3, #0
   812d2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   812d4:	4b1f      	ldr	r3, [pc, #124]	; (81354 <usart_serial_getchar+0x8c>)
   812d6:	4298      	cmp	r0, r3
   812d8:	d107      	bne.n	812ea <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   812da:	461f      	mov	r7, r3
   812dc:	4e1e      	ldr	r6, [pc, #120]	; (81358 <usart_serial_getchar+0x90>)
   812de:	4638      	mov	r0, r7
   812e0:	4629      	mov	r1, r5
   812e2:	47b0      	blx	r6
   812e4:	2800      	cmp	r0, #0
   812e6:	d1fa      	bne.n	812de <usart_serial_getchar+0x16>
   812e8:	e019      	b.n	8131e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   812ea:	4b1c      	ldr	r3, [pc, #112]	; (8135c <usart_serial_getchar+0x94>)
   812ec:	4298      	cmp	r0, r3
   812ee:	d109      	bne.n	81304 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   812f0:	461f      	mov	r7, r3
   812f2:	4e1b      	ldr	r6, [pc, #108]	; (81360 <usart_serial_getchar+0x98>)
   812f4:	4638      	mov	r0, r7
   812f6:	a901      	add	r1, sp, #4
   812f8:	47b0      	blx	r6
   812fa:	2800      	cmp	r0, #0
   812fc:	d1fa      	bne.n	812f4 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   812fe:	9b01      	ldr	r3, [sp, #4]
   81300:	702b      	strb	r3, [r5, #0]
   81302:	e019      	b.n	81338 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81304:	4b17      	ldr	r3, [pc, #92]	; (81364 <usart_serial_getchar+0x9c>)
   81306:	4298      	cmp	r0, r3
   81308:	d109      	bne.n	8131e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8130a:	461e      	mov	r6, r3
   8130c:	4c14      	ldr	r4, [pc, #80]	; (81360 <usart_serial_getchar+0x98>)
   8130e:	4630      	mov	r0, r6
   81310:	a901      	add	r1, sp, #4
   81312:	47a0      	blx	r4
   81314:	2800      	cmp	r0, #0
   81316:	d1fa      	bne.n	8130e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81318:	9b01      	ldr	r3, [sp, #4]
   8131a:	702b      	strb	r3, [r5, #0]
   8131c:	e018      	b.n	81350 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8131e:	4b12      	ldr	r3, [pc, #72]	; (81368 <usart_serial_getchar+0xa0>)
   81320:	429c      	cmp	r4, r3
   81322:	d109      	bne.n	81338 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81324:	461e      	mov	r6, r3
   81326:	4c0e      	ldr	r4, [pc, #56]	; (81360 <usart_serial_getchar+0x98>)
   81328:	4630      	mov	r0, r6
   8132a:	a901      	add	r1, sp, #4
   8132c:	47a0      	blx	r4
   8132e:	2800      	cmp	r0, #0
   81330:	d1fa      	bne.n	81328 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   81332:	9b01      	ldr	r3, [sp, #4]
   81334:	702b      	strb	r3, [r5, #0]
   81336:	e00b      	b.n	81350 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81338:	4b0c      	ldr	r3, [pc, #48]	; (8136c <usart_serial_getchar+0xa4>)
   8133a:	429c      	cmp	r4, r3
   8133c:	d108      	bne.n	81350 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8133e:	461e      	mov	r6, r3
   81340:	4c07      	ldr	r4, [pc, #28]	; (81360 <usart_serial_getchar+0x98>)
   81342:	4630      	mov	r0, r6
   81344:	a901      	add	r1, sp, #4
   81346:	47a0      	blx	r4
   81348:	2800      	cmp	r0, #0
   8134a:	d1fa      	bne.n	81342 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   8134c:	9b01      	ldr	r3, [sp, #4]
   8134e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81350:	b003      	add	sp, #12
   81352:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81354:	400e0800 	.word	0x400e0800
   81358:	00080fe5 	.word	0x00080fe5
   8135c:	40098000 	.word	0x40098000
   81360:	0008019d 	.word	0x0008019d
   81364:	4009c000 	.word	0x4009c000
   81368:	400a0000 	.word	0x400a0000
   8136c:	400a4000 	.word	0x400a4000

00081370 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81370:	b570      	push	{r4, r5, r6, lr}
   81372:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81374:	4b21      	ldr	r3, [pc, #132]	; (813fc <usart_serial_putchar+0x8c>)
   81376:	4298      	cmp	r0, r3
   81378:	d107      	bne.n	8138a <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8137a:	461e      	mov	r6, r3
   8137c:	4d20      	ldr	r5, [pc, #128]	; (81400 <usart_serial_putchar+0x90>)
   8137e:	4630      	mov	r0, r6
   81380:	4621      	mov	r1, r4
   81382:	47a8      	blx	r5
   81384:	2800      	cmp	r0, #0
   81386:	d1fa      	bne.n	8137e <usart_serial_putchar+0xe>
   81388:	e02b      	b.n	813e2 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8138a:	4b1e      	ldr	r3, [pc, #120]	; (81404 <usart_serial_putchar+0x94>)
   8138c:	4298      	cmp	r0, r3
   8138e:	d107      	bne.n	813a0 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   81390:	461e      	mov	r6, r3
   81392:	4d1d      	ldr	r5, [pc, #116]	; (81408 <usart_serial_putchar+0x98>)
   81394:	4630      	mov	r0, r6
   81396:	4621      	mov	r1, r4
   81398:	47a8      	blx	r5
   8139a:	2800      	cmp	r0, #0
   8139c:	d1fa      	bne.n	81394 <usart_serial_putchar+0x24>
   8139e:	e022      	b.n	813e6 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   813a0:	4b1a      	ldr	r3, [pc, #104]	; (8140c <usart_serial_putchar+0x9c>)
   813a2:	4298      	cmp	r0, r3
   813a4:	d107      	bne.n	813b6 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   813a6:	461e      	mov	r6, r3
   813a8:	4d17      	ldr	r5, [pc, #92]	; (81408 <usart_serial_putchar+0x98>)
   813aa:	4630      	mov	r0, r6
   813ac:	4621      	mov	r1, r4
   813ae:	47a8      	blx	r5
   813b0:	2800      	cmp	r0, #0
   813b2:	d1fa      	bne.n	813aa <usart_serial_putchar+0x3a>
   813b4:	e019      	b.n	813ea <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   813b6:	4b16      	ldr	r3, [pc, #88]	; (81410 <usart_serial_putchar+0xa0>)
   813b8:	4298      	cmp	r0, r3
   813ba:	d107      	bne.n	813cc <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   813bc:	461e      	mov	r6, r3
   813be:	4d12      	ldr	r5, [pc, #72]	; (81408 <usart_serial_putchar+0x98>)
   813c0:	4630      	mov	r0, r6
   813c2:	4621      	mov	r1, r4
   813c4:	47a8      	blx	r5
   813c6:	2800      	cmp	r0, #0
   813c8:	d1fa      	bne.n	813c0 <usart_serial_putchar+0x50>
   813ca:	e010      	b.n	813ee <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   813cc:	4b11      	ldr	r3, [pc, #68]	; (81414 <usart_serial_putchar+0xa4>)
   813ce:	4298      	cmp	r0, r3
   813d0:	d10f      	bne.n	813f2 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   813d2:	461e      	mov	r6, r3
   813d4:	4d0c      	ldr	r5, [pc, #48]	; (81408 <usart_serial_putchar+0x98>)
   813d6:	4630      	mov	r0, r6
   813d8:	4621      	mov	r1, r4
   813da:	47a8      	blx	r5
   813dc:	2800      	cmp	r0, #0
   813de:	d1fa      	bne.n	813d6 <usart_serial_putchar+0x66>
   813e0:	e009      	b.n	813f6 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   813e2:	2001      	movs	r0, #1
   813e4:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   813e6:	2001      	movs	r0, #1
   813e8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   813ea:	2001      	movs	r0, #1
   813ec:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   813ee:	2001      	movs	r0, #1
   813f0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   813f2:	2000      	movs	r0, #0
   813f4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   813f6:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   813f8:	bd70      	pop	{r4, r5, r6, pc}
   813fa:	bf00      	nop
   813fc:	400e0800 	.word	0x400e0800
   81400:	00080fd5 	.word	0x00080fd5
   81404:	40098000 	.word	0x40098000
   81408:	00080189 	.word	0x00080189
   8140c:	4009c000 	.word	0x4009c000
   81410:	400a0000 	.word	0x400a0000
   81414:	400a4000 	.word	0x400a4000

00081418 <main>:
	printf("=============\n");
}


int main(void)
{
   81418:	b530      	push	{r4, r5, lr}
   8141a:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	 sysclk_init();
   8141c:	4b2c      	ldr	r3, [pc, #176]	; (814d0 <main+0xb8>)
   8141e:	4798      	blx	r3
	 board_init();
   81420:	4b2c      	ldr	r3, [pc, #176]	; (814d4 <main+0xbc>)
   81422:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81424:	2008      	movs	r0, #8
   81426:	4d2c      	ldr	r5, [pc, #176]	; (814d8 <main+0xc0>)
   81428:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8142a:	4c2c      	ldr	r4, [pc, #176]	; (814dc <main+0xc4>)
   8142c:	4b2c      	ldr	r3, [pc, #176]	; (814e0 <main+0xc8>)
   8142e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81430:	4a2c      	ldr	r2, [pc, #176]	; (814e4 <main+0xcc>)
   81432:	4b2d      	ldr	r3, [pc, #180]	; (814e8 <main+0xd0>)
   81434:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81436:	4a2d      	ldr	r2, [pc, #180]	; (814ec <main+0xd4>)
   81438:	4b2d      	ldr	r3, [pc, #180]	; (814f0 <main+0xd8>)
   8143a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8143c:	4b2d      	ldr	r3, [pc, #180]	; (814f4 <main+0xdc>)
   8143e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81440:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81444:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81446:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8144a:	9303      	str	r3, [sp, #12]
   8144c:	2008      	movs	r0, #8
   8144e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81450:	4620      	mov	r0, r4
   81452:	a901      	add	r1, sp, #4
   81454:	4b28      	ldr	r3, [pc, #160]	; (814f8 <main+0xe0>)
   81456:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81458:	4d28      	ldr	r5, [pc, #160]	; (814fc <main+0xe4>)
   8145a:	682b      	ldr	r3, [r5, #0]
   8145c:	6898      	ldr	r0, [r3, #8]
   8145e:	2100      	movs	r1, #0
   81460:	4c27      	ldr	r4, [pc, #156]	; (81500 <main+0xe8>)
   81462:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81464:	682b      	ldr	r3, [r5, #0]
   81466:	6858      	ldr	r0, [r3, #4]
   81468:	2100      	movs	r1, #0
   8146a:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   8146c:	4825      	ldr	r0, [pc, #148]	; (81504 <main+0xec>)
   8146e:	4c26      	ldr	r4, [pc, #152]	; (81508 <main+0xf0>)
   81470:	47a0      	blx	r4
	printf("=============\n");
   81472:	4826      	ldr	r0, [pc, #152]	; (8150c <main+0xf4>)
   81474:	47a0      	blx	r4

	/* Initialize the console UART used from within Atmel Studio*/
	configure_console();
	
	/* From here on the program uses the Unity testing framework */
	UnityBegin("../test/testDigitalIO.c");
   81476:	4826      	ldr	r0, [pc, #152]	; (81510 <main+0xf8>)
   81478:	4b26      	ldr	r3, [pc, #152]	; (81514 <main+0xfc>)
   8147a:	4798      	blx	r3
	
	/* Run the tests from the test-file */
	RUN_TEST(test_digitalDuePin13InitialiseProperly, 10);
   8147c:	4826      	ldr	r0, [pc, #152]	; (81518 <main+0x100>)
   8147e:	4927      	ldr	r1, [pc, #156]	; (8151c <main+0x104>)
   81480:	220a      	movs	r2, #10
   81482:	4c27      	ldr	r4, [pc, #156]	; (81520 <main+0x108>)
   81484:	47a0      	blx	r4
	
	/* Uncomment the rest of the tests, one at a time, when you have written or modified code so that you pass the previous test */
	RUN_TEST(test_digitalDuePin13IsSet, 15);
   81486:	4827      	ldr	r0, [pc, #156]	; (81524 <main+0x10c>)
   81488:	4927      	ldr	r1, [pc, #156]	; (81528 <main+0x110>)
   8148a:	220f      	movs	r2, #15
   8148c:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin13IsCleared, 18);
   8148e:	4827      	ldr	r0, [pc, #156]	; (8152c <main+0x114>)
   81490:	4927      	ldr	r1, [pc, #156]	; (81530 <main+0x118>)
   81492:	2212      	movs	r2, #18
   81494:	47a0      	blx	r4
	//
	RUN_TEST(test_digitalDuePin22InitialiseProperly, 20);
   81496:	4827      	ldr	r0, [pc, #156]	; (81534 <main+0x11c>)
   81498:	4927      	ldr	r1, [pc, #156]	; (81538 <main+0x120>)
   8149a:	2214      	movs	r2, #20
   8149c:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin22IsSet, 25);
   8149e:	4827      	ldr	r0, [pc, #156]	; (8153c <main+0x124>)
   814a0:	4927      	ldr	r1, [pc, #156]	; (81540 <main+0x128>)
   814a2:	2219      	movs	r2, #25
   814a4:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin22IsCleared, 28);
   814a6:	4827      	ldr	r0, [pc, #156]	; (81544 <main+0x12c>)
   814a8:	4927      	ldr	r1, [pc, #156]	; (81548 <main+0x130>)
   814aa:	221c      	movs	r2, #28
   814ac:	47a0      	blx	r4
	//
	RUN_TEST(test_digitalDuePin13And22InitialiseProperly, 30);
   814ae:	4827      	ldr	r0, [pc, #156]	; (8154c <main+0x134>)
   814b0:	4927      	ldr	r1, [pc, #156]	; (81550 <main+0x138>)
   814b2:	221e      	movs	r2, #30
   814b4:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin13And22IsSet, 35);
   814b6:	4827      	ldr	r0, [pc, #156]	; (81554 <main+0x13c>)
   814b8:	4927      	ldr	r1, [pc, #156]	; (81558 <main+0x140>)
   814ba:	2223      	movs	r2, #35	; 0x23
   814bc:	47a0      	blx	r4
	RUN_TEST(test_digitalDuePin13isClearedAnd22IsSet, 38);
   814be:	4827      	ldr	r0, [pc, #156]	; (8155c <main+0x144>)
   814c0:	4927      	ldr	r1, [pc, #156]	; (81560 <main+0x148>)
   814c2:	2226      	movs	r2, #38	; 0x26
   814c4:	47a0      	blx	r4

	UnityEnd();
   814c6:	4b27      	ldr	r3, [pc, #156]	; (81564 <main+0x14c>)
   814c8:	4798      	blx	r3
	
	return 0;
}
   814ca:	2000      	movs	r0, #0
   814cc:	b005      	add	sp, #20
   814ce:	bd30      	pop	{r4, r5, pc}
   814d0:	00081569 	.word	0x00081569
   814d4:	000815cd 	.word	0x000815cd
   814d8:	000819f5 	.word	0x000819f5
   814dc:	400e0800 	.word	0x400e0800
   814e0:	20070b84 	.word	0x20070b84
   814e4:	00081371 	.word	0x00081371
   814e8:	20070b80 	.word	0x20070b80
   814ec:	000812c9 	.word	0x000812c9
   814f0:	20070b00 	.word	0x20070b00
   814f4:	0501bd00 	.word	0x0501bd00
   814f8:	00080f9d 	.word	0x00080f9d
   814fc:	20070560 	.word	0x20070560
   81500:	00081d79 	.word	0x00081d79
   81504:	00084d00 	.word	0x00084d00
   81508:	00081cbd 	.word	0x00081cbd
   8150c:	00084d10 	.word	0x00084d10
   81510:	00084d20 	.word	0x00084d20
   81514:	00080ca1 	.word	0x00080ca1
   81518:	00081019 	.word	0x00081019
   8151c:	00084d38 	.word	0x00084d38
   81520:	00080c49 	.word	0x00080c49
   81524:	00081065 	.word	0x00081065
   81528:	00084d60 	.word	0x00084d60
   8152c:	000810a5 	.word	0x000810a5
   81530:	00084d7c 	.word	0x00084d7c
   81534:	000810e9 	.word	0x000810e9
   81538:	00084d9c 	.word	0x00084d9c
   8153c:	0008111d 	.word	0x0008111d
   81540:	00084dc4 	.word	0x00084dc4
   81544:	0008115d 	.word	0x0008115d
   81548:	00084de0 	.word	0x00084de0
   8154c:	000811a1 	.word	0x000811a1
   81550:	00084e00 	.word	0x00084e00
   81554:	000811f5 	.word	0x000811f5
   81558:	00084e2c 	.word	0x00084e2c
   8155c:	00081259 	.word	0x00081259
   81560:	00084e4c 	.word	0x00084e4c
   81564:	00080cbd 	.word	0x00080cbd

00081568 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81568:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8156a:	480e      	ldr	r0, [pc, #56]	; (815a4 <sysclk_init+0x3c>)
   8156c:	4b0e      	ldr	r3, [pc, #56]	; (815a8 <sysclk_init+0x40>)
   8156e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81570:	2000      	movs	r0, #0
   81572:	213e      	movs	r1, #62	; 0x3e
   81574:	4b0d      	ldr	r3, [pc, #52]	; (815ac <sysclk_init+0x44>)
   81576:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81578:	4c0d      	ldr	r4, [pc, #52]	; (815b0 <sysclk_init+0x48>)
   8157a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8157c:	2800      	cmp	r0, #0
   8157e:	d0fc      	beq.n	8157a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81580:	4b0c      	ldr	r3, [pc, #48]	; (815b4 <sysclk_init+0x4c>)
   81582:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81584:	4a0c      	ldr	r2, [pc, #48]	; (815b8 <sysclk_init+0x50>)
   81586:	4b0d      	ldr	r3, [pc, #52]	; (815bc <sysclk_init+0x54>)
   81588:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8158a:	4c0d      	ldr	r4, [pc, #52]	; (815c0 <sysclk_init+0x58>)
   8158c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8158e:	2800      	cmp	r0, #0
   81590:	d0fc      	beq.n	8158c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81592:	2010      	movs	r0, #16
   81594:	4b0b      	ldr	r3, [pc, #44]	; (815c4 <sysclk_init+0x5c>)
   81596:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81598:	4b0b      	ldr	r3, [pc, #44]	; (815c8 <sysclk_init+0x60>)
   8159a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8159c:	4801      	ldr	r0, [pc, #4]	; (815a4 <sysclk_init+0x3c>)
   8159e:	4b02      	ldr	r3, [pc, #8]	; (815a8 <sysclk_init+0x40>)
   815a0:	4798      	blx	r3
   815a2:	bd10      	pop	{r4, pc}
   815a4:	0501bd00 	.word	0x0501bd00
   815a8:	200700a5 	.word	0x200700a5
   815ac:	00081971 	.word	0x00081971
   815b0:	000819c5 	.word	0x000819c5
   815b4:	000819d5 	.word	0x000819d5
   815b8:	200d3f01 	.word	0x200d3f01
   815bc:	400e0600 	.word	0x400e0600
   815c0:	000819e5 	.word	0x000819e5
   815c4:	0008190d 	.word	0x0008190d
   815c8:	00081b01 	.word	0x00081b01

000815cc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   815cc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   815ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   815d2:	4b16      	ldr	r3, [pc, #88]	; (8162c <board_init+0x60>)
   815d4:	605a      	str	r2, [r3, #4]
   815d6:	200b      	movs	r0, #11
   815d8:	4c15      	ldr	r4, [pc, #84]	; (81630 <board_init+0x64>)
   815da:	47a0      	blx	r4
   815dc:	200c      	movs	r0, #12
   815de:	47a0      	blx	r4
   815e0:	200d      	movs	r0, #13
   815e2:	47a0      	blx	r4
   815e4:	200e      	movs	r0, #14
   815e6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   815e8:	203b      	movs	r0, #59	; 0x3b
   815ea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815ee:	4c11      	ldr	r4, [pc, #68]	; (81634 <board_init+0x68>)
   815f0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   815f2:	2055      	movs	r0, #85	; 0x55
   815f4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815f8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   815fa:	2056      	movs	r0, #86	; 0x56
   815fc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81600:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81602:	2068      	movs	r0, #104	; 0x68
   81604:	490c      	ldr	r1, [pc, #48]	; (81638 <board_init+0x6c>)
   81606:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81608:	205c      	movs	r0, #92	; 0x5c
   8160a:	490c      	ldr	r1, [pc, #48]	; (8163c <board_init+0x70>)
   8160c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8160e:	480c      	ldr	r0, [pc, #48]	; (81640 <board_init+0x74>)
   81610:	f44f 7140 	mov.w	r1, #768	; 0x300
   81614:	4a0b      	ldr	r2, [pc, #44]	; (81644 <board_init+0x78>)
   81616:	4b0c      	ldr	r3, [pc, #48]	; (81648 <board_init+0x7c>)
   81618:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8161a:	202b      	movs	r0, #43	; 0x2b
   8161c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81620:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81622:	202a      	movs	r0, #42	; 0x2a
   81624:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81628:	47a0      	blx	r4
   8162a:	bd10      	pop	{r4, pc}
   8162c:	400e1a50 	.word	0x400e1a50
   81630:	000819f5 	.word	0x000819f5
   81634:	000816f1 	.word	0x000816f1
   81638:	28000079 	.word	0x28000079
   8163c:	28000001 	.word	0x28000001
   81640:	400e0e00 	.word	0x400e0e00
   81644:	08000001 	.word	0x08000001
   81648:	000817c5 	.word	0x000817c5

0008164c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8164c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8164e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81652:	d016      	beq.n	81682 <pio_set_peripheral+0x36>
   81654:	d804      	bhi.n	81660 <pio_set_peripheral+0x14>
   81656:	b1c1      	cbz	r1, 8168a <pio_set_peripheral+0x3e>
   81658:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8165c:	d00a      	beq.n	81674 <pio_set_peripheral+0x28>
   8165e:	e013      	b.n	81688 <pio_set_peripheral+0x3c>
   81660:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81664:	d011      	beq.n	8168a <pio_set_peripheral+0x3e>
   81666:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8166a:	d00e      	beq.n	8168a <pio_set_peripheral+0x3e>
   8166c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81670:	d10a      	bne.n	81688 <pio_set_peripheral+0x3c>
   81672:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81674:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81676:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81678:	400b      	ands	r3, r1
   8167a:	ea23 0302 	bic.w	r3, r3, r2
   8167e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81680:	e002      	b.n	81688 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81682:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81684:	4313      	orrs	r3, r2
   81686:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81688:	6042      	str	r2, [r0, #4]
   8168a:	4770      	bx	lr

0008168c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8168c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8168e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81692:	bf14      	ite	ne
   81694:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81696:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81698:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8169c:	bf14      	ite	ne
   8169e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   816a0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   816a2:	f012 0f02 	tst.w	r2, #2
   816a6:	d002      	beq.n	816ae <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   816a8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   816ac:	e004      	b.n	816b8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   816ae:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   816b2:	bf18      	it	ne
   816b4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   816b8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   816ba:	6001      	str	r1, [r0, #0]
   816bc:	4770      	bx	lr
   816be:	bf00      	nop

000816c0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   816c0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   816c2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   816c4:	9c01      	ldr	r4, [sp, #4]
   816c6:	b10c      	cbz	r4, 816cc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   816c8:	6641      	str	r1, [r0, #100]	; 0x64
   816ca:	e000      	b.n	816ce <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   816cc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   816ce:	b10b      	cbz	r3, 816d4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   816d0:	6501      	str	r1, [r0, #80]	; 0x50
   816d2:	e000      	b.n	816d6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   816d4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   816d6:	b10a      	cbz	r2, 816dc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   816d8:	6301      	str	r1, [r0, #48]	; 0x30
   816da:	e000      	b.n	816de <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   816dc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   816de:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   816e0:	6001      	str	r1, [r0, #0]
}
   816e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   816e6:	4770      	bx	lr

000816e8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   816e8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   816ea:	4770      	bx	lr

000816ec <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   816ec:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   816ee:	4770      	bx	lr

000816f0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   816f0:	b570      	push	{r4, r5, r6, lr}
   816f2:	b082      	sub	sp, #8
   816f4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   816f6:	0944      	lsrs	r4, r0, #5
   816f8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   816fc:	f204 7407 	addw	r4, r4, #1799	; 0x707
   81700:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81702:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   81706:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8170a:	d030      	beq.n	8176e <pio_configure_pin+0x7e>
   8170c:	d806      	bhi.n	8171c <pio_configure_pin+0x2c>
   8170e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81712:	d00a      	beq.n	8172a <pio_configure_pin+0x3a>
   81714:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81718:	d018      	beq.n	8174c <pio_configure_pin+0x5c>
   8171a:	e049      	b.n	817b0 <pio_configure_pin+0xc0>
   8171c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81720:	d030      	beq.n	81784 <pio_configure_pin+0x94>
   81722:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81726:	d02d      	beq.n	81784 <pio_configure_pin+0x94>
   81728:	e042      	b.n	817b0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8172a:	f000 001f 	and.w	r0, r0, #31
   8172e:	2401      	movs	r4, #1
   81730:	4084      	lsls	r4, r0
   81732:	4630      	mov	r0, r6
   81734:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81738:	4622      	mov	r2, r4
   8173a:	4b1f      	ldr	r3, [pc, #124]	; (817b8 <pio_configure_pin+0xc8>)
   8173c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8173e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81742:	bf14      	ite	ne
   81744:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81746:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81748:	2001      	movs	r0, #1
   8174a:	e032      	b.n	817b2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8174c:	f000 001f 	and.w	r0, r0, #31
   81750:	2401      	movs	r4, #1
   81752:	4084      	lsls	r4, r0
   81754:	4630      	mov	r0, r6
   81756:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8175a:	4622      	mov	r2, r4
   8175c:	4b16      	ldr	r3, [pc, #88]	; (817b8 <pio_configure_pin+0xc8>)
   8175e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81760:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81764:	bf14      	ite	ne
   81766:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81768:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8176a:	2001      	movs	r0, #1
   8176c:	e021      	b.n	817b2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8176e:	f000 011f 	and.w	r1, r0, #31
   81772:	2401      	movs	r4, #1
   81774:	4630      	mov	r0, r6
   81776:	fa04 f101 	lsl.w	r1, r4, r1
   8177a:	462a      	mov	r2, r5
   8177c:	4b0f      	ldr	r3, [pc, #60]	; (817bc <pio_configure_pin+0xcc>)
   8177e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81780:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81782:	e016      	b.n	817b2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81784:	f000 011f 	and.w	r1, r0, #31
   81788:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8178a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8178e:	ea05 0304 	and.w	r3, r5, r4
   81792:	9300      	str	r3, [sp, #0]
   81794:	4630      	mov	r0, r6
   81796:	fa04 f101 	lsl.w	r1, r4, r1
   8179a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8179e:	bf14      	ite	ne
   817a0:	2200      	movne	r2, #0
   817a2:	2201      	moveq	r2, #1
   817a4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   817a8:	4d05      	ldr	r5, [pc, #20]	; (817c0 <pio_configure_pin+0xd0>)
   817aa:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   817ac:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   817ae:	e000      	b.n	817b2 <pio_configure_pin+0xc2>

	default:
		return 0;
   817b0:	2000      	movs	r0, #0
	}

	return 1;
}
   817b2:	b002      	add	sp, #8
   817b4:	bd70      	pop	{r4, r5, r6, pc}
   817b6:	bf00      	nop
   817b8:	0008164d 	.word	0x0008164d
   817bc:	0008168d 	.word	0x0008168d
   817c0:	000816c1 	.word	0x000816c1

000817c4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   817c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   817c6:	b083      	sub	sp, #12
   817c8:	4607      	mov	r7, r0
   817ca:	460e      	mov	r6, r1
   817cc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   817ce:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   817d2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   817d6:	d026      	beq.n	81826 <pio_configure_pin_group+0x62>
   817d8:	d806      	bhi.n	817e8 <pio_configure_pin_group+0x24>
   817da:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   817de:	d00a      	beq.n	817f6 <pio_configure_pin_group+0x32>
   817e0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   817e4:	d013      	beq.n	8180e <pio_configure_pin_group+0x4a>
   817e6:	e034      	b.n	81852 <pio_configure_pin_group+0x8e>
   817e8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   817ec:	d01f      	beq.n	8182e <pio_configure_pin_group+0x6a>
   817ee:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   817f2:	d01c      	beq.n	8182e <pio_configure_pin_group+0x6a>
   817f4:	e02d      	b.n	81852 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   817f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817fa:	4632      	mov	r2, r6
   817fc:	4b16      	ldr	r3, [pc, #88]	; (81858 <pio_configure_pin_group+0x94>)
   817fe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81800:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81804:	bf14      	ite	ne
   81806:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81808:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8180a:	2001      	movs	r0, #1
   8180c:	e022      	b.n	81854 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8180e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81812:	4632      	mov	r2, r6
   81814:	4b10      	ldr	r3, [pc, #64]	; (81858 <pio_configure_pin_group+0x94>)
   81816:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81818:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8181c:	bf14      	ite	ne
   8181e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81820:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81822:	2001      	movs	r0, #1
   81824:	e016      	b.n	81854 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81826:	4b0d      	ldr	r3, [pc, #52]	; (8185c <pio_configure_pin_group+0x98>)
   81828:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8182a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8182c:	e012      	b.n	81854 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8182e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81832:	f005 0301 	and.w	r3, r5, #1
   81836:	9300      	str	r3, [sp, #0]
   81838:	4638      	mov	r0, r7
   8183a:	4631      	mov	r1, r6
   8183c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81840:	bf14      	ite	ne
   81842:	2200      	movne	r2, #0
   81844:	2201      	moveq	r2, #1
   81846:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8184a:	4c05      	ldr	r4, [pc, #20]	; (81860 <pio_configure_pin_group+0x9c>)
   8184c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8184e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81850:	e000      	b.n	81854 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81852:	2000      	movs	r0, #0
	}

	return 1;
}
   81854:	b003      	add	sp, #12
   81856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81858:	0008164d 	.word	0x0008164d
   8185c:	0008168d 	.word	0x0008168d
   81860:	000816c1 	.word	0x000816c1

00081864 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81868:	4604      	mov	r4, r0
   8186a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8186c:	4b10      	ldr	r3, [pc, #64]	; (818b0 <pio_handler_process+0x4c>)
   8186e:	4798      	blx	r3
   81870:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81872:	4620      	mov	r0, r4
   81874:	4b0f      	ldr	r3, [pc, #60]	; (818b4 <pio_handler_process+0x50>)
   81876:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81878:	4005      	ands	r5, r0
   8187a:	d017      	beq.n	818ac <pio_handler_process+0x48>
   8187c:	4f0e      	ldr	r7, [pc, #56]	; (818b8 <pio_handler_process+0x54>)
   8187e:	f107 040c 	add.w	r4, r7, #12
   81882:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81884:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81888:	42b3      	cmp	r3, r6
   8188a:	d10a      	bne.n	818a2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8188c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81890:	4229      	tst	r1, r5
   81892:	d006      	beq.n	818a2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81894:	6823      	ldr	r3, [r4, #0]
   81896:	4630      	mov	r0, r6
   81898:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8189a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8189e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   818a2:	42bc      	cmp	r4, r7
   818a4:	d002      	beq.n	818ac <pio_handler_process+0x48>
   818a6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   818a8:	2d00      	cmp	r5, #0
   818aa:	d1eb      	bne.n	81884 <pio_handler_process+0x20>
   818ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   818b0:	000816e9 	.word	0x000816e9
   818b4:	000816ed 	.word	0x000816ed
   818b8:	20070a58 	.word	0x20070a58

000818bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   818bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   818be:	4802      	ldr	r0, [pc, #8]	; (818c8 <PIOA_Handler+0xc>)
   818c0:	210b      	movs	r1, #11
   818c2:	4b02      	ldr	r3, [pc, #8]	; (818cc <PIOA_Handler+0x10>)
   818c4:	4798      	blx	r3
   818c6:	bd08      	pop	{r3, pc}
   818c8:	400e0e00 	.word	0x400e0e00
   818cc:	00081865 	.word	0x00081865

000818d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   818d0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   818d2:	4802      	ldr	r0, [pc, #8]	; (818dc <PIOB_Handler+0xc>)
   818d4:	210c      	movs	r1, #12
   818d6:	4b02      	ldr	r3, [pc, #8]	; (818e0 <PIOB_Handler+0x10>)
   818d8:	4798      	blx	r3
   818da:	bd08      	pop	{r3, pc}
   818dc:	400e1000 	.word	0x400e1000
   818e0:	00081865 	.word	0x00081865

000818e4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   818e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   818e6:	4802      	ldr	r0, [pc, #8]	; (818f0 <PIOC_Handler+0xc>)
   818e8:	210d      	movs	r1, #13
   818ea:	4b02      	ldr	r3, [pc, #8]	; (818f4 <PIOC_Handler+0x10>)
   818ec:	4798      	blx	r3
   818ee:	bd08      	pop	{r3, pc}
   818f0:	400e1200 	.word	0x400e1200
   818f4:	00081865 	.word	0x00081865

000818f8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   818f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   818fa:	4802      	ldr	r0, [pc, #8]	; (81904 <PIOD_Handler+0xc>)
   818fc:	210e      	movs	r1, #14
   818fe:	4b02      	ldr	r3, [pc, #8]	; (81908 <PIOD_Handler+0x10>)
   81900:	4798      	blx	r3
   81902:	bd08      	pop	{r3, pc}
   81904:	400e1400 	.word	0x400e1400
   81908:	00081865 	.word	0x00081865

0008190c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8190c:	4b17      	ldr	r3, [pc, #92]	; (8196c <pmc_switch_mck_to_pllack+0x60>)
   8190e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81910:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81914:	4310      	orrs	r0, r2
   81916:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8191a:	f013 0f08 	tst.w	r3, #8
   8191e:	d109      	bne.n	81934 <pmc_switch_mck_to_pllack+0x28>
   81920:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81924:	4911      	ldr	r1, [pc, #68]	; (8196c <pmc_switch_mck_to_pllack+0x60>)
   81926:	e001      	b.n	8192c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81928:	3b01      	subs	r3, #1
   8192a:	d019      	beq.n	81960 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8192c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8192e:	f012 0f08 	tst.w	r2, #8
   81932:	d0f9      	beq.n	81928 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81934:	4b0d      	ldr	r3, [pc, #52]	; (8196c <pmc_switch_mck_to_pllack+0x60>)
   81936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81938:	f022 0203 	bic.w	r2, r2, #3
   8193c:	f042 0202 	orr.w	r2, r2, #2
   81940:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81942:	6e98      	ldr	r0, [r3, #104]	; 0x68
   81944:	f010 0008 	ands.w	r0, r0, #8
   81948:	d10c      	bne.n	81964 <pmc_switch_mck_to_pllack+0x58>
   8194a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8194e:	4907      	ldr	r1, [pc, #28]	; (8196c <pmc_switch_mck_to_pllack+0x60>)
   81950:	e001      	b.n	81956 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81952:	3b01      	subs	r3, #1
   81954:	d008      	beq.n	81968 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81956:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81958:	f012 0f08 	tst.w	r2, #8
   8195c:	d0f9      	beq.n	81952 <pmc_switch_mck_to_pllack+0x46>
   8195e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81960:	2001      	movs	r0, #1
   81962:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81964:	2000      	movs	r0, #0
   81966:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81968:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8196a:	4770      	bx	lr
   8196c:	400e0600 	.word	0x400e0600

00081970 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81970:	b138      	cbz	r0, 81982 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81972:	4911      	ldr	r1, [pc, #68]	; (819b8 <pmc_switch_mainck_to_xtal+0x48>)
   81974:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81976:	4a11      	ldr	r2, [pc, #68]	; (819bc <pmc_switch_mainck_to_xtal+0x4c>)
   81978:	401a      	ands	r2, r3
   8197a:	4b11      	ldr	r3, [pc, #68]	; (819c0 <pmc_switch_mainck_to_xtal+0x50>)
   8197c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8197e:	620b      	str	r3, [r1, #32]
   81980:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81982:	4a0d      	ldr	r2, [pc, #52]	; (819b8 <pmc_switch_mainck_to_xtal+0x48>)
   81984:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81986:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8198a:	f023 0303 	bic.w	r3, r3, #3
   8198e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81992:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81996:	0209      	lsls	r1, r1, #8
   81998:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8199a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8199c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8199e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   819a0:	f013 0f01 	tst.w	r3, #1
   819a4:	d0fb      	beq.n	8199e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   819a6:	4a04      	ldr	r2, [pc, #16]	; (819b8 <pmc_switch_mainck_to_xtal+0x48>)
   819a8:	6a13      	ldr	r3, [r2, #32]
   819aa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   819ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   819b2:	6213      	str	r3, [r2, #32]
   819b4:	4770      	bx	lr
   819b6:	bf00      	nop
   819b8:	400e0600 	.word	0x400e0600
   819bc:	fec8fffc 	.word	0xfec8fffc
   819c0:	01370002 	.word	0x01370002

000819c4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   819c4:	4b02      	ldr	r3, [pc, #8]	; (819d0 <pmc_osc_is_ready_mainck+0xc>)
   819c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   819c8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   819cc:	4770      	bx	lr
   819ce:	bf00      	nop
   819d0:	400e0600 	.word	0x400e0600

000819d4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   819d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   819d8:	4b01      	ldr	r3, [pc, #4]	; (819e0 <pmc_disable_pllack+0xc>)
   819da:	629a      	str	r2, [r3, #40]	; 0x28
   819dc:	4770      	bx	lr
   819de:	bf00      	nop
   819e0:	400e0600 	.word	0x400e0600

000819e4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   819e4:	4b02      	ldr	r3, [pc, #8]	; (819f0 <pmc_is_locked_pllack+0xc>)
   819e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   819e8:	f000 0002 	and.w	r0, r0, #2
   819ec:	4770      	bx	lr
   819ee:	bf00      	nop
   819f0:	400e0600 	.word	0x400e0600

000819f4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   819f4:	282c      	cmp	r0, #44	; 0x2c
   819f6:	d820      	bhi.n	81a3a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   819f8:	281f      	cmp	r0, #31
   819fa:	d80d      	bhi.n	81a18 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   819fc:	4b12      	ldr	r3, [pc, #72]	; (81a48 <pmc_enable_periph_clk+0x54>)
   819fe:	699a      	ldr	r2, [r3, #24]
   81a00:	2301      	movs	r3, #1
   81a02:	4083      	lsls	r3, r0
   81a04:	401a      	ands	r2, r3
   81a06:	4293      	cmp	r3, r2
   81a08:	d019      	beq.n	81a3e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81a0a:	2301      	movs	r3, #1
   81a0c:	fa03 f000 	lsl.w	r0, r3, r0
   81a10:	4b0d      	ldr	r3, [pc, #52]	; (81a48 <pmc_enable_periph_clk+0x54>)
   81a12:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81a14:	2000      	movs	r0, #0
   81a16:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81a18:	4b0b      	ldr	r3, [pc, #44]	; (81a48 <pmc_enable_periph_clk+0x54>)
   81a1a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   81a1e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81a20:	2301      	movs	r3, #1
   81a22:	4083      	lsls	r3, r0
   81a24:	401a      	ands	r2, r3
   81a26:	4293      	cmp	r3, r2
   81a28:	d00b      	beq.n	81a42 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   81a2a:	2301      	movs	r3, #1
   81a2c:	fa03 f000 	lsl.w	r0, r3, r0
   81a30:	4b05      	ldr	r3, [pc, #20]	; (81a48 <pmc_enable_periph_clk+0x54>)
   81a32:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81a36:	2000      	movs	r0, #0
   81a38:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   81a3a:	2001      	movs	r0, #1
   81a3c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81a3e:	2000      	movs	r0, #0
   81a40:	4770      	bx	lr
   81a42:	2000      	movs	r0, #0
}
   81a44:	4770      	bx	lr
   81a46:	bf00      	nop
   81a48:	400e0600 	.word	0x400e0600

00081a4c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81a4c:	e7fe      	b.n	81a4c <Dummy_Handler>
   81a4e:	bf00      	nop

00081a50 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81a50:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81a52:	4b1e      	ldr	r3, [pc, #120]	; (81acc <Reset_Handler+0x7c>)
   81a54:	4a1e      	ldr	r2, [pc, #120]	; (81ad0 <Reset_Handler+0x80>)
   81a56:	429a      	cmp	r2, r3
   81a58:	d003      	beq.n	81a62 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81a5a:	4b1e      	ldr	r3, [pc, #120]	; (81ad4 <Reset_Handler+0x84>)
   81a5c:	4a1b      	ldr	r2, [pc, #108]	; (81acc <Reset_Handler+0x7c>)
   81a5e:	429a      	cmp	r2, r3
   81a60:	d304      	bcc.n	81a6c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81a62:	4b1d      	ldr	r3, [pc, #116]	; (81ad8 <Reset_Handler+0x88>)
   81a64:	4a1d      	ldr	r2, [pc, #116]	; (81adc <Reset_Handler+0x8c>)
   81a66:	429a      	cmp	r2, r3
   81a68:	d30f      	bcc.n	81a8a <Reset_Handler+0x3a>
   81a6a:	e01a      	b.n	81aa2 <Reset_Handler+0x52>
   81a6c:	4b1c      	ldr	r3, [pc, #112]	; (81ae0 <Reset_Handler+0x90>)
   81a6e:	4c1d      	ldr	r4, [pc, #116]	; (81ae4 <Reset_Handler+0x94>)
   81a70:	1ae4      	subs	r4, r4, r3
   81a72:	f024 0403 	bic.w	r4, r4, #3
   81a76:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81a78:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   81a7a:	4814      	ldr	r0, [pc, #80]	; (81acc <Reset_Handler+0x7c>)
   81a7c:	4914      	ldr	r1, [pc, #80]	; (81ad0 <Reset_Handler+0x80>)
   81a7e:	585a      	ldr	r2, [r3, r1]
   81a80:	501a      	str	r2, [r3, r0]
   81a82:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81a84:	42a3      	cmp	r3, r4
   81a86:	d1fa      	bne.n	81a7e <Reset_Handler+0x2e>
   81a88:	e7eb      	b.n	81a62 <Reset_Handler+0x12>
   81a8a:	4b17      	ldr	r3, [pc, #92]	; (81ae8 <Reset_Handler+0x98>)
   81a8c:	4917      	ldr	r1, [pc, #92]	; (81aec <Reset_Handler+0x9c>)
   81a8e:	1ac9      	subs	r1, r1, r3
   81a90:	f021 0103 	bic.w	r1, r1, #3
   81a94:	1d1a      	adds	r2, r3, #4
   81a96:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81a98:	2200      	movs	r2, #0
   81a9a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81a9e:	428b      	cmp	r3, r1
   81aa0:	d1fb      	bne.n	81a9a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81aa2:	4a13      	ldr	r2, [pc, #76]	; (81af0 <Reset_Handler+0xa0>)
   81aa4:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81aa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81aac:	4911      	ldr	r1, [pc, #68]	; (81af4 <Reset_Handler+0xa4>)
   81aae:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81ab0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81ab4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81ab8:	d203      	bcs.n	81ac2 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81aba:	688a      	ldr	r2, [r1, #8]
   81abc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81ac0:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81ac2:	4b0d      	ldr	r3, [pc, #52]	; (81af8 <Reset_Handler+0xa8>)
   81ac4:	4798      	blx	r3

	/* Branch to main function */
	main();
   81ac6:	4b0d      	ldr	r3, [pc, #52]	; (81afc <Reset_Handler+0xac>)
   81ac8:	4798      	blx	r3
   81aca:	e7fe      	b.n	81aca <Reset_Handler+0x7a>
   81acc:	20070000 	.word	0x20070000
   81ad0:	00084ef8 	.word	0x00084ef8
   81ad4:	2007099c 	.word	0x2007099c
   81ad8:	20070b8c 	.word	0x20070b8c
   81adc:	2007099c 	.word	0x2007099c
   81ae0:	20070004 	.word	0x20070004
   81ae4:	2007099f 	.word	0x2007099f
   81ae8:	20070998 	.word	0x20070998
   81aec:	20070b87 	.word	0x20070b87
   81af0:	00080000 	.word	0x00080000
   81af4:	e000ed00 	.word	0xe000ed00
   81af8:	00081c6d 	.word	0x00081c6d
   81afc:	00081419 	.word	0x00081419

00081b00 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81b00:	4b3e      	ldr	r3, [pc, #248]	; (81bfc <SystemCoreClockUpdate+0xfc>)
   81b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b04:	f003 0303 	and.w	r3, r3, #3
   81b08:	2b03      	cmp	r3, #3
   81b0a:	d85f      	bhi.n	81bcc <SystemCoreClockUpdate+0xcc>
   81b0c:	e8df f003 	tbb	[pc, r3]
   81b10:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81b14:	4b3a      	ldr	r3, [pc, #232]	; (81c00 <SystemCoreClockUpdate+0x100>)
   81b16:	695b      	ldr	r3, [r3, #20]
   81b18:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81b1c:	bf14      	ite	ne
   81b1e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81b22:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81b26:	4b37      	ldr	r3, [pc, #220]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81b28:	601a      	str	r2, [r3, #0]
   81b2a:	e04f      	b.n	81bcc <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81b2c:	4b33      	ldr	r3, [pc, #204]	; (81bfc <SystemCoreClockUpdate+0xfc>)
   81b2e:	6a1b      	ldr	r3, [r3, #32]
   81b30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b34:	d003      	beq.n	81b3e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81b36:	4a34      	ldr	r2, [pc, #208]	; (81c08 <SystemCoreClockUpdate+0x108>)
   81b38:	4b32      	ldr	r3, [pc, #200]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81b3a:	601a      	str	r2, [r3, #0]
   81b3c:	e046      	b.n	81bcc <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81b3e:	4a33      	ldr	r2, [pc, #204]	; (81c0c <SystemCoreClockUpdate+0x10c>)
   81b40:	4b30      	ldr	r3, [pc, #192]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81b42:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81b44:	4b2d      	ldr	r3, [pc, #180]	; (81bfc <SystemCoreClockUpdate+0xfc>)
   81b46:	6a1b      	ldr	r3, [r3, #32]
   81b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b4c:	2b10      	cmp	r3, #16
   81b4e:	d002      	beq.n	81b56 <SystemCoreClockUpdate+0x56>
   81b50:	2b20      	cmp	r3, #32
   81b52:	d004      	beq.n	81b5e <SystemCoreClockUpdate+0x5e>
   81b54:	e03a      	b.n	81bcc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81b56:	4a2e      	ldr	r2, [pc, #184]	; (81c10 <SystemCoreClockUpdate+0x110>)
   81b58:	4b2a      	ldr	r3, [pc, #168]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81b5a:	601a      	str	r2, [r3, #0]
				break;
   81b5c:	e036      	b.n	81bcc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81b5e:	4a2a      	ldr	r2, [pc, #168]	; (81c08 <SystemCoreClockUpdate+0x108>)
   81b60:	4b28      	ldr	r3, [pc, #160]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81b62:	601a      	str	r2, [r3, #0]
				break;
   81b64:	e032      	b.n	81bcc <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81b66:	4b25      	ldr	r3, [pc, #148]	; (81bfc <SystemCoreClockUpdate+0xfc>)
   81b68:	6a1b      	ldr	r3, [r3, #32]
   81b6a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b6e:	d003      	beq.n	81b78 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81b70:	4a25      	ldr	r2, [pc, #148]	; (81c08 <SystemCoreClockUpdate+0x108>)
   81b72:	4b24      	ldr	r3, [pc, #144]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81b74:	601a      	str	r2, [r3, #0]
   81b76:	e012      	b.n	81b9e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81b78:	4a24      	ldr	r2, [pc, #144]	; (81c0c <SystemCoreClockUpdate+0x10c>)
   81b7a:	4b22      	ldr	r3, [pc, #136]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81b7c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81b7e:	4b1f      	ldr	r3, [pc, #124]	; (81bfc <SystemCoreClockUpdate+0xfc>)
   81b80:	6a1b      	ldr	r3, [r3, #32]
   81b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b86:	2b10      	cmp	r3, #16
   81b88:	d002      	beq.n	81b90 <SystemCoreClockUpdate+0x90>
   81b8a:	2b20      	cmp	r3, #32
   81b8c:	d004      	beq.n	81b98 <SystemCoreClockUpdate+0x98>
   81b8e:	e006      	b.n	81b9e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81b90:	4a1f      	ldr	r2, [pc, #124]	; (81c10 <SystemCoreClockUpdate+0x110>)
   81b92:	4b1c      	ldr	r3, [pc, #112]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81b94:	601a      	str	r2, [r3, #0]
				break;
   81b96:	e002      	b.n	81b9e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81b98:	4a1b      	ldr	r2, [pc, #108]	; (81c08 <SystemCoreClockUpdate+0x108>)
   81b9a:	4b1a      	ldr	r3, [pc, #104]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81b9c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81b9e:	4b17      	ldr	r3, [pc, #92]	; (81bfc <SystemCoreClockUpdate+0xfc>)
   81ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ba2:	f003 0303 	and.w	r3, r3, #3
   81ba6:	2b02      	cmp	r3, #2
   81ba8:	d10d      	bne.n	81bc6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81baa:	4b14      	ldr	r3, [pc, #80]	; (81bfc <SystemCoreClockUpdate+0xfc>)
   81bac:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81bae:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81bb0:	4b14      	ldr	r3, [pc, #80]	; (81c04 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81bb2:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81bb6:	681a      	ldr	r2, [r3, #0]
   81bb8:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81bbc:	b2c9      	uxtb	r1, r1
   81bbe:	fbb2 f2f1 	udiv	r2, r2, r1
   81bc2:	601a      	str	r2, [r3, #0]
   81bc4:	e002      	b.n	81bcc <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81bc6:	4a13      	ldr	r2, [pc, #76]	; (81c14 <SystemCoreClockUpdate+0x114>)
   81bc8:	4b0e      	ldr	r3, [pc, #56]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81bca:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81bcc:	4b0b      	ldr	r3, [pc, #44]	; (81bfc <SystemCoreClockUpdate+0xfc>)
   81bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81bd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81bd4:	2b70      	cmp	r3, #112	; 0x70
   81bd6:	d107      	bne.n	81be8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81bd8:	4b0a      	ldr	r3, [pc, #40]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81bda:	681a      	ldr	r2, [r3, #0]
   81bdc:	490e      	ldr	r1, [pc, #56]	; (81c18 <SystemCoreClockUpdate+0x118>)
   81bde:	fba1 0202 	umull	r0, r2, r1, r2
   81be2:	0852      	lsrs	r2, r2, #1
   81be4:	601a      	str	r2, [r3, #0]
   81be6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81be8:	4b04      	ldr	r3, [pc, #16]	; (81bfc <SystemCoreClockUpdate+0xfc>)
   81bea:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81bec:	4b05      	ldr	r3, [pc, #20]	; (81c04 <SystemCoreClockUpdate+0x104>)
   81bee:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81bf2:	681a      	ldr	r2, [r3, #0]
   81bf4:	40ca      	lsrs	r2, r1
   81bf6:	601a      	str	r2, [r3, #0]
   81bf8:	4770      	bx	lr
   81bfa:	bf00      	nop
   81bfc:	400e0600 	.word	0x400e0600
   81c00:	400e1a10 	.word	0x400e1a10
   81c04:	20070130 	.word	0x20070130
   81c08:	00b71b00 	.word	0x00b71b00
   81c0c:	003d0900 	.word	0x003d0900
   81c10:	007a1200 	.word	0x007a1200
   81c14:	0e4e1c00 	.word	0x0e4e1c00
   81c18:	aaaaaaab 	.word	0xaaaaaaab

00081c1c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81c1c:	4b09      	ldr	r3, [pc, #36]	; (81c44 <_sbrk+0x28>)
   81c1e:	681b      	ldr	r3, [r3, #0]
   81c20:	b913      	cbnz	r3, 81c28 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81c22:	4a09      	ldr	r2, [pc, #36]	; (81c48 <_sbrk+0x2c>)
   81c24:	4b07      	ldr	r3, [pc, #28]	; (81c44 <_sbrk+0x28>)
   81c26:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81c28:	4b06      	ldr	r3, [pc, #24]	; (81c44 <_sbrk+0x28>)
   81c2a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81c2c:	181a      	adds	r2, r3, r0
   81c2e:	4907      	ldr	r1, [pc, #28]	; (81c4c <_sbrk+0x30>)
   81c30:	4291      	cmp	r1, r2
   81c32:	db04      	blt.n	81c3e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81c34:	4610      	mov	r0, r2
   81c36:	4a03      	ldr	r2, [pc, #12]	; (81c44 <_sbrk+0x28>)
   81c38:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81c3a:	4618      	mov	r0, r3
   81c3c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81c3e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81c42:	4770      	bx	lr
   81c44:	20070ac8 	.word	0x20070ac8
   81c48:	20072b90 	.word	0x20072b90
   81c4c:	20087ffc 	.word	0x20087ffc

00081c50 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81c50:	f04f 30ff 	mov.w	r0, #4294967295
   81c54:	4770      	bx	lr
   81c56:	bf00      	nop

00081c58 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81c5c:	604b      	str	r3, [r1, #4]

	return 0;
}
   81c5e:	2000      	movs	r0, #0
   81c60:	4770      	bx	lr
   81c62:	bf00      	nop

00081c64 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81c64:	2001      	movs	r0, #1
   81c66:	4770      	bx	lr

00081c68 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81c68:	2000      	movs	r0, #0
   81c6a:	4770      	bx	lr

00081c6c <__libc_init_array>:
   81c6c:	b570      	push	{r4, r5, r6, lr}
   81c6e:	4e0f      	ldr	r6, [pc, #60]	; (81cac <__libc_init_array+0x40>)
   81c70:	4d0f      	ldr	r5, [pc, #60]	; (81cb0 <__libc_init_array+0x44>)
   81c72:	1b76      	subs	r6, r6, r5
   81c74:	10b6      	asrs	r6, r6, #2
   81c76:	d007      	beq.n	81c88 <__libc_init_array+0x1c>
   81c78:	3d04      	subs	r5, #4
   81c7a:	2400      	movs	r4, #0
   81c7c:	3401      	adds	r4, #1
   81c7e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81c82:	4798      	blx	r3
   81c84:	42a6      	cmp	r6, r4
   81c86:	d1f9      	bne.n	81c7c <__libc_init_array+0x10>
   81c88:	4e0a      	ldr	r6, [pc, #40]	; (81cb4 <__libc_init_array+0x48>)
   81c8a:	4d0b      	ldr	r5, [pc, #44]	; (81cb8 <__libc_init_array+0x4c>)
   81c8c:	f003 f91e 	bl	84ecc <_init>
   81c90:	1b76      	subs	r6, r6, r5
   81c92:	10b6      	asrs	r6, r6, #2
   81c94:	d008      	beq.n	81ca8 <__libc_init_array+0x3c>
   81c96:	3d04      	subs	r5, #4
   81c98:	2400      	movs	r4, #0
   81c9a:	3401      	adds	r4, #1
   81c9c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81ca0:	4798      	blx	r3
   81ca2:	42a6      	cmp	r6, r4
   81ca4:	d1f9      	bne.n	81c9a <__libc_init_array+0x2e>
   81ca6:	bd70      	pop	{r4, r5, r6, pc}
   81ca8:	bd70      	pop	{r4, r5, r6, pc}
   81caa:	bf00      	nop
   81cac:	00084ed8 	.word	0x00084ed8
   81cb0:	00084ed8 	.word	0x00084ed8
   81cb4:	00084ee0 	.word	0x00084ee0
   81cb8:	00084ed8 	.word	0x00084ed8

00081cbc <iprintf>:
   81cbc:	b40f      	push	{r0, r1, r2, r3}
   81cbe:	b510      	push	{r4, lr}
   81cc0:	4b07      	ldr	r3, [pc, #28]	; (81ce0 <iprintf+0x24>)
   81cc2:	b082      	sub	sp, #8
   81cc4:	ac04      	add	r4, sp, #16
   81cc6:	f854 2b04 	ldr.w	r2, [r4], #4
   81cca:	6818      	ldr	r0, [r3, #0]
   81ccc:	4623      	mov	r3, r4
   81cce:	6881      	ldr	r1, [r0, #8]
   81cd0:	9401      	str	r4, [sp, #4]
   81cd2:	f000 f923 	bl	81f1c <_vfiprintf_r>
   81cd6:	b002      	add	sp, #8
   81cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81cdc:	b004      	add	sp, #16
   81cde:	4770      	bx	lr
   81ce0:	20070560 	.word	0x20070560

00081ce4 <memset>:
   81ce4:	b4f0      	push	{r4, r5, r6, r7}
   81ce6:	0784      	lsls	r4, r0, #30
   81ce8:	d043      	beq.n	81d72 <memset+0x8e>
   81cea:	1e54      	subs	r4, r2, #1
   81cec:	2a00      	cmp	r2, #0
   81cee:	d03e      	beq.n	81d6e <memset+0x8a>
   81cf0:	b2cd      	uxtb	r5, r1
   81cf2:	4603      	mov	r3, r0
   81cf4:	e003      	b.n	81cfe <memset+0x1a>
   81cf6:	1e62      	subs	r2, r4, #1
   81cf8:	2c00      	cmp	r4, #0
   81cfa:	d038      	beq.n	81d6e <memset+0x8a>
   81cfc:	4614      	mov	r4, r2
   81cfe:	f803 5b01 	strb.w	r5, [r3], #1
   81d02:	079a      	lsls	r2, r3, #30
   81d04:	d1f7      	bne.n	81cf6 <memset+0x12>
   81d06:	2c03      	cmp	r4, #3
   81d08:	d92a      	bls.n	81d60 <memset+0x7c>
   81d0a:	b2cd      	uxtb	r5, r1
   81d0c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81d10:	2c0f      	cmp	r4, #15
   81d12:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81d16:	d915      	bls.n	81d44 <memset+0x60>
   81d18:	f1a4 0710 	sub.w	r7, r4, #16
   81d1c:	093f      	lsrs	r7, r7, #4
   81d1e:	f103 0610 	add.w	r6, r3, #16
   81d22:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81d26:	461a      	mov	r2, r3
   81d28:	6015      	str	r5, [r2, #0]
   81d2a:	6055      	str	r5, [r2, #4]
   81d2c:	6095      	str	r5, [r2, #8]
   81d2e:	60d5      	str	r5, [r2, #12]
   81d30:	3210      	adds	r2, #16
   81d32:	42b2      	cmp	r2, r6
   81d34:	d1f8      	bne.n	81d28 <memset+0x44>
   81d36:	f004 040f 	and.w	r4, r4, #15
   81d3a:	3701      	adds	r7, #1
   81d3c:	2c03      	cmp	r4, #3
   81d3e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81d42:	d90d      	bls.n	81d60 <memset+0x7c>
   81d44:	461e      	mov	r6, r3
   81d46:	4622      	mov	r2, r4
   81d48:	3a04      	subs	r2, #4
   81d4a:	2a03      	cmp	r2, #3
   81d4c:	f846 5b04 	str.w	r5, [r6], #4
   81d50:	d8fa      	bhi.n	81d48 <memset+0x64>
   81d52:	1f22      	subs	r2, r4, #4
   81d54:	f022 0203 	bic.w	r2, r2, #3
   81d58:	3204      	adds	r2, #4
   81d5a:	4413      	add	r3, r2
   81d5c:	f004 0403 	and.w	r4, r4, #3
   81d60:	b12c      	cbz	r4, 81d6e <memset+0x8a>
   81d62:	b2c9      	uxtb	r1, r1
   81d64:	441c      	add	r4, r3
   81d66:	f803 1b01 	strb.w	r1, [r3], #1
   81d6a:	42a3      	cmp	r3, r4
   81d6c:	d1fb      	bne.n	81d66 <memset+0x82>
   81d6e:	bcf0      	pop	{r4, r5, r6, r7}
   81d70:	4770      	bx	lr
   81d72:	4614      	mov	r4, r2
   81d74:	4603      	mov	r3, r0
   81d76:	e7c6      	b.n	81d06 <memset+0x22>

00081d78 <setbuf>:
   81d78:	2900      	cmp	r1, #0
   81d7a:	bf0c      	ite	eq
   81d7c:	2202      	moveq	r2, #2
   81d7e:	2200      	movne	r2, #0
   81d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81d84:	f000 b80e 	b.w	81da4 <setvbuf>

00081d88 <setjmp>:
   81d88:	46ec      	mov	ip, sp
   81d8a:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d8e:	f04f 0000 	mov.w	r0, #0
   81d92:	4770      	bx	lr

00081d94 <longjmp>:
   81d94:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81d98:	46e5      	mov	sp, ip
   81d9a:	0008      	movs	r0, r1
   81d9c:	bf08      	it	eq
   81d9e:	2001      	moveq	r0, #1
   81da0:	4770      	bx	lr
   81da2:	bf00      	nop

00081da4 <setvbuf>:
   81da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81da8:	4d3c      	ldr	r5, [pc, #240]	; (81e9c <setvbuf+0xf8>)
   81daa:	4604      	mov	r4, r0
   81dac:	682d      	ldr	r5, [r5, #0]
   81dae:	4688      	mov	r8, r1
   81db0:	4616      	mov	r6, r2
   81db2:	461f      	mov	r7, r3
   81db4:	b115      	cbz	r5, 81dbc <setvbuf+0x18>
   81db6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81db8:	2b00      	cmp	r3, #0
   81dba:	d04f      	beq.n	81e5c <setvbuf+0xb8>
   81dbc:	2e02      	cmp	r6, #2
   81dbe:	d830      	bhi.n	81e22 <setvbuf+0x7e>
   81dc0:	2f00      	cmp	r7, #0
   81dc2:	db2e      	blt.n	81e22 <setvbuf+0x7e>
   81dc4:	4628      	mov	r0, r5
   81dc6:	4621      	mov	r1, r4
   81dc8:	f001 f87a 	bl	82ec0 <_fflush_r>
   81dcc:	89a3      	ldrh	r3, [r4, #12]
   81dce:	2200      	movs	r2, #0
   81dd0:	6062      	str	r2, [r4, #4]
   81dd2:	61a2      	str	r2, [r4, #24]
   81dd4:	061a      	lsls	r2, r3, #24
   81dd6:	d428      	bmi.n	81e2a <setvbuf+0x86>
   81dd8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81ddc:	b29b      	uxth	r3, r3
   81dde:	2e02      	cmp	r6, #2
   81de0:	81a3      	strh	r3, [r4, #12]
   81de2:	d02d      	beq.n	81e40 <setvbuf+0x9c>
   81de4:	f1b8 0f00 	cmp.w	r8, #0
   81de8:	d03c      	beq.n	81e64 <setvbuf+0xc0>
   81dea:	2e01      	cmp	r6, #1
   81dec:	d013      	beq.n	81e16 <setvbuf+0x72>
   81dee:	b29b      	uxth	r3, r3
   81df0:	f003 0008 	and.w	r0, r3, #8
   81df4:	4a2a      	ldr	r2, [pc, #168]	; (81ea0 <setvbuf+0xfc>)
   81df6:	b280      	uxth	r0, r0
   81df8:	63ea      	str	r2, [r5, #60]	; 0x3c
   81dfa:	f8c4 8000 	str.w	r8, [r4]
   81dfe:	f8c4 8010 	str.w	r8, [r4, #16]
   81e02:	6167      	str	r7, [r4, #20]
   81e04:	b178      	cbz	r0, 81e26 <setvbuf+0x82>
   81e06:	f013 0f03 	tst.w	r3, #3
   81e0a:	bf18      	it	ne
   81e0c:	2700      	movne	r7, #0
   81e0e:	60a7      	str	r7, [r4, #8]
   81e10:	2000      	movs	r0, #0
   81e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e16:	f043 0301 	orr.w	r3, r3, #1
   81e1a:	427a      	negs	r2, r7
   81e1c:	81a3      	strh	r3, [r4, #12]
   81e1e:	61a2      	str	r2, [r4, #24]
   81e20:	e7e5      	b.n	81dee <setvbuf+0x4a>
   81e22:	f04f 30ff 	mov.w	r0, #4294967295
   81e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e2a:	4628      	mov	r0, r5
   81e2c:	6921      	ldr	r1, [r4, #16]
   81e2e:	f001 f9a7 	bl	83180 <_free_r>
   81e32:	89a3      	ldrh	r3, [r4, #12]
   81e34:	2e02      	cmp	r6, #2
   81e36:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81e3a:	b29b      	uxth	r3, r3
   81e3c:	81a3      	strh	r3, [r4, #12]
   81e3e:	d1d1      	bne.n	81de4 <setvbuf+0x40>
   81e40:	2000      	movs	r0, #0
   81e42:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81e46:	f043 0302 	orr.w	r3, r3, #2
   81e4a:	2500      	movs	r5, #0
   81e4c:	2101      	movs	r1, #1
   81e4e:	81a3      	strh	r3, [r4, #12]
   81e50:	60a5      	str	r5, [r4, #8]
   81e52:	6022      	str	r2, [r4, #0]
   81e54:	6122      	str	r2, [r4, #16]
   81e56:	6161      	str	r1, [r4, #20]
   81e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e5c:	4628      	mov	r0, r5
   81e5e:	f001 f84b 	bl	82ef8 <__sinit>
   81e62:	e7ab      	b.n	81dbc <setvbuf+0x18>
   81e64:	2f00      	cmp	r7, #0
   81e66:	bf08      	it	eq
   81e68:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81e6c:	4638      	mov	r0, r7
   81e6e:	f001 fc7d 	bl	8376c <malloc>
   81e72:	4680      	mov	r8, r0
   81e74:	b128      	cbz	r0, 81e82 <setvbuf+0xde>
   81e76:	89a3      	ldrh	r3, [r4, #12]
   81e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81e7c:	b29b      	uxth	r3, r3
   81e7e:	81a3      	strh	r3, [r4, #12]
   81e80:	e7b3      	b.n	81dea <setvbuf+0x46>
   81e82:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81e86:	f001 fc71 	bl	8376c <malloc>
   81e8a:	4680      	mov	r8, r0
   81e8c:	b918      	cbnz	r0, 81e96 <setvbuf+0xf2>
   81e8e:	89a3      	ldrh	r3, [r4, #12]
   81e90:	f04f 30ff 	mov.w	r0, #4294967295
   81e94:	e7d5      	b.n	81e42 <setvbuf+0x9e>
   81e96:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81e9a:	e7ec      	b.n	81e76 <setvbuf+0xd2>
   81e9c:	20070560 	.word	0x20070560
   81ea0:	00082eed 	.word	0x00082eed

00081ea4 <__sprint_r.part.0>:
   81ea4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81eaa:	049c      	lsls	r4, r3, #18
   81eac:	460e      	mov	r6, r1
   81eae:	4680      	mov	r8, r0
   81eb0:	4691      	mov	r9, r2
   81eb2:	d52a      	bpl.n	81f0a <__sprint_r.part.0+0x66>
   81eb4:	6893      	ldr	r3, [r2, #8]
   81eb6:	6812      	ldr	r2, [r2, #0]
   81eb8:	f102 0a08 	add.w	sl, r2, #8
   81ebc:	b31b      	cbz	r3, 81f06 <__sprint_r.part.0+0x62>
   81ebe:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81ec2:	08bf      	lsrs	r7, r7, #2
   81ec4:	d017      	beq.n	81ef6 <__sprint_r.part.0+0x52>
   81ec6:	3d04      	subs	r5, #4
   81ec8:	2400      	movs	r4, #0
   81eca:	e001      	b.n	81ed0 <__sprint_r.part.0+0x2c>
   81ecc:	42a7      	cmp	r7, r4
   81ece:	d010      	beq.n	81ef2 <__sprint_r.part.0+0x4e>
   81ed0:	4640      	mov	r0, r8
   81ed2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81ed6:	4632      	mov	r2, r6
   81ed8:	f001 f8a4 	bl	83024 <_fputwc_r>
   81edc:	1c43      	adds	r3, r0, #1
   81ede:	f104 0401 	add.w	r4, r4, #1
   81ee2:	d1f3      	bne.n	81ecc <__sprint_r.part.0+0x28>
   81ee4:	2300      	movs	r3, #0
   81ee6:	f8c9 3008 	str.w	r3, [r9, #8]
   81eea:	f8c9 3004 	str.w	r3, [r9, #4]
   81eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81ef2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81ef6:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81efa:	f8c9 3008 	str.w	r3, [r9, #8]
   81efe:	f10a 0a08 	add.w	sl, sl, #8
   81f02:	2b00      	cmp	r3, #0
   81f04:	d1db      	bne.n	81ebe <__sprint_r.part.0+0x1a>
   81f06:	2000      	movs	r0, #0
   81f08:	e7ec      	b.n	81ee4 <__sprint_r.part.0+0x40>
   81f0a:	f001 fa05 	bl	83318 <__sfvwrite_r>
   81f0e:	2300      	movs	r3, #0
   81f10:	f8c9 3008 	str.w	r3, [r9, #8]
   81f14:	f8c9 3004 	str.w	r3, [r9, #4]
   81f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081f1c <_vfiprintf_r>:
   81f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81f20:	b0b1      	sub	sp, #196	; 0xc4
   81f22:	461c      	mov	r4, r3
   81f24:	9102      	str	r1, [sp, #8]
   81f26:	4690      	mov	r8, r2
   81f28:	9308      	str	r3, [sp, #32]
   81f2a:	9006      	str	r0, [sp, #24]
   81f2c:	b118      	cbz	r0, 81f36 <_vfiprintf_r+0x1a>
   81f2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81f30:	2b00      	cmp	r3, #0
   81f32:	f000 80e8 	beq.w	82106 <_vfiprintf_r+0x1ea>
   81f36:	9d02      	ldr	r5, [sp, #8]
   81f38:	89ab      	ldrh	r3, [r5, #12]
   81f3a:	b29a      	uxth	r2, r3
   81f3c:	0490      	lsls	r0, r2, #18
   81f3e:	d407      	bmi.n	81f50 <_vfiprintf_r+0x34>
   81f40:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81f42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81f46:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81f4a:	81ab      	strh	r3, [r5, #12]
   81f4c:	b29a      	uxth	r2, r3
   81f4e:	6669      	str	r1, [r5, #100]	; 0x64
   81f50:	0711      	lsls	r1, r2, #28
   81f52:	f140 80b7 	bpl.w	820c4 <_vfiprintf_r+0x1a8>
   81f56:	f8dd b008 	ldr.w	fp, [sp, #8]
   81f5a:	f8db 3010 	ldr.w	r3, [fp, #16]
   81f5e:	2b00      	cmp	r3, #0
   81f60:	f000 80b0 	beq.w	820c4 <_vfiprintf_r+0x1a8>
   81f64:	f002 021a 	and.w	r2, r2, #26
   81f68:	2a0a      	cmp	r2, #10
   81f6a:	f000 80b7 	beq.w	820dc <_vfiprintf_r+0x1c0>
   81f6e:	2300      	movs	r3, #0
   81f70:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81f74:	930a      	str	r3, [sp, #40]	; 0x28
   81f76:	9315      	str	r3, [sp, #84]	; 0x54
   81f78:	9314      	str	r3, [sp, #80]	; 0x50
   81f7a:	9309      	str	r3, [sp, #36]	; 0x24
   81f7c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81f80:	464e      	mov	r6, r9
   81f82:	f898 3000 	ldrb.w	r3, [r8]
   81f86:	2b00      	cmp	r3, #0
   81f88:	f000 84c8 	beq.w	8291c <_vfiprintf_r+0xa00>
   81f8c:	2b25      	cmp	r3, #37	; 0x25
   81f8e:	f000 84c5 	beq.w	8291c <_vfiprintf_r+0xa00>
   81f92:	f108 0201 	add.w	r2, r8, #1
   81f96:	e001      	b.n	81f9c <_vfiprintf_r+0x80>
   81f98:	2b25      	cmp	r3, #37	; 0x25
   81f9a:	d004      	beq.n	81fa6 <_vfiprintf_r+0x8a>
   81f9c:	7813      	ldrb	r3, [r2, #0]
   81f9e:	4614      	mov	r4, r2
   81fa0:	3201      	adds	r2, #1
   81fa2:	2b00      	cmp	r3, #0
   81fa4:	d1f8      	bne.n	81f98 <_vfiprintf_r+0x7c>
   81fa6:	ebc8 0504 	rsb	r5, r8, r4
   81faa:	b195      	cbz	r5, 81fd2 <_vfiprintf_r+0xb6>
   81fac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81fae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81fb0:	3301      	adds	r3, #1
   81fb2:	442a      	add	r2, r5
   81fb4:	2b07      	cmp	r3, #7
   81fb6:	f8c6 8000 	str.w	r8, [r6]
   81fba:	6075      	str	r5, [r6, #4]
   81fbc:	9215      	str	r2, [sp, #84]	; 0x54
   81fbe:	9314      	str	r3, [sp, #80]	; 0x50
   81fc0:	dd7b      	ble.n	820ba <_vfiprintf_r+0x19e>
   81fc2:	2a00      	cmp	r2, #0
   81fc4:	f040 84d5 	bne.w	82972 <_vfiprintf_r+0xa56>
   81fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
   81fca:	9214      	str	r2, [sp, #80]	; 0x50
   81fcc:	4428      	add	r0, r5
   81fce:	464e      	mov	r6, r9
   81fd0:	9009      	str	r0, [sp, #36]	; 0x24
   81fd2:	7823      	ldrb	r3, [r4, #0]
   81fd4:	2b00      	cmp	r3, #0
   81fd6:	f000 83ed 	beq.w	827b4 <_vfiprintf_r+0x898>
   81fda:	2100      	movs	r1, #0
   81fdc:	f04f 0200 	mov.w	r2, #0
   81fe0:	f04f 3cff 	mov.w	ip, #4294967295
   81fe4:	7863      	ldrb	r3, [r4, #1]
   81fe6:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81fea:	9104      	str	r1, [sp, #16]
   81fec:	468a      	mov	sl, r1
   81fee:	f104 0801 	add.w	r8, r4, #1
   81ff2:	4608      	mov	r0, r1
   81ff4:	4665      	mov	r5, ip
   81ff6:	f108 0801 	add.w	r8, r8, #1
   81ffa:	f1a3 0220 	sub.w	r2, r3, #32
   81ffe:	2a58      	cmp	r2, #88	; 0x58
   82000:	f200 82d9 	bhi.w	825b6 <_vfiprintf_r+0x69a>
   82004:	e8df f012 	tbh	[pc, r2, lsl #1]
   82008:	02d702cb 	.word	0x02d702cb
   8200c:	02d202d7 	.word	0x02d202d7
   82010:	02d702d7 	.word	0x02d702d7
   82014:	02d702d7 	.word	0x02d702d7
   82018:	02d702d7 	.word	0x02d702d7
   8201c:	028f0282 	.word	0x028f0282
   82020:	008402d7 	.word	0x008402d7
   82024:	02d70293 	.word	0x02d70293
   82028:	0196012b 	.word	0x0196012b
   8202c:	01960196 	.word	0x01960196
   82030:	01960196 	.word	0x01960196
   82034:	01960196 	.word	0x01960196
   82038:	01960196 	.word	0x01960196
   8203c:	02d702d7 	.word	0x02d702d7
   82040:	02d702d7 	.word	0x02d702d7
   82044:	02d702d7 	.word	0x02d702d7
   82048:	02d702d7 	.word	0x02d702d7
   8204c:	02d702d7 	.word	0x02d702d7
   82050:	02d70130 	.word	0x02d70130
   82054:	02d702d7 	.word	0x02d702d7
   82058:	02d702d7 	.word	0x02d702d7
   8205c:	02d702d7 	.word	0x02d702d7
   82060:	02d702d7 	.word	0x02d702d7
   82064:	017b02d7 	.word	0x017b02d7
   82068:	02d702d7 	.word	0x02d702d7
   8206c:	02d702d7 	.word	0x02d702d7
   82070:	01a402d7 	.word	0x01a402d7
   82074:	02d702d7 	.word	0x02d702d7
   82078:	02d701bf 	.word	0x02d701bf
   8207c:	02d702d7 	.word	0x02d702d7
   82080:	02d702d7 	.word	0x02d702d7
   82084:	02d702d7 	.word	0x02d702d7
   82088:	02d702d7 	.word	0x02d702d7
   8208c:	01e402d7 	.word	0x01e402d7
   82090:	02d701fa 	.word	0x02d701fa
   82094:	02d702d7 	.word	0x02d702d7
   82098:	01fa0216 	.word	0x01fa0216
   8209c:	02d702d7 	.word	0x02d702d7
   820a0:	02d7021b 	.word	0x02d7021b
   820a4:	00890228 	.word	0x00890228
   820a8:	027d0266 	.word	0x027d0266
   820ac:	023a02d7 	.word	0x023a02d7
   820b0:	011902d7 	.word	0x011902d7
   820b4:	02d702d7 	.word	0x02d702d7
   820b8:	02af      	.short	0x02af
   820ba:	3608      	adds	r6, #8
   820bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   820be:	4428      	add	r0, r5
   820c0:	9009      	str	r0, [sp, #36]	; 0x24
   820c2:	e786      	b.n	81fd2 <_vfiprintf_r+0xb6>
   820c4:	9806      	ldr	r0, [sp, #24]
   820c6:	9902      	ldr	r1, [sp, #8]
   820c8:	f000 fde4 	bl	82c94 <__swsetup_r>
   820cc:	b9b0      	cbnz	r0, 820fc <_vfiprintf_r+0x1e0>
   820ce:	9d02      	ldr	r5, [sp, #8]
   820d0:	89aa      	ldrh	r2, [r5, #12]
   820d2:	f002 021a 	and.w	r2, r2, #26
   820d6:	2a0a      	cmp	r2, #10
   820d8:	f47f af49 	bne.w	81f6e <_vfiprintf_r+0x52>
   820dc:	f8dd b008 	ldr.w	fp, [sp, #8]
   820e0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   820e4:	2b00      	cmp	r3, #0
   820e6:	f6ff af42 	blt.w	81f6e <_vfiprintf_r+0x52>
   820ea:	9806      	ldr	r0, [sp, #24]
   820ec:	4659      	mov	r1, fp
   820ee:	4642      	mov	r2, r8
   820f0:	4623      	mov	r3, r4
   820f2:	f000 fd3d 	bl	82b70 <__sbprintf>
   820f6:	b031      	add	sp, #196	; 0xc4
   820f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820fc:	f04f 30ff 	mov.w	r0, #4294967295
   82100:	b031      	add	sp, #196	; 0xc4
   82102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82106:	f000 fef7 	bl	82ef8 <__sinit>
   8210a:	e714      	b.n	81f36 <_vfiprintf_r+0x1a>
   8210c:	4240      	negs	r0, r0
   8210e:	9308      	str	r3, [sp, #32]
   82110:	f04a 0a04 	orr.w	sl, sl, #4
   82114:	f898 3000 	ldrb.w	r3, [r8]
   82118:	e76d      	b.n	81ff6 <_vfiprintf_r+0xda>
   8211a:	f01a 0320 	ands.w	r3, sl, #32
   8211e:	9004      	str	r0, [sp, #16]
   82120:	46ac      	mov	ip, r5
   82122:	f000 80f4 	beq.w	8230e <_vfiprintf_r+0x3f2>
   82126:	f8dd b020 	ldr.w	fp, [sp, #32]
   8212a:	f10b 0307 	add.w	r3, fp, #7
   8212e:	f023 0307 	bic.w	r3, r3, #7
   82132:	f103 0408 	add.w	r4, r3, #8
   82136:	9408      	str	r4, [sp, #32]
   82138:	e9d3 4500 	ldrd	r4, r5, [r3]
   8213c:	2300      	movs	r3, #0
   8213e:	f04f 0000 	mov.w	r0, #0
   82142:	2100      	movs	r1, #0
   82144:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   82148:	f8cd c014 	str.w	ip, [sp, #20]
   8214c:	9107      	str	r1, [sp, #28]
   8214e:	f1bc 0f00 	cmp.w	ip, #0
   82152:	bfa8      	it	ge
   82154:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82158:	ea54 0205 	orrs.w	r2, r4, r5
   8215c:	f040 80ad 	bne.w	822ba <_vfiprintf_r+0x39e>
   82160:	f1bc 0f00 	cmp.w	ip, #0
   82164:	f040 80a9 	bne.w	822ba <_vfiprintf_r+0x39e>
   82168:	2b00      	cmp	r3, #0
   8216a:	f040 83c0 	bne.w	828ee <_vfiprintf_r+0x9d2>
   8216e:	f01a 0f01 	tst.w	sl, #1
   82172:	f000 83bc 	beq.w	828ee <_vfiprintf_r+0x9d2>
   82176:	2330      	movs	r3, #48	; 0x30
   82178:	af30      	add	r7, sp, #192	; 0xc0
   8217a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8217e:	ebc7 0409 	rsb	r4, r7, r9
   82182:	9405      	str	r4, [sp, #20]
   82184:	f8dd b014 	ldr.w	fp, [sp, #20]
   82188:	9c07      	ldr	r4, [sp, #28]
   8218a:	45e3      	cmp	fp, ip
   8218c:	bfb8      	it	lt
   8218e:	46e3      	movlt	fp, ip
   82190:	f8cd b00c 	str.w	fp, [sp, #12]
   82194:	b11c      	cbz	r4, 8219e <_vfiprintf_r+0x282>
   82196:	f10b 0b01 	add.w	fp, fp, #1
   8219a:	f8cd b00c 	str.w	fp, [sp, #12]
   8219e:	f01a 0502 	ands.w	r5, sl, #2
   821a2:	9507      	str	r5, [sp, #28]
   821a4:	d005      	beq.n	821b2 <_vfiprintf_r+0x296>
   821a6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   821aa:	f10b 0b02 	add.w	fp, fp, #2
   821ae:	f8cd b00c 	str.w	fp, [sp, #12]
   821b2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   821b6:	930b      	str	r3, [sp, #44]	; 0x2c
   821b8:	f040 821b 	bne.w	825f2 <_vfiprintf_r+0x6d6>
   821bc:	9d04      	ldr	r5, [sp, #16]
   821be:	f8dd b00c 	ldr.w	fp, [sp, #12]
   821c2:	ebcb 0405 	rsb	r4, fp, r5
   821c6:	2c00      	cmp	r4, #0
   821c8:	f340 8213 	ble.w	825f2 <_vfiprintf_r+0x6d6>
   821cc:	2c10      	cmp	r4, #16
   821ce:	f340 8489 	ble.w	82ae4 <_vfiprintf_r+0xbc8>
   821d2:	4dbe      	ldr	r5, [pc, #760]	; (824cc <_vfiprintf_r+0x5b0>)
   821d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   821d6:	462b      	mov	r3, r5
   821d8:	9814      	ldr	r0, [sp, #80]	; 0x50
   821da:	4625      	mov	r5, r4
   821dc:	f04f 0b10 	mov.w	fp, #16
   821e0:	4664      	mov	r4, ip
   821e2:	46b4      	mov	ip, r6
   821e4:	461e      	mov	r6, r3
   821e6:	e006      	b.n	821f6 <_vfiprintf_r+0x2da>
   821e8:	1c83      	adds	r3, r0, #2
   821ea:	f10c 0c08 	add.w	ip, ip, #8
   821ee:	4608      	mov	r0, r1
   821f0:	3d10      	subs	r5, #16
   821f2:	2d10      	cmp	r5, #16
   821f4:	dd11      	ble.n	8221a <_vfiprintf_r+0x2fe>
   821f6:	1c41      	adds	r1, r0, #1
   821f8:	3210      	adds	r2, #16
   821fa:	2907      	cmp	r1, #7
   821fc:	9215      	str	r2, [sp, #84]	; 0x54
   821fe:	e88c 0840 	stmia.w	ip, {r6, fp}
   82202:	9114      	str	r1, [sp, #80]	; 0x50
   82204:	ddf0      	ble.n	821e8 <_vfiprintf_r+0x2cc>
   82206:	2a00      	cmp	r2, #0
   82208:	f040 81e6 	bne.w	825d8 <_vfiprintf_r+0x6bc>
   8220c:	3d10      	subs	r5, #16
   8220e:	2d10      	cmp	r5, #16
   82210:	f04f 0301 	mov.w	r3, #1
   82214:	4610      	mov	r0, r2
   82216:	46cc      	mov	ip, r9
   82218:	dced      	bgt.n	821f6 <_vfiprintf_r+0x2da>
   8221a:	4631      	mov	r1, r6
   8221c:	4666      	mov	r6, ip
   8221e:	46a4      	mov	ip, r4
   82220:	462c      	mov	r4, r5
   82222:	460d      	mov	r5, r1
   82224:	4422      	add	r2, r4
   82226:	2b07      	cmp	r3, #7
   82228:	9215      	str	r2, [sp, #84]	; 0x54
   8222a:	6035      	str	r5, [r6, #0]
   8222c:	6074      	str	r4, [r6, #4]
   8222e:	9314      	str	r3, [sp, #80]	; 0x50
   82230:	f300 836d 	bgt.w	8290e <_vfiprintf_r+0x9f2>
   82234:	3608      	adds	r6, #8
   82236:	1c59      	adds	r1, r3, #1
   82238:	e1de      	b.n	825f8 <_vfiprintf_r+0x6dc>
   8223a:	f01a 0f20 	tst.w	sl, #32
   8223e:	9004      	str	r0, [sp, #16]
   82240:	46ac      	mov	ip, r5
   82242:	f000 808d 	beq.w	82360 <_vfiprintf_r+0x444>
   82246:	9d08      	ldr	r5, [sp, #32]
   82248:	1deb      	adds	r3, r5, #7
   8224a:	f023 0307 	bic.w	r3, r3, #7
   8224e:	f103 0b08 	add.w	fp, r3, #8
   82252:	e9d3 4500 	ldrd	r4, r5, [r3]
   82256:	f8cd b020 	str.w	fp, [sp, #32]
   8225a:	2301      	movs	r3, #1
   8225c:	e76f      	b.n	8213e <_vfiprintf_r+0x222>
   8225e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   82262:	f898 3000 	ldrb.w	r3, [r8]
   82266:	e6c6      	b.n	81ff6 <_vfiprintf_r+0xda>
   82268:	f04a 0a10 	orr.w	sl, sl, #16
   8226c:	f01a 0f20 	tst.w	sl, #32
   82270:	9004      	str	r0, [sp, #16]
   82272:	46ac      	mov	ip, r5
   82274:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82278:	f000 80c8 	beq.w	8240c <_vfiprintf_r+0x4f0>
   8227c:	9c08      	ldr	r4, [sp, #32]
   8227e:	1de1      	adds	r1, r4, #7
   82280:	f021 0107 	bic.w	r1, r1, #7
   82284:	e9d1 2300 	ldrd	r2, r3, [r1]
   82288:	3108      	adds	r1, #8
   8228a:	9108      	str	r1, [sp, #32]
   8228c:	4614      	mov	r4, r2
   8228e:	461d      	mov	r5, r3
   82290:	2a00      	cmp	r2, #0
   82292:	f173 0b00 	sbcs.w	fp, r3, #0
   82296:	f2c0 83ce 	blt.w	82a36 <_vfiprintf_r+0xb1a>
   8229a:	f1bc 0f00 	cmp.w	ip, #0
   8229e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   822a2:	bfa8      	it	ge
   822a4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   822a8:	ea54 0205 	orrs.w	r2, r4, r5
   822ac:	9007      	str	r0, [sp, #28]
   822ae:	f8cd c014 	str.w	ip, [sp, #20]
   822b2:	f04f 0301 	mov.w	r3, #1
   822b6:	f43f af53 	beq.w	82160 <_vfiprintf_r+0x244>
   822ba:	2b01      	cmp	r3, #1
   822bc:	f000 8319 	beq.w	828f2 <_vfiprintf_r+0x9d6>
   822c0:	2b02      	cmp	r3, #2
   822c2:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   822c6:	f040 824c 	bne.w	82762 <_vfiprintf_r+0x846>
   822ca:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   822ce:	4619      	mov	r1, r3
   822d0:	f004 000f 	and.w	r0, r4, #15
   822d4:	0922      	lsrs	r2, r4, #4
   822d6:	f81b 0000 	ldrb.w	r0, [fp, r0]
   822da:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   822de:	092b      	lsrs	r3, r5, #4
   822e0:	7008      	strb	r0, [r1, #0]
   822e2:	ea52 0003 	orrs.w	r0, r2, r3
   822e6:	460f      	mov	r7, r1
   822e8:	4614      	mov	r4, r2
   822ea:	461d      	mov	r5, r3
   822ec:	f101 31ff 	add.w	r1, r1, #4294967295
   822f0:	d1ee      	bne.n	822d0 <_vfiprintf_r+0x3b4>
   822f2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   822f6:	ebc7 0309 	rsb	r3, r7, r9
   822fa:	9305      	str	r3, [sp, #20]
   822fc:	e742      	b.n	82184 <_vfiprintf_r+0x268>
   822fe:	f04a 0a10 	orr.w	sl, sl, #16
   82302:	f01a 0320 	ands.w	r3, sl, #32
   82306:	9004      	str	r0, [sp, #16]
   82308:	46ac      	mov	ip, r5
   8230a:	f47f af0c 	bne.w	82126 <_vfiprintf_r+0x20a>
   8230e:	f01a 0210 	ands.w	r2, sl, #16
   82312:	f040 8311 	bne.w	82938 <_vfiprintf_r+0xa1c>
   82316:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8231a:	f000 830d 	beq.w	82938 <_vfiprintf_r+0xa1c>
   8231e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82322:	4613      	mov	r3, r2
   82324:	f8bb 4000 	ldrh.w	r4, [fp]
   82328:	f10b 0b04 	add.w	fp, fp, #4
   8232c:	2500      	movs	r5, #0
   8232e:	f8cd b020 	str.w	fp, [sp, #32]
   82332:	e704      	b.n	8213e <_vfiprintf_r+0x222>
   82334:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82338:	2000      	movs	r0, #0
   8233a:	f818 3b01 	ldrb.w	r3, [r8], #1
   8233e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82342:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   82346:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8234a:	2a09      	cmp	r2, #9
   8234c:	d9f5      	bls.n	8233a <_vfiprintf_r+0x41e>
   8234e:	e654      	b.n	81ffa <_vfiprintf_r+0xde>
   82350:	f04a 0a10 	orr.w	sl, sl, #16
   82354:	f01a 0f20 	tst.w	sl, #32
   82358:	9004      	str	r0, [sp, #16]
   8235a:	46ac      	mov	ip, r5
   8235c:	f47f af73 	bne.w	82246 <_vfiprintf_r+0x32a>
   82360:	f01a 0f10 	tst.w	sl, #16
   82364:	f040 82ef 	bne.w	82946 <_vfiprintf_r+0xa2a>
   82368:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8236c:	f000 82eb 	beq.w	82946 <_vfiprintf_r+0xa2a>
   82370:	f8dd b020 	ldr.w	fp, [sp, #32]
   82374:	2500      	movs	r5, #0
   82376:	f8bb 4000 	ldrh.w	r4, [fp]
   8237a:	f10b 0b04 	add.w	fp, fp, #4
   8237e:	2301      	movs	r3, #1
   82380:	f8cd b020 	str.w	fp, [sp, #32]
   82384:	e6db      	b.n	8213e <_vfiprintf_r+0x222>
   82386:	46ac      	mov	ip, r5
   82388:	4d51      	ldr	r5, [pc, #324]	; (824d0 <_vfiprintf_r+0x5b4>)
   8238a:	f01a 0f20 	tst.w	sl, #32
   8238e:	9004      	str	r0, [sp, #16]
   82390:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82394:	950a      	str	r5, [sp, #40]	; 0x28
   82396:	f000 80f0 	beq.w	8257a <_vfiprintf_r+0x65e>
   8239a:	9d08      	ldr	r5, [sp, #32]
   8239c:	1dea      	adds	r2, r5, #7
   8239e:	f022 0207 	bic.w	r2, r2, #7
   823a2:	f102 0b08 	add.w	fp, r2, #8
   823a6:	f8cd b020 	str.w	fp, [sp, #32]
   823aa:	e9d2 4500 	ldrd	r4, r5, [r2]
   823ae:	f01a 0f01 	tst.w	sl, #1
   823b2:	f000 82aa 	beq.w	8290a <_vfiprintf_r+0x9ee>
   823b6:	ea54 0b05 	orrs.w	fp, r4, r5
   823ba:	f000 82a6 	beq.w	8290a <_vfiprintf_r+0x9ee>
   823be:	2230      	movs	r2, #48	; 0x30
   823c0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   823c4:	f04a 0a02 	orr.w	sl, sl, #2
   823c8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   823cc:	2302      	movs	r3, #2
   823ce:	e6b6      	b.n	8213e <_vfiprintf_r+0x222>
   823d0:	9b08      	ldr	r3, [sp, #32]
   823d2:	f8dd b020 	ldr.w	fp, [sp, #32]
   823d6:	681b      	ldr	r3, [r3, #0]
   823d8:	2401      	movs	r4, #1
   823da:	f04f 0500 	mov.w	r5, #0
   823de:	f10b 0b04 	add.w	fp, fp, #4
   823e2:	9004      	str	r0, [sp, #16]
   823e4:	9403      	str	r4, [sp, #12]
   823e6:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   823ea:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   823ee:	f8cd b020 	str.w	fp, [sp, #32]
   823f2:	9405      	str	r4, [sp, #20]
   823f4:	af16      	add	r7, sp, #88	; 0x58
   823f6:	f04f 0c00 	mov.w	ip, #0
   823fa:	e6d0      	b.n	8219e <_vfiprintf_r+0x282>
   823fc:	f01a 0f20 	tst.w	sl, #32
   82400:	9004      	str	r0, [sp, #16]
   82402:	46ac      	mov	ip, r5
   82404:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82408:	f47f af38 	bne.w	8227c <_vfiprintf_r+0x360>
   8240c:	f01a 0f10 	tst.w	sl, #16
   82410:	f040 82a7 	bne.w	82962 <_vfiprintf_r+0xa46>
   82414:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82418:	f000 82a3 	beq.w	82962 <_vfiprintf_r+0xa46>
   8241c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82420:	f9bb 4000 	ldrsh.w	r4, [fp]
   82424:	f10b 0b04 	add.w	fp, fp, #4
   82428:	17e5      	asrs	r5, r4, #31
   8242a:	4622      	mov	r2, r4
   8242c:	462b      	mov	r3, r5
   8242e:	f8cd b020 	str.w	fp, [sp, #32]
   82432:	e72d      	b.n	82290 <_vfiprintf_r+0x374>
   82434:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   82438:	f898 3000 	ldrb.w	r3, [r8]
   8243c:	e5db      	b.n	81ff6 <_vfiprintf_r+0xda>
   8243e:	f898 3000 	ldrb.w	r3, [r8]
   82442:	4642      	mov	r2, r8
   82444:	2b6c      	cmp	r3, #108	; 0x6c
   82446:	bf03      	ittte	eq
   82448:	f108 0801 	addeq.w	r8, r8, #1
   8244c:	f04a 0a20 	orreq.w	sl, sl, #32
   82450:	7853      	ldrbeq	r3, [r2, #1]
   82452:	f04a 0a10 	orrne.w	sl, sl, #16
   82456:	e5ce      	b.n	81ff6 <_vfiprintf_r+0xda>
   82458:	f01a 0f20 	tst.w	sl, #32
   8245c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82460:	f000 82f7 	beq.w	82a52 <_vfiprintf_r+0xb36>
   82464:	9c08      	ldr	r4, [sp, #32]
   82466:	6821      	ldr	r1, [r4, #0]
   82468:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8246a:	17e5      	asrs	r5, r4, #31
   8246c:	462b      	mov	r3, r5
   8246e:	9d08      	ldr	r5, [sp, #32]
   82470:	4622      	mov	r2, r4
   82472:	3504      	adds	r5, #4
   82474:	9508      	str	r5, [sp, #32]
   82476:	e9c1 2300 	strd	r2, r3, [r1]
   8247a:	e582      	b.n	81f82 <_vfiprintf_r+0x66>
   8247c:	9c08      	ldr	r4, [sp, #32]
   8247e:	46ac      	mov	ip, r5
   82480:	6827      	ldr	r7, [r4, #0]
   82482:	f04f 0500 	mov.w	r5, #0
   82486:	9004      	str	r0, [sp, #16]
   82488:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8248c:	3404      	adds	r4, #4
   8248e:	2f00      	cmp	r7, #0
   82490:	f000 8332 	beq.w	82af8 <_vfiprintf_r+0xbdc>
   82494:	f1bc 0f00 	cmp.w	ip, #0
   82498:	4638      	mov	r0, r7
   8249a:	f2c0 8307 	blt.w	82aac <_vfiprintf_r+0xb90>
   8249e:	4662      	mov	r2, ip
   824a0:	2100      	movs	r1, #0
   824a2:	f8cd c004 	str.w	ip, [sp, #4]
   824a6:	f001 fc05 	bl	83cb4 <memchr>
   824aa:	f8dd c004 	ldr.w	ip, [sp, #4]
   824ae:	2800      	cmp	r0, #0
   824b0:	f000 833a 	beq.w	82b28 <_vfiprintf_r+0xc0c>
   824b4:	1bc0      	subs	r0, r0, r7
   824b6:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   824ba:	4560      	cmp	r0, ip
   824bc:	bfa8      	it	ge
   824be:	4660      	movge	r0, ip
   824c0:	9005      	str	r0, [sp, #20]
   824c2:	9408      	str	r4, [sp, #32]
   824c4:	9507      	str	r5, [sp, #28]
   824c6:	f04f 0c00 	mov.w	ip, #0
   824ca:	e65b      	b.n	82184 <_vfiprintf_r+0x268>
   824cc:	00084ebc 	.word	0x00084ebc
   824d0:	00084e7c 	.word	0x00084e7c
   824d4:	9b08      	ldr	r3, [sp, #32]
   824d6:	f8dd b020 	ldr.w	fp, [sp, #32]
   824da:	9004      	str	r0, [sp, #16]
   824dc:	48b2      	ldr	r0, [pc, #712]	; (827a8 <_vfiprintf_r+0x88c>)
   824de:	681c      	ldr	r4, [r3, #0]
   824e0:	2230      	movs	r2, #48	; 0x30
   824e2:	2378      	movs	r3, #120	; 0x78
   824e4:	f10b 0b04 	add.w	fp, fp, #4
   824e8:	46ac      	mov	ip, r5
   824ea:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   824ee:	f04a 0a02 	orr.w	sl, sl, #2
   824f2:	f8cd b020 	str.w	fp, [sp, #32]
   824f6:	2500      	movs	r5, #0
   824f8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   824fc:	900a      	str	r0, [sp, #40]	; 0x28
   824fe:	2302      	movs	r3, #2
   82500:	e61d      	b.n	8213e <_vfiprintf_r+0x222>
   82502:	f04a 0a20 	orr.w	sl, sl, #32
   82506:	f898 3000 	ldrb.w	r3, [r8]
   8250a:	e574      	b.n	81ff6 <_vfiprintf_r+0xda>
   8250c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82510:	f8db 0000 	ldr.w	r0, [fp]
   82514:	f10b 0304 	add.w	r3, fp, #4
   82518:	2800      	cmp	r0, #0
   8251a:	f6ff adf7 	blt.w	8210c <_vfiprintf_r+0x1f0>
   8251e:	9308      	str	r3, [sp, #32]
   82520:	f898 3000 	ldrb.w	r3, [r8]
   82524:	e567      	b.n	81ff6 <_vfiprintf_r+0xda>
   82526:	f898 3000 	ldrb.w	r3, [r8]
   8252a:	212b      	movs	r1, #43	; 0x2b
   8252c:	e563      	b.n	81ff6 <_vfiprintf_r+0xda>
   8252e:	f898 3000 	ldrb.w	r3, [r8]
   82532:	f108 0401 	add.w	r4, r8, #1
   82536:	2b2a      	cmp	r3, #42	; 0x2a
   82538:	f000 8305 	beq.w	82b46 <_vfiprintf_r+0xc2a>
   8253c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82540:	2a09      	cmp	r2, #9
   82542:	bf98      	it	ls
   82544:	2500      	movls	r5, #0
   82546:	f200 82fa 	bhi.w	82b3e <_vfiprintf_r+0xc22>
   8254a:	f814 3b01 	ldrb.w	r3, [r4], #1
   8254e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82552:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   82556:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8255a:	2a09      	cmp	r2, #9
   8255c:	d9f5      	bls.n	8254a <_vfiprintf_r+0x62e>
   8255e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   82562:	46a0      	mov	r8, r4
   82564:	e549      	b.n	81ffa <_vfiprintf_r+0xde>
   82566:	4c90      	ldr	r4, [pc, #576]	; (827a8 <_vfiprintf_r+0x88c>)
   82568:	f01a 0f20 	tst.w	sl, #32
   8256c:	9004      	str	r0, [sp, #16]
   8256e:	46ac      	mov	ip, r5
   82570:	940a      	str	r4, [sp, #40]	; 0x28
   82572:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82576:	f47f af10 	bne.w	8239a <_vfiprintf_r+0x47e>
   8257a:	f01a 0f10 	tst.w	sl, #16
   8257e:	f040 81ea 	bne.w	82956 <_vfiprintf_r+0xa3a>
   82582:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82586:	f000 81e6 	beq.w	82956 <_vfiprintf_r+0xa3a>
   8258a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8258e:	2500      	movs	r5, #0
   82590:	f8bb 4000 	ldrh.w	r4, [fp]
   82594:	f10b 0b04 	add.w	fp, fp, #4
   82598:	f8cd b020 	str.w	fp, [sp, #32]
   8259c:	e707      	b.n	823ae <_vfiprintf_r+0x492>
   8259e:	f898 3000 	ldrb.w	r3, [r8]
   825a2:	2900      	cmp	r1, #0
   825a4:	f47f ad27 	bne.w	81ff6 <_vfiprintf_r+0xda>
   825a8:	2120      	movs	r1, #32
   825aa:	e524      	b.n	81ff6 <_vfiprintf_r+0xda>
   825ac:	f04a 0a01 	orr.w	sl, sl, #1
   825b0:	f898 3000 	ldrb.w	r3, [r8]
   825b4:	e51f      	b.n	81ff6 <_vfiprintf_r+0xda>
   825b6:	9004      	str	r0, [sp, #16]
   825b8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   825bc:	2b00      	cmp	r3, #0
   825be:	f000 80f9 	beq.w	827b4 <_vfiprintf_r+0x898>
   825c2:	2501      	movs	r5, #1
   825c4:	f04f 0b00 	mov.w	fp, #0
   825c8:	9503      	str	r5, [sp, #12]
   825ca:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   825ce:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   825d2:	9505      	str	r5, [sp, #20]
   825d4:	af16      	add	r7, sp, #88	; 0x58
   825d6:	e70e      	b.n	823f6 <_vfiprintf_r+0x4da>
   825d8:	9806      	ldr	r0, [sp, #24]
   825da:	9902      	ldr	r1, [sp, #8]
   825dc:	aa13      	add	r2, sp, #76	; 0x4c
   825de:	f7ff fc61 	bl	81ea4 <__sprint_r.part.0>
   825e2:	2800      	cmp	r0, #0
   825e4:	f040 80ed 	bne.w	827c2 <_vfiprintf_r+0x8a6>
   825e8:	9814      	ldr	r0, [sp, #80]	; 0x50
   825ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
   825ec:	1c43      	adds	r3, r0, #1
   825ee:	46cc      	mov	ip, r9
   825f0:	e5fe      	b.n	821f0 <_vfiprintf_r+0x2d4>
   825f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   825f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   825f6:	1c59      	adds	r1, r3, #1
   825f8:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   825fc:	b168      	cbz	r0, 8261a <_vfiprintf_r+0x6fe>
   825fe:	3201      	adds	r2, #1
   82600:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   82604:	2301      	movs	r3, #1
   82606:	2907      	cmp	r1, #7
   82608:	9215      	str	r2, [sp, #84]	; 0x54
   8260a:	9114      	str	r1, [sp, #80]	; 0x50
   8260c:	e886 0009 	stmia.w	r6, {r0, r3}
   82610:	f300 8160 	bgt.w	828d4 <_vfiprintf_r+0x9b8>
   82614:	460b      	mov	r3, r1
   82616:	3608      	adds	r6, #8
   82618:	3101      	adds	r1, #1
   8261a:	9c07      	ldr	r4, [sp, #28]
   8261c:	b164      	cbz	r4, 82638 <_vfiprintf_r+0x71c>
   8261e:	3202      	adds	r2, #2
   82620:	a812      	add	r0, sp, #72	; 0x48
   82622:	2302      	movs	r3, #2
   82624:	2907      	cmp	r1, #7
   82626:	9215      	str	r2, [sp, #84]	; 0x54
   82628:	9114      	str	r1, [sp, #80]	; 0x50
   8262a:	e886 0009 	stmia.w	r6, {r0, r3}
   8262e:	f300 8157 	bgt.w	828e0 <_vfiprintf_r+0x9c4>
   82632:	460b      	mov	r3, r1
   82634:	3608      	adds	r6, #8
   82636:	3101      	adds	r1, #1
   82638:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8263a:	2d80      	cmp	r5, #128	; 0x80
   8263c:	f000 8101 	beq.w	82842 <_vfiprintf_r+0x926>
   82640:	9d05      	ldr	r5, [sp, #20]
   82642:	ebc5 040c 	rsb	r4, r5, ip
   82646:	2c00      	cmp	r4, #0
   82648:	dd2f      	ble.n	826aa <_vfiprintf_r+0x78e>
   8264a:	2c10      	cmp	r4, #16
   8264c:	4d57      	ldr	r5, [pc, #348]	; (827ac <_vfiprintf_r+0x890>)
   8264e:	dd22      	ble.n	82696 <_vfiprintf_r+0x77a>
   82650:	4630      	mov	r0, r6
   82652:	f04f 0b10 	mov.w	fp, #16
   82656:	462e      	mov	r6, r5
   82658:	4625      	mov	r5, r4
   8265a:	9c06      	ldr	r4, [sp, #24]
   8265c:	e006      	b.n	8266c <_vfiprintf_r+0x750>
   8265e:	f103 0c02 	add.w	ip, r3, #2
   82662:	3008      	adds	r0, #8
   82664:	460b      	mov	r3, r1
   82666:	3d10      	subs	r5, #16
   82668:	2d10      	cmp	r5, #16
   8266a:	dd10      	ble.n	8268e <_vfiprintf_r+0x772>
   8266c:	1c59      	adds	r1, r3, #1
   8266e:	3210      	adds	r2, #16
   82670:	2907      	cmp	r1, #7
   82672:	9215      	str	r2, [sp, #84]	; 0x54
   82674:	e880 0840 	stmia.w	r0, {r6, fp}
   82678:	9114      	str	r1, [sp, #80]	; 0x50
   8267a:	ddf0      	ble.n	8265e <_vfiprintf_r+0x742>
   8267c:	2a00      	cmp	r2, #0
   8267e:	d163      	bne.n	82748 <_vfiprintf_r+0x82c>
   82680:	3d10      	subs	r5, #16
   82682:	2d10      	cmp	r5, #16
   82684:	f04f 0c01 	mov.w	ip, #1
   82688:	4613      	mov	r3, r2
   8268a:	4648      	mov	r0, r9
   8268c:	dcee      	bgt.n	8266c <_vfiprintf_r+0x750>
   8268e:	462c      	mov	r4, r5
   82690:	4661      	mov	r1, ip
   82692:	4635      	mov	r5, r6
   82694:	4606      	mov	r6, r0
   82696:	4422      	add	r2, r4
   82698:	2907      	cmp	r1, #7
   8269a:	9215      	str	r2, [sp, #84]	; 0x54
   8269c:	6035      	str	r5, [r6, #0]
   8269e:	6074      	str	r4, [r6, #4]
   826a0:	9114      	str	r1, [sp, #80]	; 0x50
   826a2:	f300 80c1 	bgt.w	82828 <_vfiprintf_r+0x90c>
   826a6:	3608      	adds	r6, #8
   826a8:	3101      	adds	r1, #1
   826aa:	9d05      	ldr	r5, [sp, #20]
   826ac:	2907      	cmp	r1, #7
   826ae:	442a      	add	r2, r5
   826b0:	9215      	str	r2, [sp, #84]	; 0x54
   826b2:	6037      	str	r7, [r6, #0]
   826b4:	6075      	str	r5, [r6, #4]
   826b6:	9114      	str	r1, [sp, #80]	; 0x50
   826b8:	f340 80c1 	ble.w	8283e <_vfiprintf_r+0x922>
   826bc:	2a00      	cmp	r2, #0
   826be:	f040 8130 	bne.w	82922 <_vfiprintf_r+0xa06>
   826c2:	9214      	str	r2, [sp, #80]	; 0x50
   826c4:	464e      	mov	r6, r9
   826c6:	f01a 0f04 	tst.w	sl, #4
   826ca:	f000 808b 	beq.w	827e4 <_vfiprintf_r+0x8c8>
   826ce:	9d04      	ldr	r5, [sp, #16]
   826d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   826d4:	ebcb 0405 	rsb	r4, fp, r5
   826d8:	2c00      	cmp	r4, #0
   826da:	f340 8083 	ble.w	827e4 <_vfiprintf_r+0x8c8>
   826de:	2c10      	cmp	r4, #16
   826e0:	f340 821e 	ble.w	82b20 <_vfiprintf_r+0xc04>
   826e4:	9914      	ldr	r1, [sp, #80]	; 0x50
   826e6:	4d32      	ldr	r5, [pc, #200]	; (827b0 <_vfiprintf_r+0x894>)
   826e8:	2710      	movs	r7, #16
   826ea:	f8dd a018 	ldr.w	sl, [sp, #24]
   826ee:	f8dd b008 	ldr.w	fp, [sp, #8]
   826f2:	e005      	b.n	82700 <_vfiprintf_r+0x7e4>
   826f4:	1c88      	adds	r0, r1, #2
   826f6:	3608      	adds	r6, #8
   826f8:	4619      	mov	r1, r3
   826fa:	3c10      	subs	r4, #16
   826fc:	2c10      	cmp	r4, #16
   826fe:	dd10      	ble.n	82722 <_vfiprintf_r+0x806>
   82700:	1c4b      	adds	r3, r1, #1
   82702:	3210      	adds	r2, #16
   82704:	2b07      	cmp	r3, #7
   82706:	9215      	str	r2, [sp, #84]	; 0x54
   82708:	e886 00a0 	stmia.w	r6, {r5, r7}
   8270c:	9314      	str	r3, [sp, #80]	; 0x50
   8270e:	ddf1      	ble.n	826f4 <_vfiprintf_r+0x7d8>
   82710:	2a00      	cmp	r2, #0
   82712:	d17d      	bne.n	82810 <_vfiprintf_r+0x8f4>
   82714:	3c10      	subs	r4, #16
   82716:	2c10      	cmp	r4, #16
   82718:	f04f 0001 	mov.w	r0, #1
   8271c:	4611      	mov	r1, r2
   8271e:	464e      	mov	r6, r9
   82720:	dcee      	bgt.n	82700 <_vfiprintf_r+0x7e4>
   82722:	4422      	add	r2, r4
   82724:	2807      	cmp	r0, #7
   82726:	9215      	str	r2, [sp, #84]	; 0x54
   82728:	6035      	str	r5, [r6, #0]
   8272a:	6074      	str	r4, [r6, #4]
   8272c:	9014      	str	r0, [sp, #80]	; 0x50
   8272e:	dd59      	ble.n	827e4 <_vfiprintf_r+0x8c8>
   82730:	2a00      	cmp	r2, #0
   82732:	d14f      	bne.n	827d4 <_vfiprintf_r+0x8b8>
   82734:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82736:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8273a:	9d04      	ldr	r5, [sp, #16]
   8273c:	45ab      	cmp	fp, r5
   8273e:	bfac      	ite	ge
   82740:	445c      	addge	r4, fp
   82742:	1964      	addlt	r4, r4, r5
   82744:	9409      	str	r4, [sp, #36]	; 0x24
   82746:	e05e      	b.n	82806 <_vfiprintf_r+0x8ea>
   82748:	4620      	mov	r0, r4
   8274a:	9902      	ldr	r1, [sp, #8]
   8274c:	aa13      	add	r2, sp, #76	; 0x4c
   8274e:	f7ff fba9 	bl	81ea4 <__sprint_r.part.0>
   82752:	2800      	cmp	r0, #0
   82754:	d135      	bne.n	827c2 <_vfiprintf_r+0x8a6>
   82756:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82758:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8275a:	f103 0c01 	add.w	ip, r3, #1
   8275e:	4648      	mov	r0, r9
   82760:	e781      	b.n	82666 <_vfiprintf_r+0x74a>
   82762:	08e0      	lsrs	r0, r4, #3
   82764:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   82768:	f004 0207 	and.w	r2, r4, #7
   8276c:	08e9      	lsrs	r1, r5, #3
   8276e:	3230      	adds	r2, #48	; 0x30
   82770:	ea50 0b01 	orrs.w	fp, r0, r1
   82774:	461f      	mov	r7, r3
   82776:	701a      	strb	r2, [r3, #0]
   82778:	4604      	mov	r4, r0
   8277a:	460d      	mov	r5, r1
   8277c:	f103 33ff 	add.w	r3, r3, #4294967295
   82780:	d1ef      	bne.n	82762 <_vfiprintf_r+0x846>
   82782:	f01a 0f01 	tst.w	sl, #1
   82786:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   8278a:	4639      	mov	r1, r7
   8278c:	f000 80b9 	beq.w	82902 <_vfiprintf_r+0x9e6>
   82790:	2a30      	cmp	r2, #48	; 0x30
   82792:	f43f acf4 	beq.w	8217e <_vfiprintf_r+0x262>
   82796:	461f      	mov	r7, r3
   82798:	ebc7 0509 	rsb	r5, r7, r9
   8279c:	2330      	movs	r3, #48	; 0x30
   8279e:	9505      	str	r5, [sp, #20]
   827a0:	f801 3c01 	strb.w	r3, [r1, #-1]
   827a4:	e4ee      	b.n	82184 <_vfiprintf_r+0x268>
   827a6:	bf00      	nop
   827a8:	00084e90 	.word	0x00084e90
   827ac:	00084eac 	.word	0x00084eac
   827b0:	00084ebc 	.word	0x00084ebc
   827b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   827b6:	b123      	cbz	r3, 827c2 <_vfiprintf_r+0x8a6>
   827b8:	9806      	ldr	r0, [sp, #24]
   827ba:	9902      	ldr	r1, [sp, #8]
   827bc:	aa13      	add	r2, sp, #76	; 0x4c
   827be:	f7ff fb71 	bl	81ea4 <__sprint_r.part.0>
   827c2:	9c02      	ldr	r4, [sp, #8]
   827c4:	89a3      	ldrh	r3, [r4, #12]
   827c6:	065b      	lsls	r3, r3, #25
   827c8:	f53f ac98 	bmi.w	820fc <_vfiprintf_r+0x1e0>
   827cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   827ce:	b031      	add	sp, #196	; 0xc4
   827d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827d4:	9806      	ldr	r0, [sp, #24]
   827d6:	9902      	ldr	r1, [sp, #8]
   827d8:	aa13      	add	r2, sp, #76	; 0x4c
   827da:	f7ff fb63 	bl	81ea4 <__sprint_r.part.0>
   827de:	2800      	cmp	r0, #0
   827e0:	d1ef      	bne.n	827c2 <_vfiprintf_r+0x8a6>
   827e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   827e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   827e6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   827ea:	9d04      	ldr	r5, [sp, #16]
   827ec:	45ab      	cmp	fp, r5
   827ee:	bfac      	ite	ge
   827f0:	445c      	addge	r4, fp
   827f2:	1964      	addlt	r4, r4, r5
   827f4:	9409      	str	r4, [sp, #36]	; 0x24
   827f6:	b132      	cbz	r2, 82806 <_vfiprintf_r+0x8ea>
   827f8:	9806      	ldr	r0, [sp, #24]
   827fa:	9902      	ldr	r1, [sp, #8]
   827fc:	aa13      	add	r2, sp, #76	; 0x4c
   827fe:	f7ff fb51 	bl	81ea4 <__sprint_r.part.0>
   82802:	2800      	cmp	r0, #0
   82804:	d1dd      	bne.n	827c2 <_vfiprintf_r+0x8a6>
   82806:	2000      	movs	r0, #0
   82808:	9014      	str	r0, [sp, #80]	; 0x50
   8280a:	464e      	mov	r6, r9
   8280c:	f7ff bbb9 	b.w	81f82 <_vfiprintf_r+0x66>
   82810:	4650      	mov	r0, sl
   82812:	4659      	mov	r1, fp
   82814:	aa13      	add	r2, sp, #76	; 0x4c
   82816:	f7ff fb45 	bl	81ea4 <__sprint_r.part.0>
   8281a:	2800      	cmp	r0, #0
   8281c:	d1d1      	bne.n	827c2 <_vfiprintf_r+0x8a6>
   8281e:	9914      	ldr	r1, [sp, #80]	; 0x50
   82820:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82822:	1c48      	adds	r0, r1, #1
   82824:	464e      	mov	r6, r9
   82826:	e768      	b.n	826fa <_vfiprintf_r+0x7de>
   82828:	2a00      	cmp	r2, #0
   8282a:	f040 80f7 	bne.w	82a1c <_vfiprintf_r+0xb00>
   8282e:	9c05      	ldr	r4, [sp, #20]
   82830:	2301      	movs	r3, #1
   82832:	9720      	str	r7, [sp, #128]	; 0x80
   82834:	9421      	str	r4, [sp, #132]	; 0x84
   82836:	9415      	str	r4, [sp, #84]	; 0x54
   82838:	4622      	mov	r2, r4
   8283a:	9314      	str	r3, [sp, #80]	; 0x50
   8283c:	464e      	mov	r6, r9
   8283e:	3608      	adds	r6, #8
   82840:	e741      	b.n	826c6 <_vfiprintf_r+0x7aa>
   82842:	9d04      	ldr	r5, [sp, #16]
   82844:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82848:	ebcb 0405 	rsb	r4, fp, r5
   8284c:	2c00      	cmp	r4, #0
   8284e:	f77f aef7 	ble.w	82640 <_vfiprintf_r+0x724>
   82852:	2c10      	cmp	r4, #16
   82854:	4da6      	ldr	r5, [pc, #664]	; (82af0 <_vfiprintf_r+0xbd4>)
   82856:	f340 8170 	ble.w	82b3a <_vfiprintf_r+0xc1e>
   8285a:	4629      	mov	r1, r5
   8285c:	f04f 0b10 	mov.w	fp, #16
   82860:	4625      	mov	r5, r4
   82862:	4664      	mov	r4, ip
   82864:	46b4      	mov	ip, r6
   82866:	460e      	mov	r6, r1
   82868:	e006      	b.n	82878 <_vfiprintf_r+0x95c>
   8286a:	1c98      	adds	r0, r3, #2
   8286c:	f10c 0c08 	add.w	ip, ip, #8
   82870:	460b      	mov	r3, r1
   82872:	3d10      	subs	r5, #16
   82874:	2d10      	cmp	r5, #16
   82876:	dd0f      	ble.n	82898 <_vfiprintf_r+0x97c>
   82878:	1c59      	adds	r1, r3, #1
   8287a:	3210      	adds	r2, #16
   8287c:	2907      	cmp	r1, #7
   8287e:	9215      	str	r2, [sp, #84]	; 0x54
   82880:	e88c 0840 	stmia.w	ip, {r6, fp}
   82884:	9114      	str	r1, [sp, #80]	; 0x50
   82886:	ddf0      	ble.n	8286a <_vfiprintf_r+0x94e>
   82888:	b9ba      	cbnz	r2, 828ba <_vfiprintf_r+0x99e>
   8288a:	3d10      	subs	r5, #16
   8288c:	2d10      	cmp	r5, #16
   8288e:	f04f 0001 	mov.w	r0, #1
   82892:	4613      	mov	r3, r2
   82894:	46cc      	mov	ip, r9
   82896:	dcef      	bgt.n	82878 <_vfiprintf_r+0x95c>
   82898:	4633      	mov	r3, r6
   8289a:	4666      	mov	r6, ip
   8289c:	46a4      	mov	ip, r4
   8289e:	462c      	mov	r4, r5
   828a0:	461d      	mov	r5, r3
   828a2:	4422      	add	r2, r4
   828a4:	2807      	cmp	r0, #7
   828a6:	9215      	str	r2, [sp, #84]	; 0x54
   828a8:	6035      	str	r5, [r6, #0]
   828aa:	6074      	str	r4, [r6, #4]
   828ac:	9014      	str	r0, [sp, #80]	; 0x50
   828ae:	f300 80af 	bgt.w	82a10 <_vfiprintf_r+0xaf4>
   828b2:	3608      	adds	r6, #8
   828b4:	1c41      	adds	r1, r0, #1
   828b6:	4603      	mov	r3, r0
   828b8:	e6c2      	b.n	82640 <_vfiprintf_r+0x724>
   828ba:	9806      	ldr	r0, [sp, #24]
   828bc:	9902      	ldr	r1, [sp, #8]
   828be:	aa13      	add	r2, sp, #76	; 0x4c
   828c0:	f7ff faf0 	bl	81ea4 <__sprint_r.part.0>
   828c4:	2800      	cmp	r0, #0
   828c6:	f47f af7c 	bne.w	827c2 <_vfiprintf_r+0x8a6>
   828ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   828cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   828ce:	1c58      	adds	r0, r3, #1
   828d0:	46cc      	mov	ip, r9
   828d2:	e7ce      	b.n	82872 <_vfiprintf_r+0x956>
   828d4:	2a00      	cmp	r2, #0
   828d6:	d179      	bne.n	829cc <_vfiprintf_r+0xab0>
   828d8:	4619      	mov	r1, r3
   828da:	464e      	mov	r6, r9
   828dc:	4613      	mov	r3, r2
   828de:	e69c      	b.n	8261a <_vfiprintf_r+0x6fe>
   828e0:	2a00      	cmp	r2, #0
   828e2:	f040 8084 	bne.w	829ee <_vfiprintf_r+0xad2>
   828e6:	2101      	movs	r1, #1
   828e8:	4613      	mov	r3, r2
   828ea:	464e      	mov	r6, r9
   828ec:	e6a4      	b.n	82638 <_vfiprintf_r+0x71c>
   828ee:	464f      	mov	r7, r9
   828f0:	e448      	b.n	82184 <_vfiprintf_r+0x268>
   828f2:	2d00      	cmp	r5, #0
   828f4:	bf08      	it	eq
   828f6:	2c0a      	cmpeq	r4, #10
   828f8:	d246      	bcs.n	82988 <_vfiprintf_r+0xa6c>
   828fa:	3430      	adds	r4, #48	; 0x30
   828fc:	af30      	add	r7, sp, #192	; 0xc0
   828fe:	f807 4d41 	strb.w	r4, [r7, #-65]!
   82902:	ebc7 0309 	rsb	r3, r7, r9
   82906:	9305      	str	r3, [sp, #20]
   82908:	e43c      	b.n	82184 <_vfiprintf_r+0x268>
   8290a:	2302      	movs	r3, #2
   8290c:	e417      	b.n	8213e <_vfiprintf_r+0x222>
   8290e:	2a00      	cmp	r2, #0
   82910:	f040 80af 	bne.w	82a72 <_vfiprintf_r+0xb56>
   82914:	4613      	mov	r3, r2
   82916:	2101      	movs	r1, #1
   82918:	464e      	mov	r6, r9
   8291a:	e66d      	b.n	825f8 <_vfiprintf_r+0x6dc>
   8291c:	4644      	mov	r4, r8
   8291e:	f7ff bb58 	b.w	81fd2 <_vfiprintf_r+0xb6>
   82922:	9806      	ldr	r0, [sp, #24]
   82924:	9902      	ldr	r1, [sp, #8]
   82926:	aa13      	add	r2, sp, #76	; 0x4c
   82928:	f7ff fabc 	bl	81ea4 <__sprint_r.part.0>
   8292c:	2800      	cmp	r0, #0
   8292e:	f47f af48 	bne.w	827c2 <_vfiprintf_r+0x8a6>
   82932:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82934:	464e      	mov	r6, r9
   82936:	e6c6      	b.n	826c6 <_vfiprintf_r+0x7aa>
   82938:	9d08      	ldr	r5, [sp, #32]
   8293a:	682c      	ldr	r4, [r5, #0]
   8293c:	3504      	adds	r5, #4
   8293e:	9508      	str	r5, [sp, #32]
   82940:	2500      	movs	r5, #0
   82942:	f7ff bbfc 	b.w	8213e <_vfiprintf_r+0x222>
   82946:	9d08      	ldr	r5, [sp, #32]
   82948:	2301      	movs	r3, #1
   8294a:	682c      	ldr	r4, [r5, #0]
   8294c:	3504      	adds	r5, #4
   8294e:	9508      	str	r5, [sp, #32]
   82950:	2500      	movs	r5, #0
   82952:	f7ff bbf4 	b.w	8213e <_vfiprintf_r+0x222>
   82956:	9d08      	ldr	r5, [sp, #32]
   82958:	682c      	ldr	r4, [r5, #0]
   8295a:	3504      	adds	r5, #4
   8295c:	9508      	str	r5, [sp, #32]
   8295e:	2500      	movs	r5, #0
   82960:	e525      	b.n	823ae <_vfiprintf_r+0x492>
   82962:	9d08      	ldr	r5, [sp, #32]
   82964:	682c      	ldr	r4, [r5, #0]
   82966:	3504      	adds	r5, #4
   82968:	9508      	str	r5, [sp, #32]
   8296a:	17e5      	asrs	r5, r4, #31
   8296c:	4622      	mov	r2, r4
   8296e:	462b      	mov	r3, r5
   82970:	e48e      	b.n	82290 <_vfiprintf_r+0x374>
   82972:	9806      	ldr	r0, [sp, #24]
   82974:	9902      	ldr	r1, [sp, #8]
   82976:	aa13      	add	r2, sp, #76	; 0x4c
   82978:	f7ff fa94 	bl	81ea4 <__sprint_r.part.0>
   8297c:	2800      	cmp	r0, #0
   8297e:	f47f af20 	bne.w	827c2 <_vfiprintf_r+0x8a6>
   82982:	464e      	mov	r6, r9
   82984:	f7ff bb9a 	b.w	820bc <_vfiprintf_r+0x1a0>
   82988:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   8298c:	9603      	str	r6, [sp, #12]
   8298e:	465e      	mov	r6, fp
   82990:	46e3      	mov	fp, ip
   82992:	4620      	mov	r0, r4
   82994:	4629      	mov	r1, r5
   82996:	220a      	movs	r2, #10
   82998:	2300      	movs	r3, #0
   8299a:	f001 fe5f 	bl	8465c <__aeabi_uldivmod>
   8299e:	3230      	adds	r2, #48	; 0x30
   829a0:	7032      	strb	r2, [r6, #0]
   829a2:	4620      	mov	r0, r4
   829a4:	4629      	mov	r1, r5
   829a6:	220a      	movs	r2, #10
   829a8:	2300      	movs	r3, #0
   829aa:	f001 fe57 	bl	8465c <__aeabi_uldivmod>
   829ae:	4604      	mov	r4, r0
   829b0:	460d      	mov	r5, r1
   829b2:	ea54 0005 	orrs.w	r0, r4, r5
   829b6:	4637      	mov	r7, r6
   829b8:	f106 36ff 	add.w	r6, r6, #4294967295
   829bc:	d1e9      	bne.n	82992 <_vfiprintf_r+0xa76>
   829be:	ebc7 0309 	rsb	r3, r7, r9
   829c2:	46dc      	mov	ip, fp
   829c4:	9e03      	ldr	r6, [sp, #12]
   829c6:	9305      	str	r3, [sp, #20]
   829c8:	f7ff bbdc 	b.w	82184 <_vfiprintf_r+0x268>
   829cc:	9806      	ldr	r0, [sp, #24]
   829ce:	9902      	ldr	r1, [sp, #8]
   829d0:	aa13      	add	r2, sp, #76	; 0x4c
   829d2:	f8cd c004 	str.w	ip, [sp, #4]
   829d6:	f7ff fa65 	bl	81ea4 <__sprint_r.part.0>
   829da:	f8dd c004 	ldr.w	ip, [sp, #4]
   829de:	2800      	cmp	r0, #0
   829e0:	f47f aeef 	bne.w	827c2 <_vfiprintf_r+0x8a6>
   829e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   829e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   829e8:	1c59      	adds	r1, r3, #1
   829ea:	464e      	mov	r6, r9
   829ec:	e615      	b.n	8261a <_vfiprintf_r+0x6fe>
   829ee:	9806      	ldr	r0, [sp, #24]
   829f0:	9902      	ldr	r1, [sp, #8]
   829f2:	aa13      	add	r2, sp, #76	; 0x4c
   829f4:	f8cd c004 	str.w	ip, [sp, #4]
   829f8:	f7ff fa54 	bl	81ea4 <__sprint_r.part.0>
   829fc:	f8dd c004 	ldr.w	ip, [sp, #4]
   82a00:	2800      	cmp	r0, #0
   82a02:	f47f aede 	bne.w	827c2 <_vfiprintf_r+0x8a6>
   82a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82a08:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a0a:	1c59      	adds	r1, r3, #1
   82a0c:	464e      	mov	r6, r9
   82a0e:	e613      	b.n	82638 <_vfiprintf_r+0x71c>
   82a10:	2a00      	cmp	r2, #0
   82a12:	d156      	bne.n	82ac2 <_vfiprintf_r+0xba6>
   82a14:	2101      	movs	r1, #1
   82a16:	4613      	mov	r3, r2
   82a18:	464e      	mov	r6, r9
   82a1a:	e611      	b.n	82640 <_vfiprintf_r+0x724>
   82a1c:	9806      	ldr	r0, [sp, #24]
   82a1e:	9902      	ldr	r1, [sp, #8]
   82a20:	aa13      	add	r2, sp, #76	; 0x4c
   82a22:	f7ff fa3f 	bl	81ea4 <__sprint_r.part.0>
   82a26:	2800      	cmp	r0, #0
   82a28:	f47f aecb 	bne.w	827c2 <_vfiprintf_r+0x8a6>
   82a2c:	9914      	ldr	r1, [sp, #80]	; 0x50
   82a2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a30:	3101      	adds	r1, #1
   82a32:	464e      	mov	r6, r9
   82a34:	e639      	b.n	826aa <_vfiprintf_r+0x78e>
   82a36:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   82a3a:	4264      	negs	r4, r4
   82a3c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82a40:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82a44:	f8cd b01c 	str.w	fp, [sp, #28]
   82a48:	f8cd c014 	str.w	ip, [sp, #20]
   82a4c:	2301      	movs	r3, #1
   82a4e:	f7ff bb7e 	b.w	8214e <_vfiprintf_r+0x232>
   82a52:	f01a 0f10 	tst.w	sl, #16
   82a56:	d11d      	bne.n	82a94 <_vfiprintf_r+0xb78>
   82a58:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82a5c:	d058      	beq.n	82b10 <_vfiprintf_r+0xbf4>
   82a5e:	9d08      	ldr	r5, [sp, #32]
   82a60:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   82a64:	682b      	ldr	r3, [r5, #0]
   82a66:	3504      	adds	r5, #4
   82a68:	9508      	str	r5, [sp, #32]
   82a6a:	f8a3 b000 	strh.w	fp, [r3]
   82a6e:	f7ff ba88 	b.w	81f82 <_vfiprintf_r+0x66>
   82a72:	9806      	ldr	r0, [sp, #24]
   82a74:	9902      	ldr	r1, [sp, #8]
   82a76:	aa13      	add	r2, sp, #76	; 0x4c
   82a78:	f8cd c004 	str.w	ip, [sp, #4]
   82a7c:	f7ff fa12 	bl	81ea4 <__sprint_r.part.0>
   82a80:	f8dd c004 	ldr.w	ip, [sp, #4]
   82a84:	2800      	cmp	r0, #0
   82a86:	f47f ae9c 	bne.w	827c2 <_vfiprintf_r+0x8a6>
   82a8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82a8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a8e:	1c59      	adds	r1, r3, #1
   82a90:	464e      	mov	r6, r9
   82a92:	e5b1      	b.n	825f8 <_vfiprintf_r+0x6dc>
   82a94:	f8dd b020 	ldr.w	fp, [sp, #32]
   82a98:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82a9a:	f8db 3000 	ldr.w	r3, [fp]
   82a9e:	f10b 0b04 	add.w	fp, fp, #4
   82aa2:	f8cd b020 	str.w	fp, [sp, #32]
   82aa6:	601c      	str	r4, [r3, #0]
   82aa8:	f7ff ba6b 	b.w	81f82 <_vfiprintf_r+0x66>
   82aac:	9408      	str	r4, [sp, #32]
   82aae:	f001 fc5f 	bl	84370 <strlen>
   82ab2:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82ab6:	9005      	str	r0, [sp, #20]
   82ab8:	9407      	str	r4, [sp, #28]
   82aba:	f04f 0c00 	mov.w	ip, #0
   82abe:	f7ff bb61 	b.w	82184 <_vfiprintf_r+0x268>
   82ac2:	9806      	ldr	r0, [sp, #24]
   82ac4:	9902      	ldr	r1, [sp, #8]
   82ac6:	aa13      	add	r2, sp, #76	; 0x4c
   82ac8:	f8cd c004 	str.w	ip, [sp, #4]
   82acc:	f7ff f9ea 	bl	81ea4 <__sprint_r.part.0>
   82ad0:	f8dd c004 	ldr.w	ip, [sp, #4]
   82ad4:	2800      	cmp	r0, #0
   82ad6:	f47f ae74 	bne.w	827c2 <_vfiprintf_r+0x8a6>
   82ada:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82adc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82ade:	1c59      	adds	r1, r3, #1
   82ae0:	464e      	mov	r6, r9
   82ae2:	e5ad      	b.n	82640 <_vfiprintf_r+0x724>
   82ae4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82ae6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82ae8:	3301      	adds	r3, #1
   82aea:	4d02      	ldr	r5, [pc, #8]	; (82af4 <_vfiprintf_r+0xbd8>)
   82aec:	f7ff bb9a 	b.w	82224 <_vfiprintf_r+0x308>
   82af0:	00084eac 	.word	0x00084eac
   82af4:	00084ebc 	.word	0x00084ebc
   82af8:	f1bc 0f06 	cmp.w	ip, #6
   82afc:	bf34      	ite	cc
   82afe:	4663      	movcc	r3, ip
   82b00:	2306      	movcs	r3, #6
   82b02:	9408      	str	r4, [sp, #32]
   82b04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82b08:	9305      	str	r3, [sp, #20]
   82b0a:	9403      	str	r4, [sp, #12]
   82b0c:	4f16      	ldr	r7, [pc, #88]	; (82b68 <_vfiprintf_r+0xc4c>)
   82b0e:	e472      	b.n	823f6 <_vfiprintf_r+0x4da>
   82b10:	9c08      	ldr	r4, [sp, #32]
   82b12:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82b14:	6823      	ldr	r3, [r4, #0]
   82b16:	3404      	adds	r4, #4
   82b18:	9408      	str	r4, [sp, #32]
   82b1a:	601d      	str	r5, [r3, #0]
   82b1c:	f7ff ba31 	b.w	81f82 <_vfiprintf_r+0x66>
   82b20:	9814      	ldr	r0, [sp, #80]	; 0x50
   82b22:	4d12      	ldr	r5, [pc, #72]	; (82b6c <_vfiprintf_r+0xc50>)
   82b24:	3001      	adds	r0, #1
   82b26:	e5fc      	b.n	82722 <_vfiprintf_r+0x806>
   82b28:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82b2c:	f8cd c014 	str.w	ip, [sp, #20]
   82b30:	9507      	str	r5, [sp, #28]
   82b32:	9408      	str	r4, [sp, #32]
   82b34:	4684      	mov	ip, r0
   82b36:	f7ff bb25 	b.w	82184 <_vfiprintf_r+0x268>
   82b3a:	4608      	mov	r0, r1
   82b3c:	e6b1      	b.n	828a2 <_vfiprintf_r+0x986>
   82b3e:	46a0      	mov	r8, r4
   82b40:	2500      	movs	r5, #0
   82b42:	f7ff ba5a 	b.w	81ffa <_vfiprintf_r+0xde>
   82b46:	f8dd b020 	ldr.w	fp, [sp, #32]
   82b4a:	f898 3001 	ldrb.w	r3, [r8, #1]
   82b4e:	f8db 5000 	ldr.w	r5, [fp]
   82b52:	f10b 0204 	add.w	r2, fp, #4
   82b56:	2d00      	cmp	r5, #0
   82b58:	9208      	str	r2, [sp, #32]
   82b5a:	46a0      	mov	r8, r4
   82b5c:	f6bf aa4b 	bge.w	81ff6 <_vfiprintf_r+0xda>
   82b60:	f04f 35ff 	mov.w	r5, #4294967295
   82b64:	f7ff ba47 	b.w	81ff6 <_vfiprintf_r+0xda>
   82b68:	00084ea4 	.word	0x00084ea4
   82b6c:	00084ebc 	.word	0x00084ebc

00082b70 <__sbprintf>:
   82b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82b74:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82b76:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82b7a:	4688      	mov	r8, r1
   82b7c:	9719      	str	r7, [sp, #100]	; 0x64
   82b7e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   82b82:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   82b86:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   82b8a:	9707      	str	r7, [sp, #28]
   82b8c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82b90:	ac1a      	add	r4, sp, #104	; 0x68
   82b92:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82b96:	f02a 0a02 	bic.w	sl, sl, #2
   82b9a:	2600      	movs	r6, #0
   82b9c:	4669      	mov	r1, sp
   82b9e:	9400      	str	r4, [sp, #0]
   82ba0:	9404      	str	r4, [sp, #16]
   82ba2:	9502      	str	r5, [sp, #8]
   82ba4:	9505      	str	r5, [sp, #20]
   82ba6:	f8ad a00c 	strh.w	sl, [sp, #12]
   82baa:	f8ad 900e 	strh.w	r9, [sp, #14]
   82bae:	9709      	str	r7, [sp, #36]	; 0x24
   82bb0:	9606      	str	r6, [sp, #24]
   82bb2:	4605      	mov	r5, r0
   82bb4:	f7ff f9b2 	bl	81f1c <_vfiprintf_r>
   82bb8:	1e04      	subs	r4, r0, #0
   82bba:	db07      	blt.n	82bcc <__sbprintf+0x5c>
   82bbc:	4628      	mov	r0, r5
   82bbe:	4669      	mov	r1, sp
   82bc0:	f000 f97e 	bl	82ec0 <_fflush_r>
   82bc4:	42b0      	cmp	r0, r6
   82bc6:	bf18      	it	ne
   82bc8:	f04f 34ff 	movne.w	r4, #4294967295
   82bcc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82bd0:	065b      	lsls	r3, r3, #25
   82bd2:	d505      	bpl.n	82be0 <__sbprintf+0x70>
   82bd4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82bdc:	f8a8 300c 	strh.w	r3, [r8, #12]
   82be0:	4620      	mov	r0, r4
   82be2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82bea:	bf00      	nop

00082bec <__swbuf_r>:
   82bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82bee:	460d      	mov	r5, r1
   82bf0:	4614      	mov	r4, r2
   82bf2:	4607      	mov	r7, r0
   82bf4:	b110      	cbz	r0, 82bfc <__swbuf_r+0x10>
   82bf6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82bf8:	2b00      	cmp	r3, #0
   82bfa:	d048      	beq.n	82c8e <__swbuf_r+0xa2>
   82bfc:	89a2      	ldrh	r2, [r4, #12]
   82bfe:	69a0      	ldr	r0, [r4, #24]
   82c00:	b293      	uxth	r3, r2
   82c02:	60a0      	str	r0, [r4, #8]
   82c04:	0718      	lsls	r0, r3, #28
   82c06:	d538      	bpl.n	82c7a <__swbuf_r+0x8e>
   82c08:	6926      	ldr	r6, [r4, #16]
   82c0a:	2e00      	cmp	r6, #0
   82c0c:	d035      	beq.n	82c7a <__swbuf_r+0x8e>
   82c0e:	0499      	lsls	r1, r3, #18
   82c10:	b2ed      	uxtb	r5, r5
   82c12:	d515      	bpl.n	82c40 <__swbuf_r+0x54>
   82c14:	6823      	ldr	r3, [r4, #0]
   82c16:	6962      	ldr	r2, [r4, #20]
   82c18:	1b9e      	subs	r6, r3, r6
   82c1a:	4296      	cmp	r6, r2
   82c1c:	da1c      	bge.n	82c58 <__swbuf_r+0x6c>
   82c1e:	3601      	adds	r6, #1
   82c20:	68a2      	ldr	r2, [r4, #8]
   82c22:	1c59      	adds	r1, r3, #1
   82c24:	3a01      	subs	r2, #1
   82c26:	60a2      	str	r2, [r4, #8]
   82c28:	6021      	str	r1, [r4, #0]
   82c2a:	701d      	strb	r5, [r3, #0]
   82c2c:	6963      	ldr	r3, [r4, #20]
   82c2e:	42b3      	cmp	r3, r6
   82c30:	d01a      	beq.n	82c68 <__swbuf_r+0x7c>
   82c32:	89a3      	ldrh	r3, [r4, #12]
   82c34:	07db      	lsls	r3, r3, #31
   82c36:	d501      	bpl.n	82c3c <__swbuf_r+0x50>
   82c38:	2d0a      	cmp	r5, #10
   82c3a:	d015      	beq.n	82c68 <__swbuf_r+0x7c>
   82c3c:	4628      	mov	r0, r5
   82c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82c42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82c4a:	6663      	str	r3, [r4, #100]	; 0x64
   82c4c:	6823      	ldr	r3, [r4, #0]
   82c4e:	81a2      	strh	r2, [r4, #12]
   82c50:	6962      	ldr	r2, [r4, #20]
   82c52:	1b9e      	subs	r6, r3, r6
   82c54:	4296      	cmp	r6, r2
   82c56:	dbe2      	blt.n	82c1e <__swbuf_r+0x32>
   82c58:	4638      	mov	r0, r7
   82c5a:	4621      	mov	r1, r4
   82c5c:	f000 f930 	bl	82ec0 <_fflush_r>
   82c60:	b940      	cbnz	r0, 82c74 <__swbuf_r+0x88>
   82c62:	6823      	ldr	r3, [r4, #0]
   82c64:	2601      	movs	r6, #1
   82c66:	e7db      	b.n	82c20 <__swbuf_r+0x34>
   82c68:	4638      	mov	r0, r7
   82c6a:	4621      	mov	r1, r4
   82c6c:	f000 f928 	bl	82ec0 <_fflush_r>
   82c70:	2800      	cmp	r0, #0
   82c72:	d0e3      	beq.n	82c3c <__swbuf_r+0x50>
   82c74:	f04f 30ff 	mov.w	r0, #4294967295
   82c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c7a:	4638      	mov	r0, r7
   82c7c:	4621      	mov	r1, r4
   82c7e:	f000 f809 	bl	82c94 <__swsetup_r>
   82c82:	2800      	cmp	r0, #0
   82c84:	d1f6      	bne.n	82c74 <__swbuf_r+0x88>
   82c86:	89a2      	ldrh	r2, [r4, #12]
   82c88:	6926      	ldr	r6, [r4, #16]
   82c8a:	b293      	uxth	r3, r2
   82c8c:	e7bf      	b.n	82c0e <__swbuf_r+0x22>
   82c8e:	f000 f933 	bl	82ef8 <__sinit>
   82c92:	e7b3      	b.n	82bfc <__swbuf_r+0x10>

00082c94 <__swsetup_r>:
   82c94:	4b2f      	ldr	r3, [pc, #188]	; (82d54 <__swsetup_r+0xc0>)
   82c96:	b570      	push	{r4, r5, r6, lr}
   82c98:	4606      	mov	r6, r0
   82c9a:	6818      	ldr	r0, [r3, #0]
   82c9c:	460c      	mov	r4, r1
   82c9e:	b110      	cbz	r0, 82ca6 <__swsetup_r+0x12>
   82ca0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82ca2:	2a00      	cmp	r2, #0
   82ca4:	d036      	beq.n	82d14 <__swsetup_r+0x80>
   82ca6:	89a5      	ldrh	r5, [r4, #12]
   82ca8:	b2ab      	uxth	r3, r5
   82caa:	0719      	lsls	r1, r3, #28
   82cac:	d50c      	bpl.n	82cc8 <__swsetup_r+0x34>
   82cae:	6922      	ldr	r2, [r4, #16]
   82cb0:	b1aa      	cbz	r2, 82cde <__swsetup_r+0x4a>
   82cb2:	f013 0101 	ands.w	r1, r3, #1
   82cb6:	d01e      	beq.n	82cf6 <__swsetup_r+0x62>
   82cb8:	6963      	ldr	r3, [r4, #20]
   82cba:	2100      	movs	r1, #0
   82cbc:	425b      	negs	r3, r3
   82cbe:	61a3      	str	r3, [r4, #24]
   82cc0:	60a1      	str	r1, [r4, #8]
   82cc2:	b1f2      	cbz	r2, 82d02 <__swsetup_r+0x6e>
   82cc4:	2000      	movs	r0, #0
   82cc6:	bd70      	pop	{r4, r5, r6, pc}
   82cc8:	06da      	lsls	r2, r3, #27
   82cca:	d53a      	bpl.n	82d42 <__swsetup_r+0xae>
   82ccc:	075b      	lsls	r3, r3, #29
   82cce:	d424      	bmi.n	82d1a <__swsetup_r+0x86>
   82cd0:	6922      	ldr	r2, [r4, #16]
   82cd2:	f045 0308 	orr.w	r3, r5, #8
   82cd6:	81a3      	strh	r3, [r4, #12]
   82cd8:	b29b      	uxth	r3, r3
   82cda:	2a00      	cmp	r2, #0
   82cdc:	d1e9      	bne.n	82cb2 <__swsetup_r+0x1e>
   82cde:	f403 7120 	and.w	r1, r3, #640	; 0x280
   82ce2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82ce6:	d0e4      	beq.n	82cb2 <__swsetup_r+0x1e>
   82ce8:	4630      	mov	r0, r6
   82cea:	4621      	mov	r1, r4
   82cec:	f000 fcce 	bl	8368c <__smakebuf_r>
   82cf0:	89a3      	ldrh	r3, [r4, #12]
   82cf2:	6922      	ldr	r2, [r4, #16]
   82cf4:	e7dd      	b.n	82cb2 <__swsetup_r+0x1e>
   82cf6:	0798      	lsls	r0, r3, #30
   82cf8:	bf58      	it	pl
   82cfa:	6961      	ldrpl	r1, [r4, #20]
   82cfc:	60a1      	str	r1, [r4, #8]
   82cfe:	2a00      	cmp	r2, #0
   82d00:	d1e0      	bne.n	82cc4 <__swsetup_r+0x30>
   82d02:	89a3      	ldrh	r3, [r4, #12]
   82d04:	061a      	lsls	r2, r3, #24
   82d06:	d5dd      	bpl.n	82cc4 <__swsetup_r+0x30>
   82d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d0c:	81a3      	strh	r3, [r4, #12]
   82d0e:	f04f 30ff 	mov.w	r0, #4294967295
   82d12:	bd70      	pop	{r4, r5, r6, pc}
   82d14:	f000 f8f0 	bl	82ef8 <__sinit>
   82d18:	e7c5      	b.n	82ca6 <__swsetup_r+0x12>
   82d1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82d1c:	b149      	cbz	r1, 82d32 <__swsetup_r+0x9e>
   82d1e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82d22:	4299      	cmp	r1, r3
   82d24:	d003      	beq.n	82d2e <__swsetup_r+0x9a>
   82d26:	4630      	mov	r0, r6
   82d28:	f000 fa2a 	bl	83180 <_free_r>
   82d2c:	89a5      	ldrh	r5, [r4, #12]
   82d2e:	2300      	movs	r3, #0
   82d30:	6323      	str	r3, [r4, #48]	; 0x30
   82d32:	6922      	ldr	r2, [r4, #16]
   82d34:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   82d38:	2100      	movs	r1, #0
   82d3a:	b2ad      	uxth	r5, r5
   82d3c:	6022      	str	r2, [r4, #0]
   82d3e:	6061      	str	r1, [r4, #4]
   82d40:	e7c7      	b.n	82cd2 <__swsetup_r+0x3e>
   82d42:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   82d46:	2309      	movs	r3, #9
   82d48:	6033      	str	r3, [r6, #0]
   82d4a:	f04f 30ff 	mov.w	r0, #4294967295
   82d4e:	81a5      	strh	r5, [r4, #12]
   82d50:	bd70      	pop	{r4, r5, r6, pc}
   82d52:	bf00      	nop
   82d54:	20070560 	.word	0x20070560

00082d58 <register_fini>:
   82d58:	4b02      	ldr	r3, [pc, #8]	; (82d64 <register_fini+0xc>)
   82d5a:	b113      	cbz	r3, 82d62 <register_fini+0xa>
   82d5c:	4802      	ldr	r0, [pc, #8]	; (82d68 <register_fini+0x10>)
   82d5e:	f000 b805 	b.w	82d6c <atexit>
   82d62:	4770      	bx	lr
   82d64:	00000000 	.word	0x00000000
   82d68:	00082ff5 	.word	0x00082ff5

00082d6c <atexit>:
   82d6c:	4601      	mov	r1, r0
   82d6e:	2000      	movs	r0, #0
   82d70:	4602      	mov	r2, r0
   82d72:	4603      	mov	r3, r0
   82d74:	f001 bb76 	b.w	84464 <__register_exitproc>

00082d78 <__sflush_r>:
   82d78:	898b      	ldrh	r3, [r1, #12]
   82d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d7e:	b29a      	uxth	r2, r3
   82d80:	460d      	mov	r5, r1
   82d82:	0711      	lsls	r1, r2, #28
   82d84:	4680      	mov	r8, r0
   82d86:	d43c      	bmi.n	82e02 <__sflush_r+0x8a>
   82d88:	686a      	ldr	r2, [r5, #4]
   82d8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82d8e:	2a00      	cmp	r2, #0
   82d90:	81ab      	strh	r3, [r5, #12]
   82d92:	dd59      	ble.n	82e48 <__sflush_r+0xd0>
   82d94:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82d96:	2c00      	cmp	r4, #0
   82d98:	d04b      	beq.n	82e32 <__sflush_r+0xba>
   82d9a:	b29b      	uxth	r3, r3
   82d9c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82da0:	2100      	movs	r1, #0
   82da2:	b292      	uxth	r2, r2
   82da4:	f8d8 6000 	ldr.w	r6, [r8]
   82da8:	f8c8 1000 	str.w	r1, [r8]
   82dac:	2a00      	cmp	r2, #0
   82dae:	d04f      	beq.n	82e50 <__sflush_r+0xd8>
   82db0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82db2:	075f      	lsls	r7, r3, #29
   82db4:	d505      	bpl.n	82dc2 <__sflush_r+0x4a>
   82db6:	6869      	ldr	r1, [r5, #4]
   82db8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82dba:	1a52      	subs	r2, r2, r1
   82dbc:	b10b      	cbz	r3, 82dc2 <__sflush_r+0x4a>
   82dbe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82dc0:	1ad2      	subs	r2, r2, r3
   82dc2:	4640      	mov	r0, r8
   82dc4:	69e9      	ldr	r1, [r5, #28]
   82dc6:	2300      	movs	r3, #0
   82dc8:	47a0      	blx	r4
   82dca:	1c44      	adds	r4, r0, #1
   82dcc:	d04a      	beq.n	82e64 <__sflush_r+0xec>
   82dce:	89ab      	ldrh	r3, [r5, #12]
   82dd0:	692a      	ldr	r2, [r5, #16]
   82dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82dd6:	b29b      	uxth	r3, r3
   82dd8:	2100      	movs	r1, #0
   82dda:	602a      	str	r2, [r5, #0]
   82ddc:	04da      	lsls	r2, r3, #19
   82dde:	81ab      	strh	r3, [r5, #12]
   82de0:	6069      	str	r1, [r5, #4]
   82de2:	d44c      	bmi.n	82e7e <__sflush_r+0x106>
   82de4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82de6:	f8c8 6000 	str.w	r6, [r8]
   82dea:	b311      	cbz	r1, 82e32 <__sflush_r+0xba>
   82dec:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82df0:	4299      	cmp	r1, r3
   82df2:	d002      	beq.n	82dfa <__sflush_r+0x82>
   82df4:	4640      	mov	r0, r8
   82df6:	f000 f9c3 	bl	83180 <_free_r>
   82dfa:	2000      	movs	r0, #0
   82dfc:	6328      	str	r0, [r5, #48]	; 0x30
   82dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e02:	692e      	ldr	r6, [r5, #16]
   82e04:	b1ae      	cbz	r6, 82e32 <__sflush_r+0xba>
   82e06:	0791      	lsls	r1, r2, #30
   82e08:	682c      	ldr	r4, [r5, #0]
   82e0a:	bf0c      	ite	eq
   82e0c:	696b      	ldreq	r3, [r5, #20]
   82e0e:	2300      	movne	r3, #0
   82e10:	602e      	str	r6, [r5, #0]
   82e12:	1ba4      	subs	r4, r4, r6
   82e14:	60ab      	str	r3, [r5, #8]
   82e16:	e00a      	b.n	82e2e <__sflush_r+0xb6>
   82e18:	4632      	mov	r2, r6
   82e1a:	4623      	mov	r3, r4
   82e1c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82e1e:	4640      	mov	r0, r8
   82e20:	69e9      	ldr	r1, [r5, #28]
   82e22:	47b8      	blx	r7
   82e24:	2800      	cmp	r0, #0
   82e26:	ebc0 0404 	rsb	r4, r0, r4
   82e2a:	4406      	add	r6, r0
   82e2c:	dd04      	ble.n	82e38 <__sflush_r+0xc0>
   82e2e:	2c00      	cmp	r4, #0
   82e30:	dcf2      	bgt.n	82e18 <__sflush_r+0xa0>
   82e32:	2000      	movs	r0, #0
   82e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e38:	89ab      	ldrh	r3, [r5, #12]
   82e3a:	f04f 30ff 	mov.w	r0, #4294967295
   82e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82e42:	81ab      	strh	r3, [r5, #12]
   82e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e48:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82e4a:	2a00      	cmp	r2, #0
   82e4c:	dca2      	bgt.n	82d94 <__sflush_r+0x1c>
   82e4e:	e7f0      	b.n	82e32 <__sflush_r+0xba>
   82e50:	2301      	movs	r3, #1
   82e52:	4640      	mov	r0, r8
   82e54:	69e9      	ldr	r1, [r5, #28]
   82e56:	47a0      	blx	r4
   82e58:	1c43      	adds	r3, r0, #1
   82e5a:	4602      	mov	r2, r0
   82e5c:	d01e      	beq.n	82e9c <__sflush_r+0x124>
   82e5e:	89ab      	ldrh	r3, [r5, #12]
   82e60:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82e62:	e7a6      	b.n	82db2 <__sflush_r+0x3a>
   82e64:	f8d8 3000 	ldr.w	r3, [r8]
   82e68:	b95b      	cbnz	r3, 82e82 <__sflush_r+0x10a>
   82e6a:	89aa      	ldrh	r2, [r5, #12]
   82e6c:	6929      	ldr	r1, [r5, #16]
   82e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82e72:	b292      	uxth	r2, r2
   82e74:	606b      	str	r3, [r5, #4]
   82e76:	04d3      	lsls	r3, r2, #19
   82e78:	81aa      	strh	r2, [r5, #12]
   82e7a:	6029      	str	r1, [r5, #0]
   82e7c:	d5b2      	bpl.n	82de4 <__sflush_r+0x6c>
   82e7e:	6528      	str	r0, [r5, #80]	; 0x50
   82e80:	e7b0      	b.n	82de4 <__sflush_r+0x6c>
   82e82:	2b1d      	cmp	r3, #29
   82e84:	d001      	beq.n	82e8a <__sflush_r+0x112>
   82e86:	2b16      	cmp	r3, #22
   82e88:	d113      	bne.n	82eb2 <__sflush_r+0x13a>
   82e8a:	89a9      	ldrh	r1, [r5, #12]
   82e8c:	692b      	ldr	r3, [r5, #16]
   82e8e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82e92:	2200      	movs	r2, #0
   82e94:	81a9      	strh	r1, [r5, #12]
   82e96:	602b      	str	r3, [r5, #0]
   82e98:	606a      	str	r2, [r5, #4]
   82e9a:	e7a3      	b.n	82de4 <__sflush_r+0x6c>
   82e9c:	f8d8 3000 	ldr.w	r3, [r8]
   82ea0:	2b00      	cmp	r3, #0
   82ea2:	d0dc      	beq.n	82e5e <__sflush_r+0xe6>
   82ea4:	2b1d      	cmp	r3, #29
   82ea6:	d001      	beq.n	82eac <__sflush_r+0x134>
   82ea8:	2b16      	cmp	r3, #22
   82eaa:	d1c5      	bne.n	82e38 <__sflush_r+0xc0>
   82eac:	f8c8 6000 	str.w	r6, [r8]
   82eb0:	e7bf      	b.n	82e32 <__sflush_r+0xba>
   82eb2:	89ab      	ldrh	r3, [r5, #12]
   82eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82eb8:	81ab      	strh	r3, [r5, #12]
   82eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ebe:	bf00      	nop

00082ec0 <_fflush_r>:
   82ec0:	b510      	push	{r4, lr}
   82ec2:	4604      	mov	r4, r0
   82ec4:	b082      	sub	sp, #8
   82ec6:	b108      	cbz	r0, 82ecc <_fflush_r+0xc>
   82ec8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82eca:	b153      	cbz	r3, 82ee2 <_fflush_r+0x22>
   82ecc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82ed0:	b908      	cbnz	r0, 82ed6 <_fflush_r+0x16>
   82ed2:	b002      	add	sp, #8
   82ed4:	bd10      	pop	{r4, pc}
   82ed6:	4620      	mov	r0, r4
   82ed8:	b002      	add	sp, #8
   82eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82ede:	f7ff bf4b 	b.w	82d78 <__sflush_r>
   82ee2:	9101      	str	r1, [sp, #4]
   82ee4:	f000 f808 	bl	82ef8 <__sinit>
   82ee8:	9901      	ldr	r1, [sp, #4]
   82eea:	e7ef      	b.n	82ecc <_fflush_r+0xc>

00082eec <_cleanup_r>:
   82eec:	4901      	ldr	r1, [pc, #4]	; (82ef4 <_cleanup_r+0x8>)
   82eee:	f000 bb9f 	b.w	83630 <_fwalk>
   82ef2:	bf00      	nop
   82ef4:	000845b1 	.word	0x000845b1

00082ef8 <__sinit>:
   82ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82efc:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82efe:	b083      	sub	sp, #12
   82f00:	4607      	mov	r7, r0
   82f02:	2c00      	cmp	r4, #0
   82f04:	d165      	bne.n	82fd2 <__sinit+0xda>
   82f06:	687d      	ldr	r5, [r7, #4]
   82f08:	4833      	ldr	r0, [pc, #204]	; (82fd8 <__sinit+0xe0>)
   82f0a:	2304      	movs	r3, #4
   82f0c:	2103      	movs	r1, #3
   82f0e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82f12:	63f8      	str	r0, [r7, #60]	; 0x3c
   82f14:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82f18:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82f1c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82f20:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82f24:	81ab      	strh	r3, [r5, #12]
   82f26:	602c      	str	r4, [r5, #0]
   82f28:	606c      	str	r4, [r5, #4]
   82f2a:	60ac      	str	r4, [r5, #8]
   82f2c:	666c      	str	r4, [r5, #100]	; 0x64
   82f2e:	81ec      	strh	r4, [r5, #14]
   82f30:	612c      	str	r4, [r5, #16]
   82f32:	616c      	str	r4, [r5, #20]
   82f34:	61ac      	str	r4, [r5, #24]
   82f36:	4621      	mov	r1, r4
   82f38:	2208      	movs	r2, #8
   82f3a:	f7fe fed3 	bl	81ce4 <memset>
   82f3e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82fdc <__sinit+0xe4>
   82f42:	68be      	ldr	r6, [r7, #8]
   82f44:	f8df a098 	ldr.w	sl, [pc, #152]	; 82fe0 <__sinit+0xe8>
   82f48:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82fe4 <__sinit+0xec>
   82f4c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82fe8 <__sinit+0xf0>
   82f50:	2301      	movs	r3, #1
   82f52:	2209      	movs	r2, #9
   82f54:	61ed      	str	r5, [r5, #28]
   82f56:	f8c5 b020 	str.w	fp, [r5, #32]
   82f5a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82f5e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82f62:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82f66:	4621      	mov	r1, r4
   82f68:	81f3      	strh	r3, [r6, #14]
   82f6a:	81b2      	strh	r2, [r6, #12]
   82f6c:	6034      	str	r4, [r6, #0]
   82f6e:	6074      	str	r4, [r6, #4]
   82f70:	60b4      	str	r4, [r6, #8]
   82f72:	6674      	str	r4, [r6, #100]	; 0x64
   82f74:	6134      	str	r4, [r6, #16]
   82f76:	6174      	str	r4, [r6, #20]
   82f78:	61b4      	str	r4, [r6, #24]
   82f7a:	2208      	movs	r2, #8
   82f7c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82f80:	9301      	str	r3, [sp, #4]
   82f82:	f7fe feaf 	bl	81ce4 <memset>
   82f86:	68fd      	ldr	r5, [r7, #12]
   82f88:	2012      	movs	r0, #18
   82f8a:	2202      	movs	r2, #2
   82f8c:	61f6      	str	r6, [r6, #28]
   82f8e:	f8c6 b020 	str.w	fp, [r6, #32]
   82f92:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82f96:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82f9a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82f9e:	4621      	mov	r1, r4
   82fa0:	81a8      	strh	r0, [r5, #12]
   82fa2:	81ea      	strh	r2, [r5, #14]
   82fa4:	602c      	str	r4, [r5, #0]
   82fa6:	606c      	str	r4, [r5, #4]
   82fa8:	60ac      	str	r4, [r5, #8]
   82faa:	666c      	str	r4, [r5, #100]	; 0x64
   82fac:	612c      	str	r4, [r5, #16]
   82fae:	616c      	str	r4, [r5, #20]
   82fb0:	61ac      	str	r4, [r5, #24]
   82fb2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82fb6:	2208      	movs	r2, #8
   82fb8:	f7fe fe94 	bl	81ce4 <memset>
   82fbc:	9b01      	ldr	r3, [sp, #4]
   82fbe:	61ed      	str	r5, [r5, #28]
   82fc0:	f8c5 b020 	str.w	fp, [r5, #32]
   82fc4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82fc8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82fcc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   82fd2:	b003      	add	sp, #12
   82fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fd8:	00082eed 	.word	0x00082eed
   82fdc:	000842ed 	.word	0x000842ed
   82fe0:	00084311 	.word	0x00084311
   82fe4:	00084349 	.word	0x00084349
   82fe8:	00084369 	.word	0x00084369

00082fec <__sfp_lock_acquire>:
   82fec:	4770      	bx	lr
   82fee:	bf00      	nop

00082ff0 <__sfp_lock_release>:
   82ff0:	4770      	bx	lr
   82ff2:	bf00      	nop

00082ff4 <__libc_fini_array>:
   82ff4:	b538      	push	{r3, r4, r5, lr}
   82ff6:	4d09      	ldr	r5, [pc, #36]	; (8301c <__libc_fini_array+0x28>)
   82ff8:	4c09      	ldr	r4, [pc, #36]	; (83020 <__libc_fini_array+0x2c>)
   82ffa:	1b64      	subs	r4, r4, r5
   82ffc:	10a4      	asrs	r4, r4, #2
   82ffe:	bf18      	it	ne
   83000:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83004:	d005      	beq.n	83012 <__libc_fini_array+0x1e>
   83006:	3c01      	subs	r4, #1
   83008:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8300c:	4798      	blx	r3
   8300e:	2c00      	cmp	r4, #0
   83010:	d1f9      	bne.n	83006 <__libc_fini_array+0x12>
   83012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83016:	f001 bf63 	b.w	84ee0 <_fini>
   8301a:	bf00      	nop
   8301c:	00084eec 	.word	0x00084eec
   83020:	00084ef0 	.word	0x00084ef0

00083024 <_fputwc_r>:
   83024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83028:	8993      	ldrh	r3, [r2, #12]
   8302a:	460f      	mov	r7, r1
   8302c:	0499      	lsls	r1, r3, #18
   8302e:	b082      	sub	sp, #8
   83030:	4614      	mov	r4, r2
   83032:	4680      	mov	r8, r0
   83034:	d406      	bmi.n	83044 <_fputwc_r+0x20>
   83036:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83038:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8303c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83040:	81a3      	strh	r3, [r4, #12]
   83042:	6662      	str	r2, [r4, #100]	; 0x64
   83044:	f000 fb1c 	bl	83680 <__locale_mb_cur_max>
   83048:	2801      	cmp	r0, #1
   8304a:	d03e      	beq.n	830ca <_fputwc_r+0xa6>
   8304c:	463a      	mov	r2, r7
   8304e:	4640      	mov	r0, r8
   83050:	a901      	add	r1, sp, #4
   83052:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83056:	f001 f9bb 	bl	843d0 <_wcrtomb_r>
   8305a:	1c42      	adds	r2, r0, #1
   8305c:	4606      	mov	r6, r0
   8305e:	d02d      	beq.n	830bc <_fputwc_r+0x98>
   83060:	2800      	cmp	r0, #0
   83062:	d03a      	beq.n	830da <_fputwc_r+0xb6>
   83064:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83068:	2500      	movs	r5, #0
   8306a:	e009      	b.n	83080 <_fputwc_r+0x5c>
   8306c:	6823      	ldr	r3, [r4, #0]
   8306e:	7019      	strb	r1, [r3, #0]
   83070:	6823      	ldr	r3, [r4, #0]
   83072:	3301      	adds	r3, #1
   83074:	6023      	str	r3, [r4, #0]
   83076:	3501      	adds	r5, #1
   83078:	42b5      	cmp	r5, r6
   8307a:	d22e      	bcs.n	830da <_fputwc_r+0xb6>
   8307c:	ab01      	add	r3, sp, #4
   8307e:	5ce9      	ldrb	r1, [r5, r3]
   83080:	68a3      	ldr	r3, [r4, #8]
   83082:	3b01      	subs	r3, #1
   83084:	2b00      	cmp	r3, #0
   83086:	60a3      	str	r3, [r4, #8]
   83088:	daf0      	bge.n	8306c <_fputwc_r+0x48>
   8308a:	69a2      	ldr	r2, [r4, #24]
   8308c:	4293      	cmp	r3, r2
   8308e:	db06      	blt.n	8309e <_fputwc_r+0x7a>
   83090:	6823      	ldr	r3, [r4, #0]
   83092:	7019      	strb	r1, [r3, #0]
   83094:	6823      	ldr	r3, [r4, #0]
   83096:	7819      	ldrb	r1, [r3, #0]
   83098:	3301      	adds	r3, #1
   8309a:	290a      	cmp	r1, #10
   8309c:	d1ea      	bne.n	83074 <_fputwc_r+0x50>
   8309e:	4640      	mov	r0, r8
   830a0:	4622      	mov	r2, r4
   830a2:	f7ff fda3 	bl	82bec <__swbuf_r>
   830a6:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   830aa:	4258      	negs	r0, r3
   830ac:	4158      	adcs	r0, r3
   830ae:	2800      	cmp	r0, #0
   830b0:	d0e1      	beq.n	83076 <_fputwc_r+0x52>
   830b2:	f04f 30ff 	mov.w	r0, #4294967295
   830b6:	b002      	add	sp, #8
   830b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   830bc:	89a3      	ldrh	r3, [r4, #12]
   830be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   830c2:	81a3      	strh	r3, [r4, #12]
   830c4:	b002      	add	sp, #8
   830c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   830ca:	1e7b      	subs	r3, r7, #1
   830cc:	2bfe      	cmp	r3, #254	; 0xfe
   830ce:	d8bd      	bhi.n	8304c <_fputwc_r+0x28>
   830d0:	b2f9      	uxtb	r1, r7
   830d2:	4606      	mov	r6, r0
   830d4:	f88d 1004 	strb.w	r1, [sp, #4]
   830d8:	e7c6      	b.n	83068 <_fputwc_r+0x44>
   830da:	4638      	mov	r0, r7
   830dc:	b002      	add	sp, #8
   830de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   830e2:	bf00      	nop

000830e4 <_malloc_trim_r>:
   830e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   830e6:	4d23      	ldr	r5, [pc, #140]	; (83174 <_malloc_trim_r+0x90>)
   830e8:	460f      	mov	r7, r1
   830ea:	4604      	mov	r4, r0
   830ec:	f000 ff08 	bl	83f00 <__malloc_lock>
   830f0:	68ab      	ldr	r3, [r5, #8]
   830f2:	685e      	ldr	r6, [r3, #4]
   830f4:	f026 0603 	bic.w	r6, r6, #3
   830f8:	1bf1      	subs	r1, r6, r7
   830fa:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   830fe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83102:	f021 010f 	bic.w	r1, r1, #15
   83106:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8310a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8310e:	db07      	blt.n	83120 <_malloc_trim_r+0x3c>
   83110:	4620      	mov	r0, r4
   83112:	2100      	movs	r1, #0
   83114:	f001 f8d8 	bl	842c8 <_sbrk_r>
   83118:	68ab      	ldr	r3, [r5, #8]
   8311a:	4433      	add	r3, r6
   8311c:	4298      	cmp	r0, r3
   8311e:	d004      	beq.n	8312a <_malloc_trim_r+0x46>
   83120:	4620      	mov	r0, r4
   83122:	f000 feef 	bl	83f04 <__malloc_unlock>
   83126:	2000      	movs	r0, #0
   83128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8312a:	4620      	mov	r0, r4
   8312c:	4279      	negs	r1, r7
   8312e:	f001 f8cb 	bl	842c8 <_sbrk_r>
   83132:	3001      	adds	r0, #1
   83134:	d00d      	beq.n	83152 <_malloc_trim_r+0x6e>
   83136:	4b10      	ldr	r3, [pc, #64]	; (83178 <_malloc_trim_r+0x94>)
   83138:	68aa      	ldr	r2, [r5, #8]
   8313a:	6819      	ldr	r1, [r3, #0]
   8313c:	1bf6      	subs	r6, r6, r7
   8313e:	f046 0601 	orr.w	r6, r6, #1
   83142:	4620      	mov	r0, r4
   83144:	1bc9      	subs	r1, r1, r7
   83146:	6056      	str	r6, [r2, #4]
   83148:	6019      	str	r1, [r3, #0]
   8314a:	f000 fedb 	bl	83f04 <__malloc_unlock>
   8314e:	2001      	movs	r0, #1
   83150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83152:	4620      	mov	r0, r4
   83154:	2100      	movs	r1, #0
   83156:	f001 f8b7 	bl	842c8 <_sbrk_r>
   8315a:	68ab      	ldr	r3, [r5, #8]
   8315c:	1ac2      	subs	r2, r0, r3
   8315e:	2a0f      	cmp	r2, #15
   83160:	ddde      	ble.n	83120 <_malloc_trim_r+0x3c>
   83162:	4d06      	ldr	r5, [pc, #24]	; (8317c <_malloc_trim_r+0x98>)
   83164:	4904      	ldr	r1, [pc, #16]	; (83178 <_malloc_trim_r+0x94>)
   83166:	682d      	ldr	r5, [r5, #0]
   83168:	f042 0201 	orr.w	r2, r2, #1
   8316c:	1b40      	subs	r0, r0, r5
   8316e:	605a      	str	r2, [r3, #4]
   83170:	6008      	str	r0, [r1, #0]
   83172:	e7d5      	b.n	83120 <_malloc_trim_r+0x3c>
   83174:	20070588 	.word	0x20070588
   83178:	20070ad8 	.word	0x20070ad8
   8317c:	20070994 	.word	0x20070994

00083180 <_free_r>:
   83180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83184:	460d      	mov	r5, r1
   83186:	4606      	mov	r6, r0
   83188:	2900      	cmp	r1, #0
   8318a:	d055      	beq.n	83238 <_free_r+0xb8>
   8318c:	f000 feb8 	bl	83f00 <__malloc_lock>
   83190:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83194:	f8df c170 	ldr.w	ip, [pc, #368]	; 83308 <_free_r+0x188>
   83198:	f1a5 0408 	sub.w	r4, r5, #8
   8319c:	f021 0301 	bic.w	r3, r1, #1
   831a0:	18e2      	adds	r2, r4, r3
   831a2:	f8dc 0008 	ldr.w	r0, [ip, #8]
   831a6:	6857      	ldr	r7, [r2, #4]
   831a8:	4290      	cmp	r0, r2
   831aa:	f027 0703 	bic.w	r7, r7, #3
   831ae:	d068      	beq.n	83282 <_free_r+0x102>
   831b0:	f011 0101 	ands.w	r1, r1, #1
   831b4:	6057      	str	r7, [r2, #4]
   831b6:	d032      	beq.n	8321e <_free_r+0x9e>
   831b8:	2100      	movs	r1, #0
   831ba:	19d0      	adds	r0, r2, r7
   831bc:	6840      	ldr	r0, [r0, #4]
   831be:	07c0      	lsls	r0, r0, #31
   831c0:	d406      	bmi.n	831d0 <_free_r+0x50>
   831c2:	443b      	add	r3, r7
   831c4:	6890      	ldr	r0, [r2, #8]
   831c6:	2900      	cmp	r1, #0
   831c8:	d04d      	beq.n	83266 <_free_r+0xe6>
   831ca:	68d2      	ldr	r2, [r2, #12]
   831cc:	60c2      	str	r2, [r0, #12]
   831ce:	6090      	str	r0, [r2, #8]
   831d0:	f043 0201 	orr.w	r2, r3, #1
   831d4:	6062      	str	r2, [r4, #4]
   831d6:	50e3      	str	r3, [r4, r3]
   831d8:	b9e1      	cbnz	r1, 83214 <_free_r+0x94>
   831da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   831de:	d32d      	bcc.n	8323c <_free_r+0xbc>
   831e0:	0a5a      	lsrs	r2, r3, #9
   831e2:	2a04      	cmp	r2, #4
   831e4:	d869      	bhi.n	832ba <_free_r+0x13a>
   831e6:	0998      	lsrs	r0, r3, #6
   831e8:	3038      	adds	r0, #56	; 0x38
   831ea:	0041      	lsls	r1, r0, #1
   831ec:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   831f0:	f8dc 2008 	ldr.w	r2, [ip, #8]
   831f4:	4944      	ldr	r1, [pc, #272]	; (83308 <_free_r+0x188>)
   831f6:	4562      	cmp	r2, ip
   831f8:	d065      	beq.n	832c6 <_free_r+0x146>
   831fa:	6851      	ldr	r1, [r2, #4]
   831fc:	f021 0103 	bic.w	r1, r1, #3
   83200:	428b      	cmp	r3, r1
   83202:	d202      	bcs.n	8320a <_free_r+0x8a>
   83204:	6892      	ldr	r2, [r2, #8]
   83206:	4594      	cmp	ip, r2
   83208:	d1f7      	bne.n	831fa <_free_r+0x7a>
   8320a:	68d3      	ldr	r3, [r2, #12]
   8320c:	60e3      	str	r3, [r4, #12]
   8320e:	60a2      	str	r2, [r4, #8]
   83210:	609c      	str	r4, [r3, #8]
   83212:	60d4      	str	r4, [r2, #12]
   83214:	4630      	mov	r0, r6
   83216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8321a:	f000 be73 	b.w	83f04 <__malloc_unlock>
   8321e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83222:	f10c 0808 	add.w	r8, ip, #8
   83226:	1b64      	subs	r4, r4, r5
   83228:	68a0      	ldr	r0, [r4, #8]
   8322a:	442b      	add	r3, r5
   8322c:	4540      	cmp	r0, r8
   8322e:	d042      	beq.n	832b6 <_free_r+0x136>
   83230:	68e5      	ldr	r5, [r4, #12]
   83232:	60c5      	str	r5, [r0, #12]
   83234:	60a8      	str	r0, [r5, #8]
   83236:	e7c0      	b.n	831ba <_free_r+0x3a>
   83238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8323c:	08db      	lsrs	r3, r3, #3
   8323e:	109a      	asrs	r2, r3, #2
   83240:	2001      	movs	r0, #1
   83242:	4090      	lsls	r0, r2
   83244:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83248:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   8324c:	689a      	ldr	r2, [r3, #8]
   8324e:	4301      	orrs	r1, r0
   83250:	60a2      	str	r2, [r4, #8]
   83252:	60e3      	str	r3, [r4, #12]
   83254:	f8cc 1004 	str.w	r1, [ip, #4]
   83258:	4630      	mov	r0, r6
   8325a:	609c      	str	r4, [r3, #8]
   8325c:	60d4      	str	r4, [r2, #12]
   8325e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83262:	f000 be4f 	b.w	83f04 <__malloc_unlock>
   83266:	4d29      	ldr	r5, [pc, #164]	; (8330c <_free_r+0x18c>)
   83268:	42a8      	cmp	r0, r5
   8326a:	d1ae      	bne.n	831ca <_free_r+0x4a>
   8326c:	f043 0201 	orr.w	r2, r3, #1
   83270:	f8cc 4014 	str.w	r4, [ip, #20]
   83274:	f8cc 4010 	str.w	r4, [ip, #16]
   83278:	60e0      	str	r0, [r4, #12]
   8327a:	60a0      	str	r0, [r4, #8]
   8327c:	6062      	str	r2, [r4, #4]
   8327e:	50e3      	str	r3, [r4, r3]
   83280:	e7c8      	b.n	83214 <_free_r+0x94>
   83282:	441f      	add	r7, r3
   83284:	07cb      	lsls	r3, r1, #31
   83286:	d407      	bmi.n	83298 <_free_r+0x118>
   83288:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8328c:	1a64      	subs	r4, r4, r1
   8328e:	68e3      	ldr	r3, [r4, #12]
   83290:	68a2      	ldr	r2, [r4, #8]
   83292:	440f      	add	r7, r1
   83294:	60d3      	str	r3, [r2, #12]
   83296:	609a      	str	r2, [r3, #8]
   83298:	4b1d      	ldr	r3, [pc, #116]	; (83310 <_free_r+0x190>)
   8329a:	f047 0201 	orr.w	r2, r7, #1
   8329e:	681b      	ldr	r3, [r3, #0]
   832a0:	6062      	str	r2, [r4, #4]
   832a2:	429f      	cmp	r7, r3
   832a4:	f8cc 4008 	str.w	r4, [ip, #8]
   832a8:	d3b4      	bcc.n	83214 <_free_r+0x94>
   832aa:	4b1a      	ldr	r3, [pc, #104]	; (83314 <_free_r+0x194>)
   832ac:	4630      	mov	r0, r6
   832ae:	6819      	ldr	r1, [r3, #0]
   832b0:	f7ff ff18 	bl	830e4 <_malloc_trim_r>
   832b4:	e7ae      	b.n	83214 <_free_r+0x94>
   832b6:	2101      	movs	r1, #1
   832b8:	e77f      	b.n	831ba <_free_r+0x3a>
   832ba:	2a14      	cmp	r2, #20
   832bc:	d80b      	bhi.n	832d6 <_free_r+0x156>
   832be:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   832c2:	0041      	lsls	r1, r0, #1
   832c4:	e792      	b.n	831ec <_free_r+0x6c>
   832c6:	1080      	asrs	r0, r0, #2
   832c8:	2501      	movs	r5, #1
   832ca:	4085      	lsls	r5, r0
   832cc:	6848      	ldr	r0, [r1, #4]
   832ce:	4613      	mov	r3, r2
   832d0:	4328      	orrs	r0, r5
   832d2:	6048      	str	r0, [r1, #4]
   832d4:	e79a      	b.n	8320c <_free_r+0x8c>
   832d6:	2a54      	cmp	r2, #84	; 0x54
   832d8:	d803      	bhi.n	832e2 <_free_r+0x162>
   832da:	0b18      	lsrs	r0, r3, #12
   832dc:	306e      	adds	r0, #110	; 0x6e
   832de:	0041      	lsls	r1, r0, #1
   832e0:	e784      	b.n	831ec <_free_r+0x6c>
   832e2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   832e6:	d803      	bhi.n	832f0 <_free_r+0x170>
   832e8:	0bd8      	lsrs	r0, r3, #15
   832ea:	3077      	adds	r0, #119	; 0x77
   832ec:	0041      	lsls	r1, r0, #1
   832ee:	e77d      	b.n	831ec <_free_r+0x6c>
   832f0:	f240 5154 	movw	r1, #1364	; 0x554
   832f4:	428a      	cmp	r2, r1
   832f6:	d803      	bhi.n	83300 <_free_r+0x180>
   832f8:	0c98      	lsrs	r0, r3, #18
   832fa:	307c      	adds	r0, #124	; 0x7c
   832fc:	0041      	lsls	r1, r0, #1
   832fe:	e775      	b.n	831ec <_free_r+0x6c>
   83300:	21fc      	movs	r1, #252	; 0xfc
   83302:	207e      	movs	r0, #126	; 0x7e
   83304:	e772      	b.n	831ec <_free_r+0x6c>
   83306:	bf00      	nop
   83308:	20070588 	.word	0x20070588
   8330c:	20070590 	.word	0x20070590
   83310:	20070990 	.word	0x20070990
   83314:	20070ad4 	.word	0x20070ad4

00083318 <__sfvwrite_r>:
   83318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8331c:	6893      	ldr	r3, [r2, #8]
   8331e:	b083      	sub	sp, #12
   83320:	4616      	mov	r6, r2
   83322:	4681      	mov	r9, r0
   83324:	460c      	mov	r4, r1
   83326:	b32b      	cbz	r3, 83374 <__sfvwrite_r+0x5c>
   83328:	898b      	ldrh	r3, [r1, #12]
   8332a:	0719      	lsls	r1, r3, #28
   8332c:	d526      	bpl.n	8337c <__sfvwrite_r+0x64>
   8332e:	6922      	ldr	r2, [r4, #16]
   83330:	b322      	cbz	r2, 8337c <__sfvwrite_r+0x64>
   83332:	f003 0202 	and.w	r2, r3, #2
   83336:	b292      	uxth	r2, r2
   83338:	6835      	ldr	r5, [r6, #0]
   8333a:	2a00      	cmp	r2, #0
   8333c:	d02c      	beq.n	83398 <__sfvwrite_r+0x80>
   8333e:	f04f 0a00 	mov.w	sl, #0
   83342:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8362c <__sfvwrite_r+0x314>
   83346:	46d0      	mov	r8, sl
   83348:	45d8      	cmp	r8, fp
   8334a:	bf34      	ite	cc
   8334c:	4643      	movcc	r3, r8
   8334e:	465b      	movcs	r3, fp
   83350:	4652      	mov	r2, sl
   83352:	4648      	mov	r0, r9
   83354:	f1b8 0f00 	cmp.w	r8, #0
   83358:	d04f      	beq.n	833fa <__sfvwrite_r+0xe2>
   8335a:	69e1      	ldr	r1, [r4, #28]
   8335c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8335e:	47b8      	blx	r7
   83360:	2800      	cmp	r0, #0
   83362:	dd56      	ble.n	83412 <__sfvwrite_r+0xfa>
   83364:	68b3      	ldr	r3, [r6, #8]
   83366:	4482      	add	sl, r0
   83368:	1a1b      	subs	r3, r3, r0
   8336a:	ebc0 0808 	rsb	r8, r0, r8
   8336e:	60b3      	str	r3, [r6, #8]
   83370:	2b00      	cmp	r3, #0
   83372:	d1e9      	bne.n	83348 <__sfvwrite_r+0x30>
   83374:	2000      	movs	r0, #0
   83376:	b003      	add	sp, #12
   83378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8337c:	4648      	mov	r0, r9
   8337e:	4621      	mov	r1, r4
   83380:	f7ff fc88 	bl	82c94 <__swsetup_r>
   83384:	2800      	cmp	r0, #0
   83386:	f040 8148 	bne.w	8361a <__sfvwrite_r+0x302>
   8338a:	89a3      	ldrh	r3, [r4, #12]
   8338c:	6835      	ldr	r5, [r6, #0]
   8338e:	f003 0202 	and.w	r2, r3, #2
   83392:	b292      	uxth	r2, r2
   83394:	2a00      	cmp	r2, #0
   83396:	d1d2      	bne.n	8333e <__sfvwrite_r+0x26>
   83398:	f013 0a01 	ands.w	sl, r3, #1
   8339c:	d142      	bne.n	83424 <__sfvwrite_r+0x10c>
   8339e:	46d0      	mov	r8, sl
   833a0:	f1b8 0f00 	cmp.w	r8, #0
   833a4:	d023      	beq.n	833ee <__sfvwrite_r+0xd6>
   833a6:	059a      	lsls	r2, r3, #22
   833a8:	68a7      	ldr	r7, [r4, #8]
   833aa:	d576      	bpl.n	8349a <__sfvwrite_r+0x182>
   833ac:	45b8      	cmp	r8, r7
   833ae:	f0c0 80a4 	bcc.w	834fa <__sfvwrite_r+0x1e2>
   833b2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   833b6:	f040 80b2 	bne.w	8351e <__sfvwrite_r+0x206>
   833ba:	6820      	ldr	r0, [r4, #0]
   833bc:	46bb      	mov	fp, r7
   833be:	4651      	mov	r1, sl
   833c0:	465a      	mov	r2, fp
   833c2:	f000 fd37 	bl	83e34 <memmove>
   833c6:	68a2      	ldr	r2, [r4, #8]
   833c8:	6821      	ldr	r1, [r4, #0]
   833ca:	1bd2      	subs	r2, r2, r7
   833cc:	eb01 030b 	add.w	r3, r1, fp
   833d0:	60a2      	str	r2, [r4, #8]
   833d2:	6023      	str	r3, [r4, #0]
   833d4:	4642      	mov	r2, r8
   833d6:	68b3      	ldr	r3, [r6, #8]
   833d8:	4492      	add	sl, r2
   833da:	1a9b      	subs	r3, r3, r2
   833dc:	ebc2 0808 	rsb	r8, r2, r8
   833e0:	60b3      	str	r3, [r6, #8]
   833e2:	2b00      	cmp	r3, #0
   833e4:	d0c6      	beq.n	83374 <__sfvwrite_r+0x5c>
   833e6:	89a3      	ldrh	r3, [r4, #12]
   833e8:	f1b8 0f00 	cmp.w	r8, #0
   833ec:	d1db      	bne.n	833a6 <__sfvwrite_r+0x8e>
   833ee:	f8d5 a000 	ldr.w	sl, [r5]
   833f2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   833f6:	3508      	adds	r5, #8
   833f8:	e7d2      	b.n	833a0 <__sfvwrite_r+0x88>
   833fa:	f8d5 a000 	ldr.w	sl, [r5]
   833fe:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83402:	3508      	adds	r5, #8
   83404:	e7a0      	b.n	83348 <__sfvwrite_r+0x30>
   83406:	4648      	mov	r0, r9
   83408:	4621      	mov	r1, r4
   8340a:	f7ff fd59 	bl	82ec0 <_fflush_r>
   8340e:	2800      	cmp	r0, #0
   83410:	d059      	beq.n	834c6 <__sfvwrite_r+0x1ae>
   83412:	89a3      	ldrh	r3, [r4, #12]
   83414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83418:	f04f 30ff 	mov.w	r0, #4294967295
   8341c:	81a3      	strh	r3, [r4, #12]
   8341e:	b003      	add	sp, #12
   83420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83424:	4692      	mov	sl, r2
   83426:	9201      	str	r2, [sp, #4]
   83428:	4693      	mov	fp, r2
   8342a:	4690      	mov	r8, r2
   8342c:	f1b8 0f00 	cmp.w	r8, #0
   83430:	d02b      	beq.n	8348a <__sfvwrite_r+0x172>
   83432:	9f01      	ldr	r7, [sp, #4]
   83434:	2f00      	cmp	r7, #0
   83436:	d064      	beq.n	83502 <__sfvwrite_r+0x1ea>
   83438:	6820      	ldr	r0, [r4, #0]
   8343a:	6921      	ldr	r1, [r4, #16]
   8343c:	45c2      	cmp	sl, r8
   8343e:	bf34      	ite	cc
   83440:	4653      	movcc	r3, sl
   83442:	4643      	movcs	r3, r8
   83444:	4288      	cmp	r0, r1
   83446:	461f      	mov	r7, r3
   83448:	f8d4 c008 	ldr.w	ip, [r4, #8]
   8344c:	6962      	ldr	r2, [r4, #20]
   8344e:	d903      	bls.n	83458 <__sfvwrite_r+0x140>
   83450:	4494      	add	ip, r2
   83452:	4563      	cmp	r3, ip
   83454:	f300 80ae 	bgt.w	835b4 <__sfvwrite_r+0x29c>
   83458:	4293      	cmp	r3, r2
   8345a:	db36      	blt.n	834ca <__sfvwrite_r+0x1b2>
   8345c:	4613      	mov	r3, r2
   8345e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83460:	4648      	mov	r0, r9
   83462:	69e1      	ldr	r1, [r4, #28]
   83464:	465a      	mov	r2, fp
   83466:	47b8      	blx	r7
   83468:	1e07      	subs	r7, r0, #0
   8346a:	ddd2      	ble.n	83412 <__sfvwrite_r+0xfa>
   8346c:	ebba 0a07 	subs.w	sl, sl, r7
   83470:	d03a      	beq.n	834e8 <__sfvwrite_r+0x1d0>
   83472:	68b3      	ldr	r3, [r6, #8]
   83474:	44bb      	add	fp, r7
   83476:	1bdb      	subs	r3, r3, r7
   83478:	ebc7 0808 	rsb	r8, r7, r8
   8347c:	60b3      	str	r3, [r6, #8]
   8347e:	2b00      	cmp	r3, #0
   83480:	f43f af78 	beq.w	83374 <__sfvwrite_r+0x5c>
   83484:	f1b8 0f00 	cmp.w	r8, #0
   83488:	d1d3      	bne.n	83432 <__sfvwrite_r+0x11a>
   8348a:	2700      	movs	r7, #0
   8348c:	f8d5 b000 	ldr.w	fp, [r5]
   83490:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83494:	9701      	str	r7, [sp, #4]
   83496:	3508      	adds	r5, #8
   83498:	e7c8      	b.n	8342c <__sfvwrite_r+0x114>
   8349a:	6820      	ldr	r0, [r4, #0]
   8349c:	6923      	ldr	r3, [r4, #16]
   8349e:	4298      	cmp	r0, r3
   834a0:	d802      	bhi.n	834a8 <__sfvwrite_r+0x190>
   834a2:	6963      	ldr	r3, [r4, #20]
   834a4:	4598      	cmp	r8, r3
   834a6:	d272      	bcs.n	8358e <__sfvwrite_r+0x276>
   834a8:	45b8      	cmp	r8, r7
   834aa:	bf38      	it	cc
   834ac:	4647      	movcc	r7, r8
   834ae:	463a      	mov	r2, r7
   834b0:	4651      	mov	r1, sl
   834b2:	f000 fcbf 	bl	83e34 <memmove>
   834b6:	68a3      	ldr	r3, [r4, #8]
   834b8:	6822      	ldr	r2, [r4, #0]
   834ba:	1bdb      	subs	r3, r3, r7
   834bc:	443a      	add	r2, r7
   834be:	60a3      	str	r3, [r4, #8]
   834c0:	6022      	str	r2, [r4, #0]
   834c2:	2b00      	cmp	r3, #0
   834c4:	d09f      	beq.n	83406 <__sfvwrite_r+0xee>
   834c6:	463a      	mov	r2, r7
   834c8:	e785      	b.n	833d6 <__sfvwrite_r+0xbe>
   834ca:	461a      	mov	r2, r3
   834cc:	4659      	mov	r1, fp
   834ce:	9300      	str	r3, [sp, #0]
   834d0:	f000 fcb0 	bl	83e34 <memmove>
   834d4:	9b00      	ldr	r3, [sp, #0]
   834d6:	68a1      	ldr	r1, [r4, #8]
   834d8:	6822      	ldr	r2, [r4, #0]
   834da:	1ac9      	subs	r1, r1, r3
   834dc:	ebba 0a07 	subs.w	sl, sl, r7
   834e0:	4413      	add	r3, r2
   834e2:	60a1      	str	r1, [r4, #8]
   834e4:	6023      	str	r3, [r4, #0]
   834e6:	d1c4      	bne.n	83472 <__sfvwrite_r+0x15a>
   834e8:	4648      	mov	r0, r9
   834ea:	4621      	mov	r1, r4
   834ec:	f7ff fce8 	bl	82ec0 <_fflush_r>
   834f0:	2800      	cmp	r0, #0
   834f2:	d18e      	bne.n	83412 <__sfvwrite_r+0xfa>
   834f4:	f8cd a004 	str.w	sl, [sp, #4]
   834f8:	e7bb      	b.n	83472 <__sfvwrite_r+0x15a>
   834fa:	6820      	ldr	r0, [r4, #0]
   834fc:	4647      	mov	r7, r8
   834fe:	46c3      	mov	fp, r8
   83500:	e75d      	b.n	833be <__sfvwrite_r+0xa6>
   83502:	4658      	mov	r0, fp
   83504:	210a      	movs	r1, #10
   83506:	4642      	mov	r2, r8
   83508:	f000 fbd4 	bl	83cb4 <memchr>
   8350c:	2800      	cmp	r0, #0
   8350e:	d07f      	beq.n	83610 <__sfvwrite_r+0x2f8>
   83510:	f100 0a01 	add.w	sl, r0, #1
   83514:	2701      	movs	r7, #1
   83516:	ebcb 0a0a 	rsb	sl, fp, sl
   8351a:	9701      	str	r7, [sp, #4]
   8351c:	e78c      	b.n	83438 <__sfvwrite_r+0x120>
   8351e:	6822      	ldr	r2, [r4, #0]
   83520:	6921      	ldr	r1, [r4, #16]
   83522:	6967      	ldr	r7, [r4, #20]
   83524:	ebc1 0c02 	rsb	ip, r1, r2
   83528:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8352c:	f10c 0201 	add.w	r2, ip, #1
   83530:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83534:	4442      	add	r2, r8
   83536:	107f      	asrs	r7, r7, #1
   83538:	4297      	cmp	r7, r2
   8353a:	bf34      	ite	cc
   8353c:	4617      	movcc	r7, r2
   8353e:	463a      	movcs	r2, r7
   83540:	055b      	lsls	r3, r3, #21
   83542:	d54f      	bpl.n	835e4 <__sfvwrite_r+0x2cc>
   83544:	4611      	mov	r1, r2
   83546:	4648      	mov	r0, r9
   83548:	f8cd c000 	str.w	ip, [sp]
   8354c:	f000 f916 	bl	8377c <_malloc_r>
   83550:	f8dd c000 	ldr.w	ip, [sp]
   83554:	4683      	mov	fp, r0
   83556:	2800      	cmp	r0, #0
   83558:	d062      	beq.n	83620 <__sfvwrite_r+0x308>
   8355a:	4662      	mov	r2, ip
   8355c:	6921      	ldr	r1, [r4, #16]
   8355e:	f8cd c000 	str.w	ip, [sp]
   83562:	f000 fbf1 	bl	83d48 <memcpy>
   83566:	89a2      	ldrh	r2, [r4, #12]
   83568:	f8dd c000 	ldr.w	ip, [sp]
   8356c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83574:	81a2      	strh	r2, [r4, #12]
   83576:	eb0b 000c 	add.w	r0, fp, ip
   8357a:	ebcc 0207 	rsb	r2, ip, r7
   8357e:	f8c4 b010 	str.w	fp, [r4, #16]
   83582:	6167      	str	r7, [r4, #20]
   83584:	6020      	str	r0, [r4, #0]
   83586:	60a2      	str	r2, [r4, #8]
   83588:	4647      	mov	r7, r8
   8358a:	46c3      	mov	fp, r8
   8358c:	e717      	b.n	833be <__sfvwrite_r+0xa6>
   8358e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83592:	4590      	cmp	r8, r2
   83594:	bf38      	it	cc
   83596:	4642      	movcc	r2, r8
   83598:	fb92 f2f3 	sdiv	r2, r2, r3
   8359c:	fb02 f303 	mul.w	r3, r2, r3
   835a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   835a2:	4648      	mov	r0, r9
   835a4:	69e1      	ldr	r1, [r4, #28]
   835a6:	4652      	mov	r2, sl
   835a8:	47b8      	blx	r7
   835aa:	2800      	cmp	r0, #0
   835ac:	f77f af31 	ble.w	83412 <__sfvwrite_r+0xfa>
   835b0:	4602      	mov	r2, r0
   835b2:	e710      	b.n	833d6 <__sfvwrite_r+0xbe>
   835b4:	4662      	mov	r2, ip
   835b6:	4659      	mov	r1, fp
   835b8:	f8cd c000 	str.w	ip, [sp]
   835bc:	f000 fc3a 	bl	83e34 <memmove>
   835c0:	f8dd c000 	ldr.w	ip, [sp]
   835c4:	6823      	ldr	r3, [r4, #0]
   835c6:	4648      	mov	r0, r9
   835c8:	4463      	add	r3, ip
   835ca:	6023      	str	r3, [r4, #0]
   835cc:	4621      	mov	r1, r4
   835ce:	f8cd c000 	str.w	ip, [sp]
   835d2:	f7ff fc75 	bl	82ec0 <_fflush_r>
   835d6:	f8dd c000 	ldr.w	ip, [sp]
   835da:	2800      	cmp	r0, #0
   835dc:	f47f af19 	bne.w	83412 <__sfvwrite_r+0xfa>
   835e0:	4667      	mov	r7, ip
   835e2:	e743      	b.n	8346c <__sfvwrite_r+0x154>
   835e4:	4648      	mov	r0, r9
   835e6:	f8cd c000 	str.w	ip, [sp]
   835ea:	f000 fc8d 	bl	83f08 <_realloc_r>
   835ee:	f8dd c000 	ldr.w	ip, [sp]
   835f2:	4683      	mov	fp, r0
   835f4:	2800      	cmp	r0, #0
   835f6:	d1be      	bne.n	83576 <__sfvwrite_r+0x25e>
   835f8:	4648      	mov	r0, r9
   835fa:	6921      	ldr	r1, [r4, #16]
   835fc:	f7ff fdc0 	bl	83180 <_free_r>
   83600:	89a3      	ldrh	r3, [r4, #12]
   83602:	220c      	movs	r2, #12
   83604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83608:	b29b      	uxth	r3, r3
   8360a:	f8c9 2000 	str.w	r2, [r9]
   8360e:	e701      	b.n	83414 <__sfvwrite_r+0xfc>
   83610:	2701      	movs	r7, #1
   83612:	f108 0a01 	add.w	sl, r8, #1
   83616:	9701      	str	r7, [sp, #4]
   83618:	e70e      	b.n	83438 <__sfvwrite_r+0x120>
   8361a:	f04f 30ff 	mov.w	r0, #4294967295
   8361e:	e6aa      	b.n	83376 <__sfvwrite_r+0x5e>
   83620:	230c      	movs	r3, #12
   83622:	f8c9 3000 	str.w	r3, [r9]
   83626:	89a3      	ldrh	r3, [r4, #12]
   83628:	e6f4      	b.n	83414 <__sfvwrite_r+0xfc>
   8362a:	bf00      	nop
   8362c:	7ffffc00 	.word	0x7ffffc00

00083630 <_fwalk>:
   83630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83634:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   83638:	4688      	mov	r8, r1
   8363a:	d019      	beq.n	83670 <_fwalk+0x40>
   8363c:	2600      	movs	r6, #0
   8363e:	687d      	ldr	r5, [r7, #4]
   83640:	68bc      	ldr	r4, [r7, #8]
   83642:	3d01      	subs	r5, #1
   83644:	d40e      	bmi.n	83664 <_fwalk+0x34>
   83646:	89a3      	ldrh	r3, [r4, #12]
   83648:	3d01      	subs	r5, #1
   8364a:	2b01      	cmp	r3, #1
   8364c:	d906      	bls.n	8365c <_fwalk+0x2c>
   8364e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83652:	4620      	mov	r0, r4
   83654:	3301      	adds	r3, #1
   83656:	d001      	beq.n	8365c <_fwalk+0x2c>
   83658:	47c0      	blx	r8
   8365a:	4306      	orrs	r6, r0
   8365c:	1c6b      	adds	r3, r5, #1
   8365e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83662:	d1f0      	bne.n	83646 <_fwalk+0x16>
   83664:	683f      	ldr	r7, [r7, #0]
   83666:	2f00      	cmp	r7, #0
   83668:	d1e9      	bne.n	8363e <_fwalk+0xe>
   8366a:	4630      	mov	r0, r6
   8366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83670:	463e      	mov	r6, r7
   83672:	4630      	mov	r0, r6
   83674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083678 <__locale_charset>:
   83678:	4800      	ldr	r0, [pc, #0]	; (8367c <__locale_charset+0x4>)
   8367a:	4770      	bx	lr
   8367c:	20070564 	.word	0x20070564

00083680 <__locale_mb_cur_max>:
   83680:	4b01      	ldr	r3, [pc, #4]	; (83688 <__locale_mb_cur_max+0x8>)
   83682:	6818      	ldr	r0, [r3, #0]
   83684:	4770      	bx	lr
   83686:	bf00      	nop
   83688:	20070584 	.word	0x20070584

0008368c <__smakebuf_r>:
   8368c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8368e:	898b      	ldrh	r3, [r1, #12]
   83690:	b091      	sub	sp, #68	; 0x44
   83692:	b29a      	uxth	r2, r3
   83694:	0796      	lsls	r6, r2, #30
   83696:	460c      	mov	r4, r1
   83698:	4605      	mov	r5, r0
   8369a:	d437      	bmi.n	8370c <__smakebuf_r+0x80>
   8369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836a0:	2900      	cmp	r1, #0
   836a2:	db17      	blt.n	836d4 <__smakebuf_r+0x48>
   836a4:	aa01      	add	r2, sp, #4
   836a6:	f000 ff8b 	bl	845c0 <_fstat_r>
   836aa:	2800      	cmp	r0, #0
   836ac:	db10      	blt.n	836d0 <__smakebuf_r+0x44>
   836ae:	9b02      	ldr	r3, [sp, #8]
   836b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   836b4:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   836b8:	424f      	negs	r7, r1
   836ba:	414f      	adcs	r7, r1
   836bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   836c0:	d02c      	beq.n	8371c <__smakebuf_r+0x90>
   836c2:	89a3      	ldrh	r3, [r4, #12]
   836c4:	f44f 6680 	mov.w	r6, #1024	; 0x400
   836c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   836cc:	81a3      	strh	r3, [r4, #12]
   836ce:	e00b      	b.n	836e8 <__smakebuf_r+0x5c>
   836d0:	89a3      	ldrh	r3, [r4, #12]
   836d2:	b29a      	uxth	r2, r3
   836d4:	f012 0f80 	tst.w	r2, #128	; 0x80
   836d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   836dc:	81a3      	strh	r3, [r4, #12]
   836de:	bf14      	ite	ne
   836e0:	2640      	movne	r6, #64	; 0x40
   836e2:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   836e6:	2700      	movs	r7, #0
   836e8:	4628      	mov	r0, r5
   836ea:	4631      	mov	r1, r6
   836ec:	f000 f846 	bl	8377c <_malloc_r>
   836f0:	89a3      	ldrh	r3, [r4, #12]
   836f2:	2800      	cmp	r0, #0
   836f4:	d029      	beq.n	8374a <__smakebuf_r+0xbe>
   836f6:	4a1b      	ldr	r2, [pc, #108]	; (83764 <__smakebuf_r+0xd8>)
   836f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   836fc:	63ea      	str	r2, [r5, #60]	; 0x3c
   836fe:	81a3      	strh	r3, [r4, #12]
   83700:	6020      	str	r0, [r4, #0]
   83702:	6120      	str	r0, [r4, #16]
   83704:	6166      	str	r6, [r4, #20]
   83706:	b9a7      	cbnz	r7, 83732 <__smakebuf_r+0xa6>
   83708:	b011      	add	sp, #68	; 0x44
   8370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8370c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   83710:	2201      	movs	r2, #1
   83712:	600b      	str	r3, [r1, #0]
   83714:	610b      	str	r3, [r1, #16]
   83716:	614a      	str	r2, [r1, #20]
   83718:	b011      	add	sp, #68	; 0x44
   8371a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8371c:	4a12      	ldr	r2, [pc, #72]	; (83768 <__smakebuf_r+0xdc>)
   8371e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   83720:	4293      	cmp	r3, r2
   83722:	d1ce      	bne.n	836c2 <__smakebuf_r+0x36>
   83724:	89a3      	ldrh	r3, [r4, #12]
   83726:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8372a:	4333      	orrs	r3, r6
   8372c:	81a3      	strh	r3, [r4, #12]
   8372e:	64e6      	str	r6, [r4, #76]	; 0x4c
   83730:	e7da      	b.n	836e8 <__smakebuf_r+0x5c>
   83732:	4628      	mov	r0, r5
   83734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83738:	f000 ff56 	bl	845e8 <_isatty_r>
   8373c:	2800      	cmp	r0, #0
   8373e:	d0e3      	beq.n	83708 <__smakebuf_r+0x7c>
   83740:	89a3      	ldrh	r3, [r4, #12]
   83742:	f043 0301 	orr.w	r3, r3, #1
   83746:	81a3      	strh	r3, [r4, #12]
   83748:	e7de      	b.n	83708 <__smakebuf_r+0x7c>
   8374a:	059a      	lsls	r2, r3, #22
   8374c:	d4dc      	bmi.n	83708 <__smakebuf_r+0x7c>
   8374e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83752:	f043 0302 	orr.w	r3, r3, #2
   83756:	2101      	movs	r1, #1
   83758:	81a3      	strh	r3, [r4, #12]
   8375a:	6022      	str	r2, [r4, #0]
   8375c:	6122      	str	r2, [r4, #16]
   8375e:	6161      	str	r1, [r4, #20]
   83760:	e7d2      	b.n	83708 <__smakebuf_r+0x7c>
   83762:	bf00      	nop
   83764:	00082eed 	.word	0x00082eed
   83768:	00084349 	.word	0x00084349

0008376c <malloc>:
   8376c:	4b02      	ldr	r3, [pc, #8]	; (83778 <malloc+0xc>)
   8376e:	4601      	mov	r1, r0
   83770:	6818      	ldr	r0, [r3, #0]
   83772:	f000 b803 	b.w	8377c <_malloc_r>
   83776:	bf00      	nop
   83778:	20070560 	.word	0x20070560

0008377c <_malloc_r>:
   8377c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83780:	f101 050b 	add.w	r5, r1, #11
   83784:	2d16      	cmp	r5, #22
   83786:	b083      	sub	sp, #12
   83788:	4606      	mov	r6, r0
   8378a:	d927      	bls.n	837dc <_malloc_r+0x60>
   8378c:	f035 0507 	bics.w	r5, r5, #7
   83790:	d427      	bmi.n	837e2 <_malloc_r+0x66>
   83792:	42a9      	cmp	r1, r5
   83794:	d825      	bhi.n	837e2 <_malloc_r+0x66>
   83796:	4630      	mov	r0, r6
   83798:	f000 fbb2 	bl	83f00 <__malloc_lock>
   8379c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   837a0:	d226      	bcs.n	837f0 <_malloc_r+0x74>
   837a2:	4fc1      	ldr	r7, [pc, #772]	; (83aa8 <_malloc_r+0x32c>)
   837a4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   837a8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   837ac:	68dc      	ldr	r4, [r3, #12]
   837ae:	429c      	cmp	r4, r3
   837b0:	f000 81d2 	beq.w	83b58 <_malloc_r+0x3dc>
   837b4:	6863      	ldr	r3, [r4, #4]
   837b6:	68e2      	ldr	r2, [r4, #12]
   837b8:	f023 0303 	bic.w	r3, r3, #3
   837bc:	4423      	add	r3, r4
   837be:	6858      	ldr	r0, [r3, #4]
   837c0:	68a1      	ldr	r1, [r4, #8]
   837c2:	f040 0501 	orr.w	r5, r0, #1
   837c6:	60ca      	str	r2, [r1, #12]
   837c8:	4630      	mov	r0, r6
   837ca:	6091      	str	r1, [r2, #8]
   837cc:	605d      	str	r5, [r3, #4]
   837ce:	f000 fb99 	bl	83f04 <__malloc_unlock>
   837d2:	3408      	adds	r4, #8
   837d4:	4620      	mov	r0, r4
   837d6:	b003      	add	sp, #12
   837d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837dc:	2510      	movs	r5, #16
   837de:	42a9      	cmp	r1, r5
   837e0:	d9d9      	bls.n	83796 <_malloc_r+0x1a>
   837e2:	2400      	movs	r4, #0
   837e4:	230c      	movs	r3, #12
   837e6:	4620      	mov	r0, r4
   837e8:	6033      	str	r3, [r6, #0]
   837ea:	b003      	add	sp, #12
   837ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837f0:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   837f4:	f000 8089 	beq.w	8390a <_malloc_r+0x18e>
   837f8:	f1bc 0f04 	cmp.w	ip, #4
   837fc:	f200 8160 	bhi.w	83ac0 <_malloc_r+0x344>
   83800:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   83804:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   83808:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8380c:	4fa6      	ldr	r7, [pc, #664]	; (83aa8 <_malloc_r+0x32c>)
   8380e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   83812:	68cc      	ldr	r4, [r1, #12]
   83814:	42a1      	cmp	r1, r4
   83816:	d105      	bne.n	83824 <_malloc_r+0xa8>
   83818:	e00c      	b.n	83834 <_malloc_r+0xb8>
   8381a:	2b00      	cmp	r3, #0
   8381c:	da79      	bge.n	83912 <_malloc_r+0x196>
   8381e:	68e4      	ldr	r4, [r4, #12]
   83820:	42a1      	cmp	r1, r4
   83822:	d007      	beq.n	83834 <_malloc_r+0xb8>
   83824:	6862      	ldr	r2, [r4, #4]
   83826:	f022 0203 	bic.w	r2, r2, #3
   8382a:	1b53      	subs	r3, r2, r5
   8382c:	2b0f      	cmp	r3, #15
   8382e:	ddf4      	ble.n	8381a <_malloc_r+0x9e>
   83830:	f10c 3cff 	add.w	ip, ip, #4294967295
   83834:	f10c 0c01 	add.w	ip, ip, #1
   83838:	4b9b      	ldr	r3, [pc, #620]	; (83aa8 <_malloc_r+0x32c>)
   8383a:	693c      	ldr	r4, [r7, #16]
   8383c:	f103 0e08 	add.w	lr, r3, #8
   83840:	4574      	cmp	r4, lr
   83842:	f000 817e 	beq.w	83b42 <_malloc_r+0x3c6>
   83846:	6861      	ldr	r1, [r4, #4]
   83848:	f021 0103 	bic.w	r1, r1, #3
   8384c:	1b4a      	subs	r2, r1, r5
   8384e:	2a0f      	cmp	r2, #15
   83850:	f300 8164 	bgt.w	83b1c <_malloc_r+0x3a0>
   83854:	2a00      	cmp	r2, #0
   83856:	f8c3 e014 	str.w	lr, [r3, #20]
   8385a:	f8c3 e010 	str.w	lr, [r3, #16]
   8385e:	da69      	bge.n	83934 <_malloc_r+0x1b8>
   83860:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83864:	f080 813a 	bcs.w	83adc <_malloc_r+0x360>
   83868:	08c9      	lsrs	r1, r1, #3
   8386a:	108a      	asrs	r2, r1, #2
   8386c:	f04f 0801 	mov.w	r8, #1
   83870:	fa08 f802 	lsl.w	r8, r8, r2
   83874:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   83878:	685a      	ldr	r2, [r3, #4]
   8387a:	6888      	ldr	r0, [r1, #8]
   8387c:	ea48 0202 	orr.w	r2, r8, r2
   83880:	60a0      	str	r0, [r4, #8]
   83882:	60e1      	str	r1, [r4, #12]
   83884:	605a      	str	r2, [r3, #4]
   83886:	608c      	str	r4, [r1, #8]
   83888:	60c4      	str	r4, [r0, #12]
   8388a:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8388e:	2001      	movs	r0, #1
   83890:	4098      	lsls	r0, r3
   83892:	4290      	cmp	r0, r2
   83894:	d85b      	bhi.n	8394e <_malloc_r+0x1d2>
   83896:	4202      	tst	r2, r0
   83898:	d106      	bne.n	838a8 <_malloc_r+0x12c>
   8389a:	f02c 0c03 	bic.w	ip, ip, #3
   8389e:	0040      	lsls	r0, r0, #1
   838a0:	4202      	tst	r2, r0
   838a2:	f10c 0c04 	add.w	ip, ip, #4
   838a6:	d0fa      	beq.n	8389e <_malloc_r+0x122>
   838a8:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   838ac:	4644      	mov	r4, r8
   838ae:	46e1      	mov	r9, ip
   838b0:	68e3      	ldr	r3, [r4, #12]
   838b2:	429c      	cmp	r4, r3
   838b4:	d107      	bne.n	838c6 <_malloc_r+0x14a>
   838b6:	e146      	b.n	83b46 <_malloc_r+0x3ca>
   838b8:	2a00      	cmp	r2, #0
   838ba:	f280 8157 	bge.w	83b6c <_malloc_r+0x3f0>
   838be:	68db      	ldr	r3, [r3, #12]
   838c0:	429c      	cmp	r4, r3
   838c2:	f000 8140 	beq.w	83b46 <_malloc_r+0x3ca>
   838c6:	6859      	ldr	r1, [r3, #4]
   838c8:	f021 0103 	bic.w	r1, r1, #3
   838cc:	1b4a      	subs	r2, r1, r5
   838ce:	2a0f      	cmp	r2, #15
   838d0:	ddf2      	ble.n	838b8 <_malloc_r+0x13c>
   838d2:	461c      	mov	r4, r3
   838d4:	f854 cf08 	ldr.w	ip, [r4, #8]!
   838d8:	68d9      	ldr	r1, [r3, #12]
   838da:	f045 0901 	orr.w	r9, r5, #1
   838de:	f042 0801 	orr.w	r8, r2, #1
   838e2:	441d      	add	r5, r3
   838e4:	f8c3 9004 	str.w	r9, [r3, #4]
   838e8:	4630      	mov	r0, r6
   838ea:	f8cc 100c 	str.w	r1, [ip, #12]
   838ee:	f8c1 c008 	str.w	ip, [r1, #8]
   838f2:	617d      	str	r5, [r7, #20]
   838f4:	613d      	str	r5, [r7, #16]
   838f6:	f8c5 e00c 	str.w	lr, [r5, #12]
   838fa:	f8c5 e008 	str.w	lr, [r5, #8]
   838fe:	f8c5 8004 	str.w	r8, [r5, #4]
   83902:	50aa      	str	r2, [r5, r2]
   83904:	f000 fafe 	bl	83f04 <__malloc_unlock>
   83908:	e764      	b.n	837d4 <_malloc_r+0x58>
   8390a:	217e      	movs	r1, #126	; 0x7e
   8390c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   83910:	e77c      	b.n	8380c <_malloc_r+0x90>
   83912:	4422      	add	r2, r4
   83914:	6850      	ldr	r0, [r2, #4]
   83916:	68e3      	ldr	r3, [r4, #12]
   83918:	68a1      	ldr	r1, [r4, #8]
   8391a:	f040 0501 	orr.w	r5, r0, #1
   8391e:	60cb      	str	r3, [r1, #12]
   83920:	4630      	mov	r0, r6
   83922:	6099      	str	r1, [r3, #8]
   83924:	6055      	str	r5, [r2, #4]
   83926:	f000 faed 	bl	83f04 <__malloc_unlock>
   8392a:	3408      	adds	r4, #8
   8392c:	4620      	mov	r0, r4
   8392e:	b003      	add	sp, #12
   83930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83934:	4421      	add	r1, r4
   83936:	684b      	ldr	r3, [r1, #4]
   83938:	4630      	mov	r0, r6
   8393a:	f043 0301 	orr.w	r3, r3, #1
   8393e:	604b      	str	r3, [r1, #4]
   83940:	f000 fae0 	bl	83f04 <__malloc_unlock>
   83944:	3408      	adds	r4, #8
   83946:	4620      	mov	r0, r4
   83948:	b003      	add	sp, #12
   8394a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8394e:	68bc      	ldr	r4, [r7, #8]
   83950:	6863      	ldr	r3, [r4, #4]
   83952:	f023 0903 	bic.w	r9, r3, #3
   83956:	45a9      	cmp	r9, r5
   83958:	d304      	bcc.n	83964 <_malloc_r+0x1e8>
   8395a:	ebc5 0309 	rsb	r3, r5, r9
   8395e:	2b0f      	cmp	r3, #15
   83960:	f300 8091 	bgt.w	83a86 <_malloc_r+0x30a>
   83964:	4b51      	ldr	r3, [pc, #324]	; (83aac <_malloc_r+0x330>)
   83966:	4a52      	ldr	r2, [pc, #328]	; (83ab0 <_malloc_r+0x334>)
   83968:	6819      	ldr	r1, [r3, #0]
   8396a:	6813      	ldr	r3, [r2, #0]
   8396c:	eb05 0a01 	add.w	sl, r5, r1
   83970:	3301      	adds	r3, #1
   83972:	eb04 0b09 	add.w	fp, r4, r9
   83976:	f000 8161 	beq.w	83c3c <_malloc_r+0x4c0>
   8397a:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8397e:	f10a 0a0f 	add.w	sl, sl, #15
   83982:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   83986:	f02a 0a0f 	bic.w	sl, sl, #15
   8398a:	4630      	mov	r0, r6
   8398c:	4651      	mov	r1, sl
   8398e:	9201      	str	r2, [sp, #4]
   83990:	f000 fc9a 	bl	842c8 <_sbrk_r>
   83994:	f1b0 3fff 	cmp.w	r0, #4294967295
   83998:	4680      	mov	r8, r0
   8399a:	9a01      	ldr	r2, [sp, #4]
   8399c:	f000 8101 	beq.w	83ba2 <_malloc_r+0x426>
   839a0:	4583      	cmp	fp, r0
   839a2:	f200 80fb 	bhi.w	83b9c <_malloc_r+0x420>
   839a6:	f8df c114 	ldr.w	ip, [pc, #276]	; 83abc <_malloc_r+0x340>
   839aa:	45c3      	cmp	fp, r8
   839ac:	f8dc 3000 	ldr.w	r3, [ip]
   839b0:	4453      	add	r3, sl
   839b2:	f8cc 3000 	str.w	r3, [ip]
   839b6:	f000 814a 	beq.w	83c4e <_malloc_r+0x4d2>
   839ba:	6812      	ldr	r2, [r2, #0]
   839bc:	493c      	ldr	r1, [pc, #240]	; (83ab0 <_malloc_r+0x334>)
   839be:	3201      	adds	r2, #1
   839c0:	bf1b      	ittet	ne
   839c2:	ebcb 0b08 	rsbne	fp, fp, r8
   839c6:	445b      	addne	r3, fp
   839c8:	f8c1 8000 	streq.w	r8, [r1]
   839cc:	f8cc 3000 	strne.w	r3, [ip]
   839d0:	f018 0307 	ands.w	r3, r8, #7
   839d4:	f000 8114 	beq.w	83c00 <_malloc_r+0x484>
   839d8:	f1c3 0208 	rsb	r2, r3, #8
   839dc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   839e0:	4490      	add	r8, r2
   839e2:	3308      	adds	r3, #8
   839e4:	44c2      	add	sl, r8
   839e6:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   839ea:	ebca 0a03 	rsb	sl, sl, r3
   839ee:	4651      	mov	r1, sl
   839f0:	4630      	mov	r0, r6
   839f2:	f8cd c004 	str.w	ip, [sp, #4]
   839f6:	f000 fc67 	bl	842c8 <_sbrk_r>
   839fa:	1c43      	adds	r3, r0, #1
   839fc:	f8dd c004 	ldr.w	ip, [sp, #4]
   83a00:	f000 8135 	beq.w	83c6e <_malloc_r+0x4f2>
   83a04:	ebc8 0200 	rsb	r2, r8, r0
   83a08:	4452      	add	r2, sl
   83a0a:	f042 0201 	orr.w	r2, r2, #1
   83a0e:	f8dc 3000 	ldr.w	r3, [ip]
   83a12:	42bc      	cmp	r4, r7
   83a14:	4453      	add	r3, sl
   83a16:	f8c7 8008 	str.w	r8, [r7, #8]
   83a1a:	f8cc 3000 	str.w	r3, [ip]
   83a1e:	f8c8 2004 	str.w	r2, [r8, #4]
   83a22:	f8df a098 	ldr.w	sl, [pc, #152]	; 83abc <_malloc_r+0x340>
   83a26:	d015      	beq.n	83a54 <_malloc_r+0x2d8>
   83a28:	f1b9 0f0f 	cmp.w	r9, #15
   83a2c:	f240 80eb 	bls.w	83c06 <_malloc_r+0x48a>
   83a30:	6861      	ldr	r1, [r4, #4]
   83a32:	f1a9 020c 	sub.w	r2, r9, #12
   83a36:	f022 0207 	bic.w	r2, r2, #7
   83a3a:	f001 0101 	and.w	r1, r1, #1
   83a3e:	ea42 0e01 	orr.w	lr, r2, r1
   83a42:	2005      	movs	r0, #5
   83a44:	18a1      	adds	r1, r4, r2
   83a46:	2a0f      	cmp	r2, #15
   83a48:	f8c4 e004 	str.w	lr, [r4, #4]
   83a4c:	6048      	str	r0, [r1, #4]
   83a4e:	6088      	str	r0, [r1, #8]
   83a50:	f200 8111 	bhi.w	83c76 <_malloc_r+0x4fa>
   83a54:	4a17      	ldr	r2, [pc, #92]	; (83ab4 <_malloc_r+0x338>)
   83a56:	68bc      	ldr	r4, [r7, #8]
   83a58:	6811      	ldr	r1, [r2, #0]
   83a5a:	428b      	cmp	r3, r1
   83a5c:	bf88      	it	hi
   83a5e:	6013      	strhi	r3, [r2, #0]
   83a60:	4a15      	ldr	r2, [pc, #84]	; (83ab8 <_malloc_r+0x33c>)
   83a62:	6811      	ldr	r1, [r2, #0]
   83a64:	428b      	cmp	r3, r1
   83a66:	bf88      	it	hi
   83a68:	6013      	strhi	r3, [r2, #0]
   83a6a:	6862      	ldr	r2, [r4, #4]
   83a6c:	f022 0203 	bic.w	r2, r2, #3
   83a70:	4295      	cmp	r5, r2
   83a72:	ebc5 0302 	rsb	r3, r5, r2
   83a76:	d801      	bhi.n	83a7c <_malloc_r+0x300>
   83a78:	2b0f      	cmp	r3, #15
   83a7a:	dc04      	bgt.n	83a86 <_malloc_r+0x30a>
   83a7c:	4630      	mov	r0, r6
   83a7e:	f000 fa41 	bl	83f04 <__malloc_unlock>
   83a82:	2400      	movs	r4, #0
   83a84:	e6a6      	b.n	837d4 <_malloc_r+0x58>
   83a86:	f045 0201 	orr.w	r2, r5, #1
   83a8a:	f043 0301 	orr.w	r3, r3, #1
   83a8e:	4425      	add	r5, r4
   83a90:	6062      	str	r2, [r4, #4]
   83a92:	4630      	mov	r0, r6
   83a94:	60bd      	str	r5, [r7, #8]
   83a96:	606b      	str	r3, [r5, #4]
   83a98:	f000 fa34 	bl	83f04 <__malloc_unlock>
   83a9c:	3408      	adds	r4, #8
   83a9e:	4620      	mov	r0, r4
   83aa0:	b003      	add	sp, #12
   83aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83aa6:	bf00      	nop
   83aa8:	20070588 	.word	0x20070588
   83aac:	20070ad4 	.word	0x20070ad4
   83ab0:	20070994 	.word	0x20070994
   83ab4:	20070ad0 	.word	0x20070ad0
   83ab8:	20070acc 	.word	0x20070acc
   83abc:	20070ad8 	.word	0x20070ad8
   83ac0:	f1bc 0f14 	cmp.w	ip, #20
   83ac4:	d961      	bls.n	83b8a <_malloc_r+0x40e>
   83ac6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83aca:	f200 808f 	bhi.w	83bec <_malloc_r+0x470>
   83ace:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   83ad2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   83ad6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83ada:	e697      	b.n	8380c <_malloc_r+0x90>
   83adc:	0a4b      	lsrs	r3, r1, #9
   83ade:	2b04      	cmp	r3, #4
   83ae0:	d958      	bls.n	83b94 <_malloc_r+0x418>
   83ae2:	2b14      	cmp	r3, #20
   83ae4:	f200 80ad 	bhi.w	83c42 <_malloc_r+0x4c6>
   83ae8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83aec:	0050      	lsls	r0, r2, #1
   83aee:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   83af2:	6883      	ldr	r3, [r0, #8]
   83af4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83cb0 <_malloc_r+0x534>
   83af8:	4283      	cmp	r3, r0
   83afa:	f000 808a 	beq.w	83c12 <_malloc_r+0x496>
   83afe:	685a      	ldr	r2, [r3, #4]
   83b00:	f022 0203 	bic.w	r2, r2, #3
   83b04:	4291      	cmp	r1, r2
   83b06:	d202      	bcs.n	83b0e <_malloc_r+0x392>
   83b08:	689b      	ldr	r3, [r3, #8]
   83b0a:	4298      	cmp	r0, r3
   83b0c:	d1f7      	bne.n	83afe <_malloc_r+0x382>
   83b0e:	68d9      	ldr	r1, [r3, #12]
   83b10:	687a      	ldr	r2, [r7, #4]
   83b12:	60e1      	str	r1, [r4, #12]
   83b14:	60a3      	str	r3, [r4, #8]
   83b16:	608c      	str	r4, [r1, #8]
   83b18:	60dc      	str	r4, [r3, #12]
   83b1a:	e6b6      	b.n	8388a <_malloc_r+0x10e>
   83b1c:	f045 0701 	orr.w	r7, r5, #1
   83b20:	f042 0101 	orr.w	r1, r2, #1
   83b24:	4425      	add	r5, r4
   83b26:	6067      	str	r7, [r4, #4]
   83b28:	4630      	mov	r0, r6
   83b2a:	615d      	str	r5, [r3, #20]
   83b2c:	611d      	str	r5, [r3, #16]
   83b2e:	f8c5 e00c 	str.w	lr, [r5, #12]
   83b32:	f8c5 e008 	str.w	lr, [r5, #8]
   83b36:	6069      	str	r1, [r5, #4]
   83b38:	50aa      	str	r2, [r5, r2]
   83b3a:	3408      	adds	r4, #8
   83b3c:	f000 f9e2 	bl	83f04 <__malloc_unlock>
   83b40:	e648      	b.n	837d4 <_malloc_r+0x58>
   83b42:	685a      	ldr	r2, [r3, #4]
   83b44:	e6a1      	b.n	8388a <_malloc_r+0x10e>
   83b46:	f109 0901 	add.w	r9, r9, #1
   83b4a:	f019 0f03 	tst.w	r9, #3
   83b4e:	f104 0408 	add.w	r4, r4, #8
   83b52:	f47f aead 	bne.w	838b0 <_malloc_r+0x134>
   83b56:	e02d      	b.n	83bb4 <_malloc_r+0x438>
   83b58:	f104 0308 	add.w	r3, r4, #8
   83b5c:	6964      	ldr	r4, [r4, #20]
   83b5e:	42a3      	cmp	r3, r4
   83b60:	bf08      	it	eq
   83b62:	f10c 0c02 	addeq.w	ip, ip, #2
   83b66:	f43f ae67 	beq.w	83838 <_malloc_r+0xbc>
   83b6a:	e623      	b.n	837b4 <_malloc_r+0x38>
   83b6c:	4419      	add	r1, r3
   83b6e:	6848      	ldr	r0, [r1, #4]
   83b70:	461c      	mov	r4, r3
   83b72:	f854 2f08 	ldr.w	r2, [r4, #8]!
   83b76:	68db      	ldr	r3, [r3, #12]
   83b78:	f040 0501 	orr.w	r5, r0, #1
   83b7c:	604d      	str	r5, [r1, #4]
   83b7e:	4630      	mov	r0, r6
   83b80:	60d3      	str	r3, [r2, #12]
   83b82:	609a      	str	r2, [r3, #8]
   83b84:	f000 f9be 	bl	83f04 <__malloc_unlock>
   83b88:	e624      	b.n	837d4 <_malloc_r+0x58>
   83b8a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83b8e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83b92:	e63b      	b.n	8380c <_malloc_r+0x90>
   83b94:	098a      	lsrs	r2, r1, #6
   83b96:	3238      	adds	r2, #56	; 0x38
   83b98:	0050      	lsls	r0, r2, #1
   83b9a:	e7a8      	b.n	83aee <_malloc_r+0x372>
   83b9c:	42bc      	cmp	r4, r7
   83b9e:	f43f af02 	beq.w	839a6 <_malloc_r+0x22a>
   83ba2:	68bc      	ldr	r4, [r7, #8]
   83ba4:	6862      	ldr	r2, [r4, #4]
   83ba6:	f022 0203 	bic.w	r2, r2, #3
   83baa:	e761      	b.n	83a70 <_malloc_r+0x2f4>
   83bac:	f8d8 8000 	ldr.w	r8, [r8]
   83bb0:	4598      	cmp	r8, r3
   83bb2:	d17a      	bne.n	83caa <_malloc_r+0x52e>
   83bb4:	f01c 0f03 	tst.w	ip, #3
   83bb8:	f1a8 0308 	sub.w	r3, r8, #8
   83bbc:	f10c 3cff 	add.w	ip, ip, #4294967295
   83bc0:	d1f4      	bne.n	83bac <_malloc_r+0x430>
   83bc2:	687b      	ldr	r3, [r7, #4]
   83bc4:	ea23 0300 	bic.w	r3, r3, r0
   83bc8:	607b      	str	r3, [r7, #4]
   83bca:	0040      	lsls	r0, r0, #1
   83bcc:	4298      	cmp	r0, r3
   83bce:	f63f aebe 	bhi.w	8394e <_malloc_r+0x1d2>
   83bd2:	2800      	cmp	r0, #0
   83bd4:	f43f aebb 	beq.w	8394e <_malloc_r+0x1d2>
   83bd8:	4203      	tst	r3, r0
   83bda:	46cc      	mov	ip, r9
   83bdc:	f47f ae64 	bne.w	838a8 <_malloc_r+0x12c>
   83be0:	0040      	lsls	r0, r0, #1
   83be2:	4203      	tst	r3, r0
   83be4:	f10c 0c04 	add.w	ip, ip, #4
   83be8:	d0fa      	beq.n	83be0 <_malloc_r+0x464>
   83bea:	e65d      	b.n	838a8 <_malloc_r+0x12c>
   83bec:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83bf0:	d819      	bhi.n	83c26 <_malloc_r+0x4aa>
   83bf2:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   83bf6:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83bfa:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83bfe:	e605      	b.n	8380c <_malloc_r+0x90>
   83c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83c04:	e6ee      	b.n	839e4 <_malloc_r+0x268>
   83c06:	2301      	movs	r3, #1
   83c08:	f8c8 3004 	str.w	r3, [r8, #4]
   83c0c:	4644      	mov	r4, r8
   83c0e:	2200      	movs	r2, #0
   83c10:	e72e      	b.n	83a70 <_malloc_r+0x2f4>
   83c12:	1092      	asrs	r2, r2, #2
   83c14:	2001      	movs	r0, #1
   83c16:	4090      	lsls	r0, r2
   83c18:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83c1c:	4619      	mov	r1, r3
   83c1e:	4302      	orrs	r2, r0
   83c20:	f8c8 2004 	str.w	r2, [r8, #4]
   83c24:	e775      	b.n	83b12 <_malloc_r+0x396>
   83c26:	f240 5354 	movw	r3, #1364	; 0x554
   83c2a:	459c      	cmp	ip, r3
   83c2c:	d81b      	bhi.n	83c66 <_malloc_r+0x4ea>
   83c2e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   83c32:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   83c36:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83c3a:	e5e7      	b.n	8380c <_malloc_r+0x90>
   83c3c:	f10a 0a10 	add.w	sl, sl, #16
   83c40:	e6a3      	b.n	8398a <_malloc_r+0x20e>
   83c42:	2b54      	cmp	r3, #84	; 0x54
   83c44:	d81f      	bhi.n	83c86 <_malloc_r+0x50a>
   83c46:	0b0a      	lsrs	r2, r1, #12
   83c48:	326e      	adds	r2, #110	; 0x6e
   83c4a:	0050      	lsls	r0, r2, #1
   83c4c:	e74f      	b.n	83aee <_malloc_r+0x372>
   83c4e:	f3cb 010b 	ubfx	r1, fp, #0, #12
   83c52:	2900      	cmp	r1, #0
   83c54:	f47f aeb1 	bne.w	839ba <_malloc_r+0x23e>
   83c58:	eb0a 0109 	add.w	r1, sl, r9
   83c5c:	68ba      	ldr	r2, [r7, #8]
   83c5e:	f041 0101 	orr.w	r1, r1, #1
   83c62:	6051      	str	r1, [r2, #4]
   83c64:	e6f6      	b.n	83a54 <_malloc_r+0x2d8>
   83c66:	21fc      	movs	r1, #252	; 0xfc
   83c68:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83c6c:	e5ce      	b.n	8380c <_malloc_r+0x90>
   83c6e:	2201      	movs	r2, #1
   83c70:	f04f 0a00 	mov.w	sl, #0
   83c74:	e6cb      	b.n	83a0e <_malloc_r+0x292>
   83c76:	f104 0108 	add.w	r1, r4, #8
   83c7a:	4630      	mov	r0, r6
   83c7c:	f7ff fa80 	bl	83180 <_free_r>
   83c80:	f8da 3000 	ldr.w	r3, [sl]
   83c84:	e6e6      	b.n	83a54 <_malloc_r+0x2d8>
   83c86:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83c8a:	d803      	bhi.n	83c94 <_malloc_r+0x518>
   83c8c:	0bca      	lsrs	r2, r1, #15
   83c8e:	3277      	adds	r2, #119	; 0x77
   83c90:	0050      	lsls	r0, r2, #1
   83c92:	e72c      	b.n	83aee <_malloc_r+0x372>
   83c94:	f240 5254 	movw	r2, #1364	; 0x554
   83c98:	4293      	cmp	r3, r2
   83c9a:	d803      	bhi.n	83ca4 <_malloc_r+0x528>
   83c9c:	0c8a      	lsrs	r2, r1, #18
   83c9e:	327c      	adds	r2, #124	; 0x7c
   83ca0:	0050      	lsls	r0, r2, #1
   83ca2:	e724      	b.n	83aee <_malloc_r+0x372>
   83ca4:	20fc      	movs	r0, #252	; 0xfc
   83ca6:	227e      	movs	r2, #126	; 0x7e
   83ca8:	e721      	b.n	83aee <_malloc_r+0x372>
   83caa:	687b      	ldr	r3, [r7, #4]
   83cac:	e78d      	b.n	83bca <_malloc_r+0x44e>
   83cae:	bf00      	nop
   83cb0:	20070588 	.word	0x20070588

00083cb4 <memchr>:
   83cb4:	0783      	lsls	r3, r0, #30
   83cb6:	b470      	push	{r4, r5, r6}
   83cb8:	b2c9      	uxtb	r1, r1
   83cba:	d040      	beq.n	83d3e <memchr+0x8a>
   83cbc:	1e54      	subs	r4, r2, #1
   83cbe:	b32a      	cbz	r2, 83d0c <memchr+0x58>
   83cc0:	7803      	ldrb	r3, [r0, #0]
   83cc2:	428b      	cmp	r3, r1
   83cc4:	d023      	beq.n	83d0e <memchr+0x5a>
   83cc6:	1c43      	adds	r3, r0, #1
   83cc8:	e004      	b.n	83cd4 <memchr+0x20>
   83cca:	b1fc      	cbz	r4, 83d0c <memchr+0x58>
   83ccc:	7805      	ldrb	r5, [r0, #0]
   83cce:	4614      	mov	r4, r2
   83cd0:	428d      	cmp	r5, r1
   83cd2:	d01c      	beq.n	83d0e <memchr+0x5a>
   83cd4:	f013 0f03 	tst.w	r3, #3
   83cd8:	4618      	mov	r0, r3
   83cda:	f104 32ff 	add.w	r2, r4, #4294967295
   83cde:	f103 0301 	add.w	r3, r3, #1
   83ce2:	d1f2      	bne.n	83cca <memchr+0x16>
   83ce4:	2c03      	cmp	r4, #3
   83ce6:	d814      	bhi.n	83d12 <memchr+0x5e>
   83ce8:	1e65      	subs	r5, r4, #1
   83cea:	b354      	cbz	r4, 83d42 <memchr+0x8e>
   83cec:	7803      	ldrb	r3, [r0, #0]
   83cee:	428b      	cmp	r3, r1
   83cf0:	d00d      	beq.n	83d0e <memchr+0x5a>
   83cf2:	1c42      	adds	r2, r0, #1
   83cf4:	2300      	movs	r3, #0
   83cf6:	e002      	b.n	83cfe <memchr+0x4a>
   83cf8:	7804      	ldrb	r4, [r0, #0]
   83cfa:	428c      	cmp	r4, r1
   83cfc:	d007      	beq.n	83d0e <memchr+0x5a>
   83cfe:	42ab      	cmp	r3, r5
   83d00:	4610      	mov	r0, r2
   83d02:	f103 0301 	add.w	r3, r3, #1
   83d06:	f102 0201 	add.w	r2, r2, #1
   83d0a:	d1f5      	bne.n	83cf8 <memchr+0x44>
   83d0c:	2000      	movs	r0, #0
   83d0e:	bc70      	pop	{r4, r5, r6}
   83d10:	4770      	bx	lr
   83d12:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   83d16:	4603      	mov	r3, r0
   83d18:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83d1c:	681a      	ldr	r2, [r3, #0]
   83d1e:	4618      	mov	r0, r3
   83d20:	4072      	eors	r2, r6
   83d22:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   83d26:	ea25 0202 	bic.w	r2, r5, r2
   83d2a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83d2e:	f103 0304 	add.w	r3, r3, #4
   83d32:	d1d9      	bne.n	83ce8 <memchr+0x34>
   83d34:	3c04      	subs	r4, #4
   83d36:	2c03      	cmp	r4, #3
   83d38:	4618      	mov	r0, r3
   83d3a:	d8ef      	bhi.n	83d1c <memchr+0x68>
   83d3c:	e7d4      	b.n	83ce8 <memchr+0x34>
   83d3e:	4614      	mov	r4, r2
   83d40:	e7d0      	b.n	83ce4 <memchr+0x30>
   83d42:	4620      	mov	r0, r4
   83d44:	e7e3      	b.n	83d0e <memchr+0x5a>
   83d46:	bf00      	nop

00083d48 <memcpy>:
   83d48:	4684      	mov	ip, r0
   83d4a:	ea41 0300 	orr.w	r3, r1, r0
   83d4e:	f013 0303 	ands.w	r3, r3, #3
   83d52:	d149      	bne.n	83de8 <memcpy+0xa0>
   83d54:	3a40      	subs	r2, #64	; 0x40
   83d56:	d323      	bcc.n	83da0 <memcpy+0x58>
   83d58:	680b      	ldr	r3, [r1, #0]
   83d5a:	6003      	str	r3, [r0, #0]
   83d5c:	684b      	ldr	r3, [r1, #4]
   83d5e:	6043      	str	r3, [r0, #4]
   83d60:	688b      	ldr	r3, [r1, #8]
   83d62:	6083      	str	r3, [r0, #8]
   83d64:	68cb      	ldr	r3, [r1, #12]
   83d66:	60c3      	str	r3, [r0, #12]
   83d68:	690b      	ldr	r3, [r1, #16]
   83d6a:	6103      	str	r3, [r0, #16]
   83d6c:	694b      	ldr	r3, [r1, #20]
   83d6e:	6143      	str	r3, [r0, #20]
   83d70:	698b      	ldr	r3, [r1, #24]
   83d72:	6183      	str	r3, [r0, #24]
   83d74:	69cb      	ldr	r3, [r1, #28]
   83d76:	61c3      	str	r3, [r0, #28]
   83d78:	6a0b      	ldr	r3, [r1, #32]
   83d7a:	6203      	str	r3, [r0, #32]
   83d7c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83d7e:	6243      	str	r3, [r0, #36]	; 0x24
   83d80:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83d82:	6283      	str	r3, [r0, #40]	; 0x28
   83d84:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83d86:	62c3      	str	r3, [r0, #44]	; 0x2c
   83d88:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83d8a:	6303      	str	r3, [r0, #48]	; 0x30
   83d8c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83d8e:	6343      	str	r3, [r0, #52]	; 0x34
   83d90:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83d92:	6383      	str	r3, [r0, #56]	; 0x38
   83d94:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83d96:	63c3      	str	r3, [r0, #60]	; 0x3c
   83d98:	3040      	adds	r0, #64	; 0x40
   83d9a:	3140      	adds	r1, #64	; 0x40
   83d9c:	3a40      	subs	r2, #64	; 0x40
   83d9e:	d2db      	bcs.n	83d58 <memcpy+0x10>
   83da0:	3230      	adds	r2, #48	; 0x30
   83da2:	d30b      	bcc.n	83dbc <memcpy+0x74>
   83da4:	680b      	ldr	r3, [r1, #0]
   83da6:	6003      	str	r3, [r0, #0]
   83da8:	684b      	ldr	r3, [r1, #4]
   83daa:	6043      	str	r3, [r0, #4]
   83dac:	688b      	ldr	r3, [r1, #8]
   83dae:	6083      	str	r3, [r0, #8]
   83db0:	68cb      	ldr	r3, [r1, #12]
   83db2:	60c3      	str	r3, [r0, #12]
   83db4:	3010      	adds	r0, #16
   83db6:	3110      	adds	r1, #16
   83db8:	3a10      	subs	r2, #16
   83dba:	d2f3      	bcs.n	83da4 <memcpy+0x5c>
   83dbc:	320c      	adds	r2, #12
   83dbe:	d305      	bcc.n	83dcc <memcpy+0x84>
   83dc0:	f851 3b04 	ldr.w	r3, [r1], #4
   83dc4:	f840 3b04 	str.w	r3, [r0], #4
   83dc8:	3a04      	subs	r2, #4
   83dca:	d2f9      	bcs.n	83dc0 <memcpy+0x78>
   83dcc:	3204      	adds	r2, #4
   83dce:	d008      	beq.n	83de2 <memcpy+0x9a>
   83dd0:	07d2      	lsls	r2, r2, #31
   83dd2:	bf1c      	itt	ne
   83dd4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83dd8:	f800 3b01 	strbne.w	r3, [r0], #1
   83ddc:	d301      	bcc.n	83de2 <memcpy+0x9a>
   83dde:	880b      	ldrh	r3, [r1, #0]
   83de0:	8003      	strh	r3, [r0, #0]
   83de2:	4660      	mov	r0, ip
   83de4:	4770      	bx	lr
   83de6:	bf00      	nop
   83de8:	2a08      	cmp	r2, #8
   83dea:	d313      	bcc.n	83e14 <memcpy+0xcc>
   83dec:	078b      	lsls	r3, r1, #30
   83dee:	d0b1      	beq.n	83d54 <memcpy+0xc>
   83df0:	f010 0303 	ands.w	r3, r0, #3
   83df4:	d0ae      	beq.n	83d54 <memcpy+0xc>
   83df6:	f1c3 0304 	rsb	r3, r3, #4
   83dfa:	1ad2      	subs	r2, r2, r3
   83dfc:	07db      	lsls	r3, r3, #31
   83dfe:	bf1c      	itt	ne
   83e00:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83e04:	f800 3b01 	strbne.w	r3, [r0], #1
   83e08:	d3a4      	bcc.n	83d54 <memcpy+0xc>
   83e0a:	f831 3b02 	ldrh.w	r3, [r1], #2
   83e0e:	f820 3b02 	strh.w	r3, [r0], #2
   83e12:	e79f      	b.n	83d54 <memcpy+0xc>
   83e14:	3a04      	subs	r2, #4
   83e16:	d3d9      	bcc.n	83dcc <memcpy+0x84>
   83e18:	3a01      	subs	r2, #1
   83e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
   83e1e:	f800 3b01 	strb.w	r3, [r0], #1
   83e22:	d2f9      	bcs.n	83e18 <memcpy+0xd0>
   83e24:	780b      	ldrb	r3, [r1, #0]
   83e26:	7003      	strb	r3, [r0, #0]
   83e28:	784b      	ldrb	r3, [r1, #1]
   83e2a:	7043      	strb	r3, [r0, #1]
   83e2c:	788b      	ldrb	r3, [r1, #2]
   83e2e:	7083      	strb	r3, [r0, #2]
   83e30:	4660      	mov	r0, ip
   83e32:	4770      	bx	lr

00083e34 <memmove>:
   83e34:	4288      	cmp	r0, r1
   83e36:	b4f0      	push	{r4, r5, r6, r7}
   83e38:	d910      	bls.n	83e5c <memmove+0x28>
   83e3a:	188c      	adds	r4, r1, r2
   83e3c:	42a0      	cmp	r0, r4
   83e3e:	d20d      	bcs.n	83e5c <memmove+0x28>
   83e40:	1885      	adds	r5, r0, r2
   83e42:	1e53      	subs	r3, r2, #1
   83e44:	b142      	cbz	r2, 83e58 <memmove+0x24>
   83e46:	4621      	mov	r1, r4
   83e48:	462a      	mov	r2, r5
   83e4a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83e4e:	3b01      	subs	r3, #1
   83e50:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83e54:	1c5c      	adds	r4, r3, #1
   83e56:	d1f8      	bne.n	83e4a <memmove+0x16>
   83e58:	bcf0      	pop	{r4, r5, r6, r7}
   83e5a:	4770      	bx	lr
   83e5c:	2a0f      	cmp	r2, #15
   83e5e:	d944      	bls.n	83eea <memmove+0xb6>
   83e60:	ea40 0301 	orr.w	r3, r0, r1
   83e64:	079b      	lsls	r3, r3, #30
   83e66:	d144      	bne.n	83ef2 <memmove+0xbe>
   83e68:	f1a2 0710 	sub.w	r7, r2, #16
   83e6c:	093f      	lsrs	r7, r7, #4
   83e6e:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83e72:	3610      	adds	r6, #16
   83e74:	460c      	mov	r4, r1
   83e76:	4603      	mov	r3, r0
   83e78:	6825      	ldr	r5, [r4, #0]
   83e7a:	3310      	adds	r3, #16
   83e7c:	f843 5c10 	str.w	r5, [r3, #-16]
   83e80:	6865      	ldr	r5, [r4, #4]
   83e82:	3410      	adds	r4, #16
   83e84:	f843 5c0c 	str.w	r5, [r3, #-12]
   83e88:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83e8c:	f843 5c08 	str.w	r5, [r3, #-8]
   83e90:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83e94:	f843 5c04 	str.w	r5, [r3, #-4]
   83e98:	42b3      	cmp	r3, r6
   83e9a:	d1ed      	bne.n	83e78 <memmove+0x44>
   83e9c:	1c7b      	adds	r3, r7, #1
   83e9e:	f002 0c0f 	and.w	ip, r2, #15
   83ea2:	011b      	lsls	r3, r3, #4
   83ea4:	f1bc 0f03 	cmp.w	ip, #3
   83ea8:	4419      	add	r1, r3
   83eaa:	4403      	add	r3, r0
   83eac:	d923      	bls.n	83ef6 <memmove+0xc2>
   83eae:	460e      	mov	r6, r1
   83eb0:	461d      	mov	r5, r3
   83eb2:	4664      	mov	r4, ip
   83eb4:	f856 7b04 	ldr.w	r7, [r6], #4
   83eb8:	3c04      	subs	r4, #4
   83eba:	2c03      	cmp	r4, #3
   83ebc:	f845 7b04 	str.w	r7, [r5], #4
   83ec0:	d8f8      	bhi.n	83eb4 <memmove+0x80>
   83ec2:	f1ac 0404 	sub.w	r4, ip, #4
   83ec6:	f024 0403 	bic.w	r4, r4, #3
   83eca:	3404      	adds	r4, #4
   83ecc:	f002 0203 	and.w	r2, r2, #3
   83ed0:	4423      	add	r3, r4
   83ed2:	4421      	add	r1, r4
   83ed4:	2a00      	cmp	r2, #0
   83ed6:	d0bf      	beq.n	83e58 <memmove+0x24>
   83ed8:	441a      	add	r2, r3
   83eda:	f811 4b01 	ldrb.w	r4, [r1], #1
   83ede:	f803 4b01 	strb.w	r4, [r3], #1
   83ee2:	4293      	cmp	r3, r2
   83ee4:	d1f9      	bne.n	83eda <memmove+0xa6>
   83ee6:	bcf0      	pop	{r4, r5, r6, r7}
   83ee8:	4770      	bx	lr
   83eea:	4603      	mov	r3, r0
   83eec:	2a00      	cmp	r2, #0
   83eee:	d1f3      	bne.n	83ed8 <memmove+0xa4>
   83ef0:	e7b2      	b.n	83e58 <memmove+0x24>
   83ef2:	4603      	mov	r3, r0
   83ef4:	e7f0      	b.n	83ed8 <memmove+0xa4>
   83ef6:	4662      	mov	r2, ip
   83ef8:	2a00      	cmp	r2, #0
   83efa:	d1ed      	bne.n	83ed8 <memmove+0xa4>
   83efc:	e7ac      	b.n	83e58 <memmove+0x24>
   83efe:	bf00      	nop

00083f00 <__malloc_lock>:
   83f00:	4770      	bx	lr
   83f02:	bf00      	nop

00083f04 <__malloc_unlock>:
   83f04:	4770      	bx	lr
   83f06:	bf00      	nop

00083f08 <_realloc_r>:
   83f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83f0c:	460c      	mov	r4, r1
   83f0e:	b083      	sub	sp, #12
   83f10:	4690      	mov	r8, r2
   83f12:	4681      	mov	r9, r0
   83f14:	2900      	cmp	r1, #0
   83f16:	f000 80ba 	beq.w	8408e <_realloc_r+0x186>
   83f1a:	f7ff fff1 	bl	83f00 <__malloc_lock>
   83f1e:	f108 060b 	add.w	r6, r8, #11
   83f22:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83f26:	2e16      	cmp	r6, #22
   83f28:	f023 0503 	bic.w	r5, r3, #3
   83f2c:	f1a4 0708 	sub.w	r7, r4, #8
   83f30:	d84b      	bhi.n	83fca <_realloc_r+0xc2>
   83f32:	2110      	movs	r1, #16
   83f34:	460e      	mov	r6, r1
   83f36:	45b0      	cmp	r8, r6
   83f38:	d84c      	bhi.n	83fd4 <_realloc_r+0xcc>
   83f3a:	428d      	cmp	r5, r1
   83f3c:	da51      	bge.n	83fe2 <_realloc_r+0xda>
   83f3e:	f8df b384 	ldr.w	fp, [pc, #900]	; 842c4 <_realloc_r+0x3bc>
   83f42:	1978      	adds	r0, r7, r5
   83f44:	f8db e008 	ldr.w	lr, [fp, #8]
   83f48:	4586      	cmp	lr, r0
   83f4a:	f000 80a6 	beq.w	8409a <_realloc_r+0x192>
   83f4e:	6842      	ldr	r2, [r0, #4]
   83f50:	f022 0c01 	bic.w	ip, r2, #1
   83f54:	4484      	add	ip, r0
   83f56:	f8dc c004 	ldr.w	ip, [ip, #4]
   83f5a:	f01c 0f01 	tst.w	ip, #1
   83f5e:	d054      	beq.n	8400a <_realloc_r+0x102>
   83f60:	2200      	movs	r2, #0
   83f62:	4610      	mov	r0, r2
   83f64:	07db      	lsls	r3, r3, #31
   83f66:	d46f      	bmi.n	84048 <_realloc_r+0x140>
   83f68:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83f6c:	ebc3 0a07 	rsb	sl, r3, r7
   83f70:	f8da 3004 	ldr.w	r3, [sl, #4]
   83f74:	f023 0303 	bic.w	r3, r3, #3
   83f78:	442b      	add	r3, r5
   83f7a:	2800      	cmp	r0, #0
   83f7c:	d062      	beq.n	84044 <_realloc_r+0x13c>
   83f7e:	4570      	cmp	r0, lr
   83f80:	f000 80e9 	beq.w	84156 <_realloc_r+0x24e>
   83f84:	eb02 0e03 	add.w	lr, r2, r3
   83f88:	458e      	cmp	lr, r1
   83f8a:	db5b      	blt.n	84044 <_realloc_r+0x13c>
   83f8c:	68c3      	ldr	r3, [r0, #12]
   83f8e:	6882      	ldr	r2, [r0, #8]
   83f90:	46d0      	mov	r8, sl
   83f92:	60d3      	str	r3, [r2, #12]
   83f94:	609a      	str	r2, [r3, #8]
   83f96:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83f9a:	f8da 300c 	ldr.w	r3, [sl, #12]
   83f9e:	1f2a      	subs	r2, r5, #4
   83fa0:	2a24      	cmp	r2, #36	; 0x24
   83fa2:	60cb      	str	r3, [r1, #12]
   83fa4:	6099      	str	r1, [r3, #8]
   83fa6:	f200 8123 	bhi.w	841f0 <_realloc_r+0x2e8>
   83faa:	2a13      	cmp	r2, #19
   83fac:	f240 80b0 	bls.w	84110 <_realloc_r+0x208>
   83fb0:	6823      	ldr	r3, [r4, #0]
   83fb2:	2a1b      	cmp	r2, #27
   83fb4:	f8ca 3008 	str.w	r3, [sl, #8]
   83fb8:	6863      	ldr	r3, [r4, #4]
   83fba:	f8ca 300c 	str.w	r3, [sl, #12]
   83fbe:	f200 812b 	bhi.w	84218 <_realloc_r+0x310>
   83fc2:	3408      	adds	r4, #8
   83fc4:	f10a 0310 	add.w	r3, sl, #16
   83fc8:	e0a3      	b.n	84112 <_realloc_r+0x20a>
   83fca:	f026 0607 	bic.w	r6, r6, #7
   83fce:	2e00      	cmp	r6, #0
   83fd0:	4631      	mov	r1, r6
   83fd2:	dab0      	bge.n	83f36 <_realloc_r+0x2e>
   83fd4:	230c      	movs	r3, #12
   83fd6:	2000      	movs	r0, #0
   83fd8:	f8c9 3000 	str.w	r3, [r9]
   83fdc:	b003      	add	sp, #12
   83fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83fe2:	46a0      	mov	r8, r4
   83fe4:	1baa      	subs	r2, r5, r6
   83fe6:	2a0f      	cmp	r2, #15
   83fe8:	f003 0301 	and.w	r3, r3, #1
   83fec:	d81a      	bhi.n	84024 <_realloc_r+0x11c>
   83fee:	432b      	orrs	r3, r5
   83ff0:	607b      	str	r3, [r7, #4]
   83ff2:	443d      	add	r5, r7
   83ff4:	686b      	ldr	r3, [r5, #4]
   83ff6:	f043 0301 	orr.w	r3, r3, #1
   83ffa:	606b      	str	r3, [r5, #4]
   83ffc:	4648      	mov	r0, r9
   83ffe:	f7ff ff81 	bl	83f04 <__malloc_unlock>
   84002:	4640      	mov	r0, r8
   84004:	b003      	add	sp, #12
   84006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8400a:	f022 0203 	bic.w	r2, r2, #3
   8400e:	eb02 0c05 	add.w	ip, r2, r5
   84012:	458c      	cmp	ip, r1
   84014:	dba6      	blt.n	83f64 <_realloc_r+0x5c>
   84016:	68c2      	ldr	r2, [r0, #12]
   84018:	6881      	ldr	r1, [r0, #8]
   8401a:	46a0      	mov	r8, r4
   8401c:	60ca      	str	r2, [r1, #12]
   8401e:	4665      	mov	r5, ip
   84020:	6091      	str	r1, [r2, #8]
   84022:	e7df      	b.n	83fe4 <_realloc_r+0xdc>
   84024:	19b9      	adds	r1, r7, r6
   84026:	4333      	orrs	r3, r6
   84028:	f042 0001 	orr.w	r0, r2, #1
   8402c:	607b      	str	r3, [r7, #4]
   8402e:	440a      	add	r2, r1
   84030:	6048      	str	r0, [r1, #4]
   84032:	6853      	ldr	r3, [r2, #4]
   84034:	3108      	adds	r1, #8
   84036:	f043 0301 	orr.w	r3, r3, #1
   8403a:	6053      	str	r3, [r2, #4]
   8403c:	4648      	mov	r0, r9
   8403e:	f7ff f89f 	bl	83180 <_free_r>
   84042:	e7db      	b.n	83ffc <_realloc_r+0xf4>
   84044:	428b      	cmp	r3, r1
   84046:	da33      	bge.n	840b0 <_realloc_r+0x1a8>
   84048:	4641      	mov	r1, r8
   8404a:	4648      	mov	r0, r9
   8404c:	f7ff fb96 	bl	8377c <_malloc_r>
   84050:	4680      	mov	r8, r0
   84052:	2800      	cmp	r0, #0
   84054:	d0d2      	beq.n	83ffc <_realloc_r+0xf4>
   84056:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8405a:	f1a0 0108 	sub.w	r1, r0, #8
   8405e:	f023 0201 	bic.w	r2, r3, #1
   84062:	443a      	add	r2, r7
   84064:	4291      	cmp	r1, r2
   84066:	f000 80bc 	beq.w	841e2 <_realloc_r+0x2da>
   8406a:	1f2a      	subs	r2, r5, #4
   8406c:	2a24      	cmp	r2, #36	; 0x24
   8406e:	d86e      	bhi.n	8414e <_realloc_r+0x246>
   84070:	2a13      	cmp	r2, #19
   84072:	d842      	bhi.n	840fa <_realloc_r+0x1f2>
   84074:	4603      	mov	r3, r0
   84076:	4622      	mov	r2, r4
   84078:	6811      	ldr	r1, [r2, #0]
   8407a:	6019      	str	r1, [r3, #0]
   8407c:	6851      	ldr	r1, [r2, #4]
   8407e:	6059      	str	r1, [r3, #4]
   84080:	6892      	ldr	r2, [r2, #8]
   84082:	609a      	str	r2, [r3, #8]
   84084:	4621      	mov	r1, r4
   84086:	4648      	mov	r0, r9
   84088:	f7ff f87a 	bl	83180 <_free_r>
   8408c:	e7b6      	b.n	83ffc <_realloc_r+0xf4>
   8408e:	4611      	mov	r1, r2
   84090:	b003      	add	sp, #12
   84092:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84096:	f7ff bb71 	b.w	8377c <_malloc_r>
   8409a:	f8de 2004 	ldr.w	r2, [lr, #4]
   8409e:	f106 0c10 	add.w	ip, r6, #16
   840a2:	f022 0203 	bic.w	r2, r2, #3
   840a6:	1950      	adds	r0, r2, r5
   840a8:	4560      	cmp	r0, ip
   840aa:	da3d      	bge.n	84128 <_realloc_r+0x220>
   840ac:	4670      	mov	r0, lr
   840ae:	e759      	b.n	83f64 <_realloc_r+0x5c>
   840b0:	46d0      	mov	r8, sl
   840b2:	f858 0f08 	ldr.w	r0, [r8, #8]!
   840b6:	f8da 100c 	ldr.w	r1, [sl, #12]
   840ba:	1f2a      	subs	r2, r5, #4
   840bc:	2a24      	cmp	r2, #36	; 0x24
   840be:	60c1      	str	r1, [r0, #12]
   840c0:	6088      	str	r0, [r1, #8]
   840c2:	f200 80a0 	bhi.w	84206 <_realloc_r+0x2fe>
   840c6:	2a13      	cmp	r2, #19
   840c8:	f240 809b 	bls.w	84202 <_realloc_r+0x2fa>
   840cc:	6821      	ldr	r1, [r4, #0]
   840ce:	2a1b      	cmp	r2, #27
   840d0:	f8ca 1008 	str.w	r1, [sl, #8]
   840d4:	6861      	ldr	r1, [r4, #4]
   840d6:	f8ca 100c 	str.w	r1, [sl, #12]
   840da:	f200 80b2 	bhi.w	84242 <_realloc_r+0x33a>
   840de:	3408      	adds	r4, #8
   840e0:	f10a 0210 	add.w	r2, sl, #16
   840e4:	6821      	ldr	r1, [r4, #0]
   840e6:	461d      	mov	r5, r3
   840e8:	6011      	str	r1, [r2, #0]
   840ea:	6861      	ldr	r1, [r4, #4]
   840ec:	4657      	mov	r7, sl
   840ee:	6051      	str	r1, [r2, #4]
   840f0:	68a3      	ldr	r3, [r4, #8]
   840f2:	6093      	str	r3, [r2, #8]
   840f4:	f8da 3004 	ldr.w	r3, [sl, #4]
   840f8:	e774      	b.n	83fe4 <_realloc_r+0xdc>
   840fa:	6823      	ldr	r3, [r4, #0]
   840fc:	2a1b      	cmp	r2, #27
   840fe:	6003      	str	r3, [r0, #0]
   84100:	6863      	ldr	r3, [r4, #4]
   84102:	6043      	str	r3, [r0, #4]
   84104:	d862      	bhi.n	841cc <_realloc_r+0x2c4>
   84106:	f100 0308 	add.w	r3, r0, #8
   8410a:	f104 0208 	add.w	r2, r4, #8
   8410e:	e7b3      	b.n	84078 <_realloc_r+0x170>
   84110:	4643      	mov	r3, r8
   84112:	6822      	ldr	r2, [r4, #0]
   84114:	4675      	mov	r5, lr
   84116:	601a      	str	r2, [r3, #0]
   84118:	6862      	ldr	r2, [r4, #4]
   8411a:	4657      	mov	r7, sl
   8411c:	605a      	str	r2, [r3, #4]
   8411e:	68a2      	ldr	r2, [r4, #8]
   84120:	609a      	str	r2, [r3, #8]
   84122:	f8da 3004 	ldr.w	r3, [sl, #4]
   84126:	e75d      	b.n	83fe4 <_realloc_r+0xdc>
   84128:	1b83      	subs	r3, r0, r6
   8412a:	4437      	add	r7, r6
   8412c:	f043 0301 	orr.w	r3, r3, #1
   84130:	f8cb 7008 	str.w	r7, [fp, #8]
   84134:	607b      	str	r3, [r7, #4]
   84136:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8413a:	4648      	mov	r0, r9
   8413c:	f003 0301 	and.w	r3, r3, #1
   84140:	431e      	orrs	r6, r3
   84142:	f844 6c04 	str.w	r6, [r4, #-4]
   84146:	f7ff fedd 	bl	83f04 <__malloc_unlock>
   8414a:	4620      	mov	r0, r4
   8414c:	e75a      	b.n	84004 <_realloc_r+0xfc>
   8414e:	4621      	mov	r1, r4
   84150:	f7ff fe70 	bl	83e34 <memmove>
   84154:	e796      	b.n	84084 <_realloc_r+0x17c>
   84156:	eb02 0c03 	add.w	ip, r2, r3
   8415a:	f106 0210 	add.w	r2, r6, #16
   8415e:	4594      	cmp	ip, r2
   84160:	f6ff af70 	blt.w	84044 <_realloc_r+0x13c>
   84164:	4657      	mov	r7, sl
   84166:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8416a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8416e:	1f2a      	subs	r2, r5, #4
   84170:	2a24      	cmp	r2, #36	; 0x24
   84172:	60cb      	str	r3, [r1, #12]
   84174:	6099      	str	r1, [r3, #8]
   84176:	f200 8086 	bhi.w	84286 <_realloc_r+0x37e>
   8417a:	2a13      	cmp	r2, #19
   8417c:	d977      	bls.n	8426e <_realloc_r+0x366>
   8417e:	6823      	ldr	r3, [r4, #0]
   84180:	2a1b      	cmp	r2, #27
   84182:	f8ca 3008 	str.w	r3, [sl, #8]
   84186:	6863      	ldr	r3, [r4, #4]
   84188:	f8ca 300c 	str.w	r3, [sl, #12]
   8418c:	f200 8084 	bhi.w	84298 <_realloc_r+0x390>
   84190:	3408      	adds	r4, #8
   84192:	f10a 0310 	add.w	r3, sl, #16
   84196:	6822      	ldr	r2, [r4, #0]
   84198:	601a      	str	r2, [r3, #0]
   8419a:	6862      	ldr	r2, [r4, #4]
   8419c:	605a      	str	r2, [r3, #4]
   8419e:	68a2      	ldr	r2, [r4, #8]
   841a0:	609a      	str	r2, [r3, #8]
   841a2:	ebc6 020c 	rsb	r2, r6, ip
   841a6:	eb0a 0306 	add.w	r3, sl, r6
   841aa:	f042 0201 	orr.w	r2, r2, #1
   841ae:	f8cb 3008 	str.w	r3, [fp, #8]
   841b2:	605a      	str	r2, [r3, #4]
   841b4:	f8da 3004 	ldr.w	r3, [sl, #4]
   841b8:	4648      	mov	r0, r9
   841ba:	f003 0301 	and.w	r3, r3, #1
   841be:	431e      	orrs	r6, r3
   841c0:	f8ca 6004 	str.w	r6, [sl, #4]
   841c4:	f7ff fe9e 	bl	83f04 <__malloc_unlock>
   841c8:	4638      	mov	r0, r7
   841ca:	e71b      	b.n	84004 <_realloc_r+0xfc>
   841cc:	68a3      	ldr	r3, [r4, #8]
   841ce:	2a24      	cmp	r2, #36	; 0x24
   841d0:	6083      	str	r3, [r0, #8]
   841d2:	68e3      	ldr	r3, [r4, #12]
   841d4:	60c3      	str	r3, [r0, #12]
   841d6:	d02b      	beq.n	84230 <_realloc_r+0x328>
   841d8:	f100 0310 	add.w	r3, r0, #16
   841dc:	f104 0210 	add.w	r2, r4, #16
   841e0:	e74a      	b.n	84078 <_realloc_r+0x170>
   841e2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   841e6:	46a0      	mov	r8, r4
   841e8:	f022 0203 	bic.w	r2, r2, #3
   841ec:	4415      	add	r5, r2
   841ee:	e6f9      	b.n	83fe4 <_realloc_r+0xdc>
   841f0:	4621      	mov	r1, r4
   841f2:	4640      	mov	r0, r8
   841f4:	4675      	mov	r5, lr
   841f6:	4657      	mov	r7, sl
   841f8:	f7ff fe1c 	bl	83e34 <memmove>
   841fc:	f8da 3004 	ldr.w	r3, [sl, #4]
   84200:	e6f0      	b.n	83fe4 <_realloc_r+0xdc>
   84202:	4642      	mov	r2, r8
   84204:	e76e      	b.n	840e4 <_realloc_r+0x1dc>
   84206:	4621      	mov	r1, r4
   84208:	4640      	mov	r0, r8
   8420a:	461d      	mov	r5, r3
   8420c:	4657      	mov	r7, sl
   8420e:	f7ff fe11 	bl	83e34 <memmove>
   84212:	f8da 3004 	ldr.w	r3, [sl, #4]
   84216:	e6e5      	b.n	83fe4 <_realloc_r+0xdc>
   84218:	68a3      	ldr	r3, [r4, #8]
   8421a:	2a24      	cmp	r2, #36	; 0x24
   8421c:	f8ca 3010 	str.w	r3, [sl, #16]
   84220:	68e3      	ldr	r3, [r4, #12]
   84222:	f8ca 3014 	str.w	r3, [sl, #20]
   84226:	d018      	beq.n	8425a <_realloc_r+0x352>
   84228:	3410      	adds	r4, #16
   8422a:	f10a 0318 	add.w	r3, sl, #24
   8422e:	e770      	b.n	84112 <_realloc_r+0x20a>
   84230:	6922      	ldr	r2, [r4, #16]
   84232:	f100 0318 	add.w	r3, r0, #24
   84236:	6102      	str	r2, [r0, #16]
   84238:	6961      	ldr	r1, [r4, #20]
   8423a:	f104 0218 	add.w	r2, r4, #24
   8423e:	6141      	str	r1, [r0, #20]
   84240:	e71a      	b.n	84078 <_realloc_r+0x170>
   84242:	68a1      	ldr	r1, [r4, #8]
   84244:	2a24      	cmp	r2, #36	; 0x24
   84246:	f8ca 1010 	str.w	r1, [sl, #16]
   8424a:	68e1      	ldr	r1, [r4, #12]
   8424c:	f8ca 1014 	str.w	r1, [sl, #20]
   84250:	d00f      	beq.n	84272 <_realloc_r+0x36a>
   84252:	3410      	adds	r4, #16
   84254:	f10a 0218 	add.w	r2, sl, #24
   84258:	e744      	b.n	840e4 <_realloc_r+0x1dc>
   8425a:	6922      	ldr	r2, [r4, #16]
   8425c:	f10a 0320 	add.w	r3, sl, #32
   84260:	f8ca 2018 	str.w	r2, [sl, #24]
   84264:	6962      	ldr	r2, [r4, #20]
   84266:	3418      	adds	r4, #24
   84268:	f8ca 201c 	str.w	r2, [sl, #28]
   8426c:	e751      	b.n	84112 <_realloc_r+0x20a>
   8426e:	463b      	mov	r3, r7
   84270:	e791      	b.n	84196 <_realloc_r+0x28e>
   84272:	6921      	ldr	r1, [r4, #16]
   84274:	f10a 0220 	add.w	r2, sl, #32
   84278:	f8ca 1018 	str.w	r1, [sl, #24]
   8427c:	6961      	ldr	r1, [r4, #20]
   8427e:	3418      	adds	r4, #24
   84280:	f8ca 101c 	str.w	r1, [sl, #28]
   84284:	e72e      	b.n	840e4 <_realloc_r+0x1dc>
   84286:	4621      	mov	r1, r4
   84288:	4638      	mov	r0, r7
   8428a:	f8cd c004 	str.w	ip, [sp, #4]
   8428e:	f7ff fdd1 	bl	83e34 <memmove>
   84292:	f8dd c004 	ldr.w	ip, [sp, #4]
   84296:	e784      	b.n	841a2 <_realloc_r+0x29a>
   84298:	68a3      	ldr	r3, [r4, #8]
   8429a:	2a24      	cmp	r2, #36	; 0x24
   8429c:	f8ca 3010 	str.w	r3, [sl, #16]
   842a0:	68e3      	ldr	r3, [r4, #12]
   842a2:	f8ca 3014 	str.w	r3, [sl, #20]
   842a6:	d003      	beq.n	842b0 <_realloc_r+0x3a8>
   842a8:	3410      	adds	r4, #16
   842aa:	f10a 0318 	add.w	r3, sl, #24
   842ae:	e772      	b.n	84196 <_realloc_r+0x28e>
   842b0:	6922      	ldr	r2, [r4, #16]
   842b2:	f10a 0320 	add.w	r3, sl, #32
   842b6:	f8ca 2018 	str.w	r2, [sl, #24]
   842ba:	6962      	ldr	r2, [r4, #20]
   842bc:	3418      	adds	r4, #24
   842be:	f8ca 201c 	str.w	r2, [sl, #28]
   842c2:	e768      	b.n	84196 <_realloc_r+0x28e>
   842c4:	20070588 	.word	0x20070588

000842c8 <_sbrk_r>:
   842c8:	b538      	push	{r3, r4, r5, lr}
   842ca:	4c07      	ldr	r4, [pc, #28]	; (842e8 <_sbrk_r+0x20>)
   842cc:	2300      	movs	r3, #0
   842ce:	4605      	mov	r5, r0
   842d0:	4608      	mov	r0, r1
   842d2:	6023      	str	r3, [r4, #0]
   842d4:	f7fd fca2 	bl	81c1c <_sbrk>
   842d8:	1c43      	adds	r3, r0, #1
   842da:	d000      	beq.n	842de <_sbrk_r+0x16>
   842dc:	bd38      	pop	{r3, r4, r5, pc}
   842de:	6823      	ldr	r3, [r4, #0]
   842e0:	2b00      	cmp	r3, #0
   842e2:	d0fb      	beq.n	842dc <_sbrk_r+0x14>
   842e4:	602b      	str	r3, [r5, #0]
   842e6:	bd38      	pop	{r3, r4, r5, pc}
   842e8:	20070b88 	.word	0x20070b88

000842ec <__sread>:
   842ec:	b510      	push	{r4, lr}
   842ee:	460c      	mov	r4, r1
   842f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   842f4:	f000 f99e 	bl	84634 <_read_r>
   842f8:	2800      	cmp	r0, #0
   842fa:	db03      	blt.n	84304 <__sread+0x18>
   842fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   842fe:	4403      	add	r3, r0
   84300:	6523      	str	r3, [r4, #80]	; 0x50
   84302:	bd10      	pop	{r4, pc}
   84304:	89a3      	ldrh	r3, [r4, #12]
   84306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8430a:	81a3      	strh	r3, [r4, #12]
   8430c:	bd10      	pop	{r4, pc}
   8430e:	bf00      	nop

00084310 <__swrite>:
   84310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84314:	460c      	mov	r4, r1
   84316:	8989      	ldrh	r1, [r1, #12]
   84318:	461d      	mov	r5, r3
   8431a:	05cb      	lsls	r3, r1, #23
   8431c:	4616      	mov	r6, r2
   8431e:	4607      	mov	r7, r0
   84320:	d506      	bpl.n	84330 <__swrite+0x20>
   84322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84326:	2200      	movs	r2, #0
   84328:	2302      	movs	r3, #2
   8432a:	f000 f96f 	bl	8460c <_lseek_r>
   8432e:	89a1      	ldrh	r1, [r4, #12]
   84330:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84334:	81a1      	strh	r1, [r4, #12]
   84336:	4638      	mov	r0, r7
   84338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8433c:	4632      	mov	r2, r6
   8433e:	462b      	mov	r3, r5
   84340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84344:	f000 b87a 	b.w	8443c <_write_r>

00084348 <__sseek>:
   84348:	b510      	push	{r4, lr}
   8434a:	460c      	mov	r4, r1
   8434c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84350:	f000 f95c 	bl	8460c <_lseek_r>
   84354:	89a3      	ldrh	r3, [r4, #12]
   84356:	1c42      	adds	r2, r0, #1
   84358:	bf0e      	itee	eq
   8435a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8435e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84362:	6520      	strne	r0, [r4, #80]	; 0x50
   84364:	81a3      	strh	r3, [r4, #12]
   84366:	bd10      	pop	{r4, pc}

00084368 <__sclose>:
   84368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8436c:	f000 b8ce 	b.w	8450c <_close_r>

00084370 <strlen>:
   84370:	f020 0103 	bic.w	r1, r0, #3
   84374:	f010 0003 	ands.w	r0, r0, #3
   84378:	f1c0 0000 	rsb	r0, r0, #0
   8437c:	f851 3b04 	ldr.w	r3, [r1], #4
   84380:	f100 0c04 	add.w	ip, r0, #4
   84384:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84388:	f06f 0200 	mvn.w	r2, #0
   8438c:	bf1c      	itt	ne
   8438e:	fa22 f20c 	lsrne.w	r2, r2, ip
   84392:	4313      	orrne	r3, r2
   84394:	f04f 0c01 	mov.w	ip, #1
   84398:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8439c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   843a0:	eba3 020c 	sub.w	r2, r3, ip
   843a4:	ea22 0203 	bic.w	r2, r2, r3
   843a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   843ac:	bf04      	itt	eq
   843ae:	f851 3b04 	ldreq.w	r3, [r1], #4
   843b2:	3004      	addeq	r0, #4
   843b4:	d0f4      	beq.n	843a0 <strlen+0x30>
   843b6:	f013 0fff 	tst.w	r3, #255	; 0xff
   843ba:	bf1f      	itttt	ne
   843bc:	3001      	addne	r0, #1
   843be:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   843c2:	3001      	addne	r0, #1
   843c4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   843c8:	bf18      	it	ne
   843ca:	3001      	addne	r0, #1
   843cc:	4770      	bx	lr
   843ce:	bf00      	nop

000843d0 <_wcrtomb_r>:
   843d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   843d4:	461e      	mov	r6, r3
   843d6:	b086      	sub	sp, #24
   843d8:	460c      	mov	r4, r1
   843da:	4605      	mov	r5, r0
   843dc:	4617      	mov	r7, r2
   843de:	4b0f      	ldr	r3, [pc, #60]	; (8441c <_wcrtomb_r+0x4c>)
   843e0:	b191      	cbz	r1, 84408 <_wcrtomb_r+0x38>
   843e2:	f8d3 8000 	ldr.w	r8, [r3]
   843e6:	f7ff f947 	bl	83678 <__locale_charset>
   843ea:	9600      	str	r6, [sp, #0]
   843ec:	4603      	mov	r3, r0
   843ee:	4621      	mov	r1, r4
   843f0:	463a      	mov	r2, r7
   843f2:	4628      	mov	r0, r5
   843f4:	47c0      	blx	r8
   843f6:	1c43      	adds	r3, r0, #1
   843f8:	d103      	bne.n	84402 <_wcrtomb_r+0x32>
   843fa:	2200      	movs	r2, #0
   843fc:	238a      	movs	r3, #138	; 0x8a
   843fe:	6032      	str	r2, [r6, #0]
   84400:	602b      	str	r3, [r5, #0]
   84402:	b006      	add	sp, #24
   84404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84408:	681f      	ldr	r7, [r3, #0]
   8440a:	f7ff f935 	bl	83678 <__locale_charset>
   8440e:	9600      	str	r6, [sp, #0]
   84410:	4603      	mov	r3, r0
   84412:	4622      	mov	r2, r4
   84414:	4628      	mov	r0, r5
   84416:	a903      	add	r1, sp, #12
   84418:	47b8      	blx	r7
   8441a:	e7ec      	b.n	843f6 <_wcrtomb_r+0x26>
   8441c:	20070998 	.word	0x20070998

00084420 <__ascii_wctomb>:
   84420:	b121      	cbz	r1, 8442c <__ascii_wctomb+0xc>
   84422:	2aff      	cmp	r2, #255	; 0xff
   84424:	d804      	bhi.n	84430 <__ascii_wctomb+0x10>
   84426:	700a      	strb	r2, [r1, #0]
   84428:	2001      	movs	r0, #1
   8442a:	4770      	bx	lr
   8442c:	4608      	mov	r0, r1
   8442e:	4770      	bx	lr
   84430:	238a      	movs	r3, #138	; 0x8a
   84432:	6003      	str	r3, [r0, #0]
   84434:	f04f 30ff 	mov.w	r0, #4294967295
   84438:	4770      	bx	lr
   8443a:	bf00      	nop

0008443c <_write_r>:
   8443c:	b570      	push	{r4, r5, r6, lr}
   8443e:	4c08      	ldr	r4, [pc, #32]	; (84460 <_write_r+0x24>)
   84440:	4606      	mov	r6, r0
   84442:	2500      	movs	r5, #0
   84444:	4608      	mov	r0, r1
   84446:	4611      	mov	r1, r2
   84448:	461a      	mov	r2, r3
   8444a:	6025      	str	r5, [r4, #0]
   8444c:	f7fc fd1a 	bl	80e84 <_write>
   84450:	1c43      	adds	r3, r0, #1
   84452:	d000      	beq.n	84456 <_write_r+0x1a>
   84454:	bd70      	pop	{r4, r5, r6, pc}
   84456:	6823      	ldr	r3, [r4, #0]
   84458:	2b00      	cmp	r3, #0
   8445a:	d0fb      	beq.n	84454 <_write_r+0x18>
   8445c:	6033      	str	r3, [r6, #0]
   8445e:	bd70      	pop	{r4, r5, r6, pc}
   84460:	20070b88 	.word	0x20070b88

00084464 <__register_exitproc>:
   84464:	b5f0      	push	{r4, r5, r6, r7, lr}
   84466:	4c27      	ldr	r4, [pc, #156]	; (84504 <__register_exitproc+0xa0>)
   84468:	b085      	sub	sp, #20
   8446a:	6826      	ldr	r6, [r4, #0]
   8446c:	4607      	mov	r7, r0
   8446e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84472:	2c00      	cmp	r4, #0
   84474:	d040      	beq.n	844f8 <__register_exitproc+0x94>
   84476:	6865      	ldr	r5, [r4, #4]
   84478:	2d1f      	cmp	r5, #31
   8447a:	dd1e      	ble.n	844ba <__register_exitproc+0x56>
   8447c:	4822      	ldr	r0, [pc, #136]	; (84508 <__register_exitproc+0xa4>)
   8447e:	b918      	cbnz	r0, 84488 <__register_exitproc+0x24>
   84480:	f04f 30ff 	mov.w	r0, #4294967295
   84484:	b005      	add	sp, #20
   84486:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84488:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8448c:	9103      	str	r1, [sp, #12]
   8448e:	9202      	str	r2, [sp, #8]
   84490:	9301      	str	r3, [sp, #4]
   84492:	f7ff f96b 	bl	8376c <malloc>
   84496:	9903      	ldr	r1, [sp, #12]
   84498:	4604      	mov	r4, r0
   8449a:	9a02      	ldr	r2, [sp, #8]
   8449c:	9b01      	ldr	r3, [sp, #4]
   8449e:	2800      	cmp	r0, #0
   844a0:	d0ee      	beq.n	84480 <__register_exitproc+0x1c>
   844a2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   844a6:	2000      	movs	r0, #0
   844a8:	6025      	str	r5, [r4, #0]
   844aa:	6060      	str	r0, [r4, #4]
   844ac:	4605      	mov	r5, r0
   844ae:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   844b2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   844b6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   844ba:	b93f      	cbnz	r7, 844cc <__register_exitproc+0x68>
   844bc:	1c6b      	adds	r3, r5, #1
   844be:	2000      	movs	r0, #0
   844c0:	3502      	adds	r5, #2
   844c2:	6063      	str	r3, [r4, #4]
   844c4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   844c8:	b005      	add	sp, #20
   844ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   844cc:	2601      	movs	r6, #1
   844ce:	40ae      	lsls	r6, r5
   844d0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   844d4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   844d8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   844dc:	2f02      	cmp	r7, #2
   844de:	ea42 0206 	orr.w	r2, r2, r6
   844e2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   844e6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   844ea:	d1e7      	bne.n	844bc <__register_exitproc+0x58>
   844ec:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   844f0:	431e      	orrs	r6, r3
   844f2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   844f6:	e7e1      	b.n	844bc <__register_exitproc+0x58>
   844f8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   844fc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84500:	e7b9      	b.n	84476 <__register_exitproc+0x12>
   84502:	bf00      	nop
   84504:	00084e78 	.word	0x00084e78
   84508:	0008376d 	.word	0x0008376d

0008450c <_close_r>:
   8450c:	b538      	push	{r3, r4, r5, lr}
   8450e:	4c07      	ldr	r4, [pc, #28]	; (8452c <_close_r+0x20>)
   84510:	2300      	movs	r3, #0
   84512:	4605      	mov	r5, r0
   84514:	4608      	mov	r0, r1
   84516:	6023      	str	r3, [r4, #0]
   84518:	f7fd fb9a 	bl	81c50 <_close>
   8451c:	1c43      	adds	r3, r0, #1
   8451e:	d000      	beq.n	84522 <_close_r+0x16>
   84520:	bd38      	pop	{r3, r4, r5, pc}
   84522:	6823      	ldr	r3, [r4, #0]
   84524:	2b00      	cmp	r3, #0
   84526:	d0fb      	beq.n	84520 <_close_r+0x14>
   84528:	602b      	str	r3, [r5, #0]
   8452a:	bd38      	pop	{r3, r4, r5, pc}
   8452c:	20070b88 	.word	0x20070b88

00084530 <_fclose_r>:
   84530:	b570      	push	{r4, r5, r6, lr}
   84532:	460c      	mov	r4, r1
   84534:	4605      	mov	r5, r0
   84536:	b131      	cbz	r1, 84546 <_fclose_r+0x16>
   84538:	b110      	cbz	r0, 84540 <_fclose_r+0x10>
   8453a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8453c:	2b00      	cmp	r3, #0
   8453e:	d02f      	beq.n	845a0 <_fclose_r+0x70>
   84540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84544:	b90b      	cbnz	r3, 8454a <_fclose_r+0x1a>
   84546:	2000      	movs	r0, #0
   84548:	bd70      	pop	{r4, r5, r6, pc}
   8454a:	4628      	mov	r0, r5
   8454c:	4621      	mov	r1, r4
   8454e:	f7fe fcb7 	bl	82ec0 <_fflush_r>
   84552:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84554:	4606      	mov	r6, r0
   84556:	b133      	cbz	r3, 84566 <_fclose_r+0x36>
   84558:	4628      	mov	r0, r5
   8455a:	69e1      	ldr	r1, [r4, #28]
   8455c:	4798      	blx	r3
   8455e:	2800      	cmp	r0, #0
   84560:	bfb8      	it	lt
   84562:	f04f 36ff 	movlt.w	r6, #4294967295
   84566:	89a3      	ldrh	r3, [r4, #12]
   84568:	061b      	lsls	r3, r3, #24
   8456a:	d41c      	bmi.n	845a6 <_fclose_r+0x76>
   8456c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8456e:	b141      	cbz	r1, 84582 <_fclose_r+0x52>
   84570:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84574:	4299      	cmp	r1, r3
   84576:	d002      	beq.n	8457e <_fclose_r+0x4e>
   84578:	4628      	mov	r0, r5
   8457a:	f7fe fe01 	bl	83180 <_free_r>
   8457e:	2300      	movs	r3, #0
   84580:	6323      	str	r3, [r4, #48]	; 0x30
   84582:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84584:	b121      	cbz	r1, 84590 <_fclose_r+0x60>
   84586:	4628      	mov	r0, r5
   84588:	f7fe fdfa 	bl	83180 <_free_r>
   8458c:	2300      	movs	r3, #0
   8458e:	6463      	str	r3, [r4, #68]	; 0x44
   84590:	f7fe fd2c 	bl	82fec <__sfp_lock_acquire>
   84594:	2300      	movs	r3, #0
   84596:	81a3      	strh	r3, [r4, #12]
   84598:	f7fe fd2a 	bl	82ff0 <__sfp_lock_release>
   8459c:	4630      	mov	r0, r6
   8459e:	bd70      	pop	{r4, r5, r6, pc}
   845a0:	f7fe fcaa 	bl	82ef8 <__sinit>
   845a4:	e7cc      	b.n	84540 <_fclose_r+0x10>
   845a6:	4628      	mov	r0, r5
   845a8:	6921      	ldr	r1, [r4, #16]
   845aa:	f7fe fde9 	bl	83180 <_free_r>
   845ae:	e7dd      	b.n	8456c <_fclose_r+0x3c>

000845b0 <fclose>:
   845b0:	4b02      	ldr	r3, [pc, #8]	; (845bc <fclose+0xc>)
   845b2:	4601      	mov	r1, r0
   845b4:	6818      	ldr	r0, [r3, #0]
   845b6:	f7ff bfbb 	b.w	84530 <_fclose_r>
   845ba:	bf00      	nop
   845bc:	20070560 	.word	0x20070560

000845c0 <_fstat_r>:
   845c0:	b538      	push	{r3, r4, r5, lr}
   845c2:	4c08      	ldr	r4, [pc, #32]	; (845e4 <_fstat_r+0x24>)
   845c4:	2300      	movs	r3, #0
   845c6:	4605      	mov	r5, r0
   845c8:	4608      	mov	r0, r1
   845ca:	4611      	mov	r1, r2
   845cc:	6023      	str	r3, [r4, #0]
   845ce:	f7fd fb43 	bl	81c58 <_fstat>
   845d2:	1c43      	adds	r3, r0, #1
   845d4:	d000      	beq.n	845d8 <_fstat_r+0x18>
   845d6:	bd38      	pop	{r3, r4, r5, pc}
   845d8:	6823      	ldr	r3, [r4, #0]
   845da:	2b00      	cmp	r3, #0
   845dc:	d0fb      	beq.n	845d6 <_fstat_r+0x16>
   845de:	602b      	str	r3, [r5, #0]
   845e0:	bd38      	pop	{r3, r4, r5, pc}
   845e2:	bf00      	nop
   845e4:	20070b88 	.word	0x20070b88

000845e8 <_isatty_r>:
   845e8:	b538      	push	{r3, r4, r5, lr}
   845ea:	4c07      	ldr	r4, [pc, #28]	; (84608 <_isatty_r+0x20>)
   845ec:	2300      	movs	r3, #0
   845ee:	4605      	mov	r5, r0
   845f0:	4608      	mov	r0, r1
   845f2:	6023      	str	r3, [r4, #0]
   845f4:	f7fd fb36 	bl	81c64 <_isatty>
   845f8:	1c43      	adds	r3, r0, #1
   845fa:	d000      	beq.n	845fe <_isatty_r+0x16>
   845fc:	bd38      	pop	{r3, r4, r5, pc}
   845fe:	6823      	ldr	r3, [r4, #0]
   84600:	2b00      	cmp	r3, #0
   84602:	d0fb      	beq.n	845fc <_isatty_r+0x14>
   84604:	602b      	str	r3, [r5, #0]
   84606:	bd38      	pop	{r3, r4, r5, pc}
   84608:	20070b88 	.word	0x20070b88

0008460c <_lseek_r>:
   8460c:	b570      	push	{r4, r5, r6, lr}
   8460e:	4c08      	ldr	r4, [pc, #32]	; (84630 <_lseek_r+0x24>)
   84610:	4606      	mov	r6, r0
   84612:	2500      	movs	r5, #0
   84614:	4608      	mov	r0, r1
   84616:	4611      	mov	r1, r2
   84618:	461a      	mov	r2, r3
   8461a:	6025      	str	r5, [r4, #0]
   8461c:	f7fd fb24 	bl	81c68 <_lseek>
   84620:	1c43      	adds	r3, r0, #1
   84622:	d000      	beq.n	84626 <_lseek_r+0x1a>
   84624:	bd70      	pop	{r4, r5, r6, pc}
   84626:	6823      	ldr	r3, [r4, #0]
   84628:	2b00      	cmp	r3, #0
   8462a:	d0fb      	beq.n	84624 <_lseek_r+0x18>
   8462c:	6033      	str	r3, [r6, #0]
   8462e:	bd70      	pop	{r4, r5, r6, pc}
   84630:	20070b88 	.word	0x20070b88

00084634 <_read_r>:
   84634:	b570      	push	{r4, r5, r6, lr}
   84636:	4c08      	ldr	r4, [pc, #32]	; (84658 <_read_r+0x24>)
   84638:	4606      	mov	r6, r0
   8463a:	2500      	movs	r5, #0
   8463c:	4608      	mov	r0, r1
   8463e:	4611      	mov	r1, r2
   84640:	461a      	mov	r2, r3
   84642:	6025      	str	r5, [r4, #0]
   84644:	f7fb fd80 	bl	80148 <_read>
   84648:	1c43      	adds	r3, r0, #1
   8464a:	d000      	beq.n	8464e <_read_r+0x1a>
   8464c:	bd70      	pop	{r4, r5, r6, pc}
   8464e:	6823      	ldr	r3, [r4, #0]
   84650:	2b00      	cmp	r3, #0
   84652:	d0fb      	beq.n	8464c <_read_r+0x18>
   84654:	6033      	str	r3, [r6, #0]
   84656:	bd70      	pop	{r4, r5, r6, pc}
   84658:	20070b88 	.word	0x20070b88

0008465c <__aeabi_uldivmod>:
   8465c:	b94b      	cbnz	r3, 84672 <__aeabi_uldivmod+0x16>
   8465e:	b942      	cbnz	r2, 84672 <__aeabi_uldivmod+0x16>
   84660:	2900      	cmp	r1, #0
   84662:	bf08      	it	eq
   84664:	2800      	cmpeq	r0, #0
   84666:	d002      	beq.n	8466e <__aeabi_uldivmod+0x12>
   84668:	f04f 31ff 	mov.w	r1, #4294967295
   8466c:	4608      	mov	r0, r1
   8466e:	f000 b83b 	b.w	846e8 <__aeabi_idiv0>
   84672:	b082      	sub	sp, #8
   84674:	46ec      	mov	ip, sp
   84676:	e92d 5000 	stmdb	sp!, {ip, lr}
   8467a:	f000 f81d 	bl	846b8 <__gnu_uldivmod_helper>
   8467e:	f8dd e004 	ldr.w	lr, [sp, #4]
   84682:	b002      	add	sp, #8
   84684:	bc0c      	pop	{r2, r3}
   84686:	4770      	bx	lr

00084688 <__gnu_ldivmod_helper>:
   84688:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8468c:	9e08      	ldr	r6, [sp, #32]
   8468e:	4614      	mov	r4, r2
   84690:	461d      	mov	r5, r3
   84692:	4680      	mov	r8, r0
   84694:	4689      	mov	r9, r1
   84696:	f000 f829 	bl	846ec <__divdi3>
   8469a:	fb04 f301 	mul.w	r3, r4, r1
   8469e:	fba4 ab00 	umull	sl, fp, r4, r0
   846a2:	fb00 3205 	mla	r2, r0, r5, r3
   846a6:	4493      	add	fp, r2
   846a8:	ebb8 080a 	subs.w	r8, r8, sl
   846ac:	eb69 090b 	sbc.w	r9, r9, fp
   846b0:	e9c6 8900 	strd	r8, r9, [r6]
   846b4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000846b8 <__gnu_uldivmod_helper>:
   846b8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   846bc:	9e08      	ldr	r6, [sp, #32]
   846be:	4614      	mov	r4, r2
   846c0:	461d      	mov	r5, r3
   846c2:	4680      	mov	r8, r0
   846c4:	4689      	mov	r9, r1
   846c6:	f000 f961 	bl	8498c <__udivdi3>
   846ca:	fb00 f505 	mul.w	r5, r0, r5
   846ce:	fba0 ab04 	umull	sl, fp, r0, r4
   846d2:	fb04 5401 	mla	r4, r4, r1, r5
   846d6:	44a3      	add	fp, r4
   846d8:	ebb8 080a 	subs.w	r8, r8, sl
   846dc:	eb69 090b 	sbc.w	r9, r9, fp
   846e0:	e9c6 8900 	strd	r8, r9, [r6]
   846e4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000846e8 <__aeabi_idiv0>:
   846e8:	4770      	bx	lr
   846ea:	bf00      	nop

000846ec <__divdi3>:
   846ec:	2900      	cmp	r1, #0
   846ee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   846f2:	f2c0 80a1 	blt.w	84838 <__divdi3+0x14c>
   846f6:	2400      	movs	r4, #0
   846f8:	2b00      	cmp	r3, #0
   846fa:	f2c0 8098 	blt.w	8482e <__divdi3+0x142>
   846fe:	4615      	mov	r5, r2
   84700:	4606      	mov	r6, r0
   84702:	460f      	mov	r7, r1
   84704:	2b00      	cmp	r3, #0
   84706:	d13f      	bne.n	84788 <__divdi3+0x9c>
   84708:	428a      	cmp	r2, r1
   8470a:	d958      	bls.n	847be <__divdi3+0xd2>
   8470c:	fab2 f382 	clz	r3, r2
   84710:	b14b      	cbz	r3, 84726 <__divdi3+0x3a>
   84712:	f1c3 0220 	rsb	r2, r3, #32
   84716:	fa01 f703 	lsl.w	r7, r1, r3
   8471a:	fa20 f202 	lsr.w	r2, r0, r2
   8471e:	409d      	lsls	r5, r3
   84720:	fa00 f603 	lsl.w	r6, r0, r3
   84724:	4317      	orrs	r7, r2
   84726:	0c29      	lsrs	r1, r5, #16
   84728:	fbb7 f2f1 	udiv	r2, r7, r1
   8472c:	fb01 7712 	mls	r7, r1, r2, r7
   84730:	b2a8      	uxth	r0, r5
   84732:	fb00 f302 	mul.w	r3, r0, r2
   84736:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8473a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8473e:	42bb      	cmp	r3, r7
   84740:	d909      	bls.n	84756 <__divdi3+0x6a>
   84742:	197f      	adds	r7, r7, r5
   84744:	f102 3cff 	add.w	ip, r2, #4294967295
   84748:	f080 8105 	bcs.w	84956 <__divdi3+0x26a>
   8474c:	42bb      	cmp	r3, r7
   8474e:	f240 8102 	bls.w	84956 <__divdi3+0x26a>
   84752:	3a02      	subs	r2, #2
   84754:	442f      	add	r7, r5
   84756:	1aff      	subs	r7, r7, r3
   84758:	fbb7 f3f1 	udiv	r3, r7, r1
   8475c:	fb01 7113 	mls	r1, r1, r3, r7
   84760:	fb00 f003 	mul.w	r0, r0, r3
   84764:	b2b6      	uxth	r6, r6
   84766:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8476a:	4288      	cmp	r0, r1
   8476c:	d908      	bls.n	84780 <__divdi3+0x94>
   8476e:	1949      	adds	r1, r1, r5
   84770:	f103 37ff 	add.w	r7, r3, #4294967295
   84774:	f080 80f1 	bcs.w	8495a <__divdi3+0x26e>
   84778:	4288      	cmp	r0, r1
   8477a:	f240 80ee 	bls.w	8495a <__divdi3+0x26e>
   8477e:	3b02      	subs	r3, #2
   84780:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84784:	2300      	movs	r3, #0
   84786:	e003      	b.n	84790 <__divdi3+0xa4>
   84788:	428b      	cmp	r3, r1
   8478a:	d90a      	bls.n	847a2 <__divdi3+0xb6>
   8478c:	2300      	movs	r3, #0
   8478e:	461a      	mov	r2, r3
   84790:	4610      	mov	r0, r2
   84792:	4619      	mov	r1, r3
   84794:	b114      	cbz	r4, 8479c <__divdi3+0xb0>
   84796:	4240      	negs	r0, r0
   84798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8479c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   847a0:	4770      	bx	lr
   847a2:	fab3 f883 	clz	r8, r3
   847a6:	f1b8 0f00 	cmp.w	r8, #0
   847aa:	f040 8088 	bne.w	848be <__divdi3+0x1d2>
   847ae:	428b      	cmp	r3, r1
   847b0:	d302      	bcc.n	847b8 <__divdi3+0xcc>
   847b2:	4282      	cmp	r2, r0
   847b4:	f200 80e2 	bhi.w	8497c <__divdi3+0x290>
   847b8:	2300      	movs	r3, #0
   847ba:	2201      	movs	r2, #1
   847bc:	e7e8      	b.n	84790 <__divdi3+0xa4>
   847be:	b912      	cbnz	r2, 847c6 <__divdi3+0xda>
   847c0:	2301      	movs	r3, #1
   847c2:	fbb3 f5f2 	udiv	r5, r3, r2
   847c6:	fab5 f285 	clz	r2, r5
   847ca:	2a00      	cmp	r2, #0
   847cc:	d13a      	bne.n	84844 <__divdi3+0x158>
   847ce:	1b7f      	subs	r7, r7, r5
   847d0:	0c28      	lsrs	r0, r5, #16
   847d2:	fa1f fc85 	uxth.w	ip, r5
   847d6:	2301      	movs	r3, #1
   847d8:	fbb7 f1f0 	udiv	r1, r7, r0
   847dc:	fb00 7711 	mls	r7, r0, r1, r7
   847e0:	fb0c f201 	mul.w	r2, ip, r1
   847e4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   847e8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   847ec:	42ba      	cmp	r2, r7
   847ee:	d907      	bls.n	84800 <__divdi3+0x114>
   847f0:	197f      	adds	r7, r7, r5
   847f2:	f101 38ff 	add.w	r8, r1, #4294967295
   847f6:	d202      	bcs.n	847fe <__divdi3+0x112>
   847f8:	42ba      	cmp	r2, r7
   847fa:	f200 80c4 	bhi.w	84986 <__divdi3+0x29a>
   847fe:	4641      	mov	r1, r8
   84800:	1abf      	subs	r7, r7, r2
   84802:	fbb7 f2f0 	udiv	r2, r7, r0
   84806:	fb00 7012 	mls	r0, r0, r2, r7
   8480a:	fb0c fc02 	mul.w	ip, ip, r2
   8480e:	b2b6      	uxth	r6, r6
   84810:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   84814:	4584      	cmp	ip, r0
   84816:	d907      	bls.n	84828 <__divdi3+0x13c>
   84818:	1940      	adds	r0, r0, r5
   8481a:	f102 37ff 	add.w	r7, r2, #4294967295
   8481e:	d202      	bcs.n	84826 <__divdi3+0x13a>
   84820:	4584      	cmp	ip, r0
   84822:	f200 80ae 	bhi.w	84982 <__divdi3+0x296>
   84826:	463a      	mov	r2, r7
   84828:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   8482c:	e7b0      	b.n	84790 <__divdi3+0xa4>
   8482e:	43e4      	mvns	r4, r4
   84830:	4252      	negs	r2, r2
   84832:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84836:	e762      	b.n	846fe <__divdi3+0x12>
   84838:	4240      	negs	r0, r0
   8483a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8483e:	f04f 34ff 	mov.w	r4, #4294967295
   84842:	e759      	b.n	846f8 <__divdi3+0xc>
   84844:	4095      	lsls	r5, r2
   84846:	f1c2 0920 	rsb	r9, r2, #32
   8484a:	fa27 f109 	lsr.w	r1, r7, r9
   8484e:	fa26 f909 	lsr.w	r9, r6, r9
   84852:	4097      	lsls	r7, r2
   84854:	0c28      	lsrs	r0, r5, #16
   84856:	fbb1 f8f0 	udiv	r8, r1, r0
   8485a:	fb00 1118 	mls	r1, r0, r8, r1
   8485e:	fa1f fc85 	uxth.w	ip, r5
   84862:	fb0c f308 	mul.w	r3, ip, r8
   84866:	ea49 0907 	orr.w	r9, r9, r7
   8486a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8486e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   84872:	428b      	cmp	r3, r1
   84874:	fa06 f602 	lsl.w	r6, r6, r2
   84878:	d908      	bls.n	8488c <__divdi3+0x1a0>
   8487a:	1949      	adds	r1, r1, r5
   8487c:	f108 32ff 	add.w	r2, r8, #4294967295
   84880:	d27a      	bcs.n	84978 <__divdi3+0x28c>
   84882:	428b      	cmp	r3, r1
   84884:	d978      	bls.n	84978 <__divdi3+0x28c>
   84886:	f1a8 0802 	sub.w	r8, r8, #2
   8488a:	4429      	add	r1, r5
   8488c:	1ac9      	subs	r1, r1, r3
   8488e:	fbb1 f3f0 	udiv	r3, r1, r0
   84892:	fb00 1713 	mls	r7, r0, r3, r1
   84896:	fb0c f203 	mul.w	r2, ip, r3
   8489a:	fa1f f989 	uxth.w	r9, r9
   8489e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   848a2:	42ba      	cmp	r2, r7
   848a4:	d907      	bls.n	848b6 <__divdi3+0x1ca>
   848a6:	197f      	adds	r7, r7, r5
   848a8:	f103 31ff 	add.w	r1, r3, #4294967295
   848ac:	d260      	bcs.n	84970 <__divdi3+0x284>
   848ae:	42ba      	cmp	r2, r7
   848b0:	d95e      	bls.n	84970 <__divdi3+0x284>
   848b2:	3b02      	subs	r3, #2
   848b4:	442f      	add	r7, r5
   848b6:	1abf      	subs	r7, r7, r2
   848b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   848bc:	e78c      	b.n	847d8 <__divdi3+0xec>
   848be:	f1c8 0220 	rsb	r2, r8, #32
   848c2:	fa25 f102 	lsr.w	r1, r5, r2
   848c6:	fa03 fc08 	lsl.w	ip, r3, r8
   848ca:	fa27 f302 	lsr.w	r3, r7, r2
   848ce:	fa20 f202 	lsr.w	r2, r0, r2
   848d2:	fa07 f708 	lsl.w	r7, r7, r8
   848d6:	ea41 0c0c 	orr.w	ip, r1, ip
   848da:	ea4f 491c 	mov.w	r9, ip, lsr #16
   848de:	fbb3 f1f9 	udiv	r1, r3, r9
   848e2:	fb09 3311 	mls	r3, r9, r1, r3
   848e6:	fa1f fa8c 	uxth.w	sl, ip
   848ea:	fb0a fb01 	mul.w	fp, sl, r1
   848ee:	4317      	orrs	r7, r2
   848f0:	0c3a      	lsrs	r2, r7, #16
   848f2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   848f6:	459b      	cmp	fp, r3
   848f8:	fa05 f008 	lsl.w	r0, r5, r8
   848fc:	d908      	bls.n	84910 <__divdi3+0x224>
   848fe:	eb13 030c 	adds.w	r3, r3, ip
   84902:	f101 32ff 	add.w	r2, r1, #4294967295
   84906:	d235      	bcs.n	84974 <__divdi3+0x288>
   84908:	459b      	cmp	fp, r3
   8490a:	d933      	bls.n	84974 <__divdi3+0x288>
   8490c:	3902      	subs	r1, #2
   8490e:	4463      	add	r3, ip
   84910:	ebcb 0303 	rsb	r3, fp, r3
   84914:	fbb3 f2f9 	udiv	r2, r3, r9
   84918:	fb09 3312 	mls	r3, r9, r2, r3
   8491c:	fb0a fa02 	mul.w	sl, sl, r2
   84920:	b2bf      	uxth	r7, r7
   84922:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   84926:	45ba      	cmp	sl, r7
   84928:	d908      	bls.n	8493c <__divdi3+0x250>
   8492a:	eb17 070c 	adds.w	r7, r7, ip
   8492e:	f102 33ff 	add.w	r3, r2, #4294967295
   84932:	d21b      	bcs.n	8496c <__divdi3+0x280>
   84934:	45ba      	cmp	sl, r7
   84936:	d919      	bls.n	8496c <__divdi3+0x280>
   84938:	3a02      	subs	r2, #2
   8493a:	4467      	add	r7, ip
   8493c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   84940:	fba5 0100 	umull	r0, r1, r5, r0
   84944:	ebca 0707 	rsb	r7, sl, r7
   84948:	428f      	cmp	r7, r1
   8494a:	f04f 0300 	mov.w	r3, #0
   8494e:	d30a      	bcc.n	84966 <__divdi3+0x27a>
   84950:	d005      	beq.n	8495e <__divdi3+0x272>
   84952:	462a      	mov	r2, r5
   84954:	e71c      	b.n	84790 <__divdi3+0xa4>
   84956:	4662      	mov	r2, ip
   84958:	e6fd      	b.n	84756 <__divdi3+0x6a>
   8495a:	463b      	mov	r3, r7
   8495c:	e710      	b.n	84780 <__divdi3+0x94>
   8495e:	fa06 f608 	lsl.w	r6, r6, r8
   84962:	4286      	cmp	r6, r0
   84964:	d2f5      	bcs.n	84952 <__divdi3+0x266>
   84966:	1e6a      	subs	r2, r5, #1
   84968:	2300      	movs	r3, #0
   8496a:	e711      	b.n	84790 <__divdi3+0xa4>
   8496c:	461a      	mov	r2, r3
   8496e:	e7e5      	b.n	8493c <__divdi3+0x250>
   84970:	460b      	mov	r3, r1
   84972:	e7a0      	b.n	848b6 <__divdi3+0x1ca>
   84974:	4611      	mov	r1, r2
   84976:	e7cb      	b.n	84910 <__divdi3+0x224>
   84978:	4690      	mov	r8, r2
   8497a:	e787      	b.n	8488c <__divdi3+0x1a0>
   8497c:	4643      	mov	r3, r8
   8497e:	4642      	mov	r2, r8
   84980:	e706      	b.n	84790 <__divdi3+0xa4>
   84982:	3a02      	subs	r2, #2
   84984:	e750      	b.n	84828 <__divdi3+0x13c>
   84986:	3902      	subs	r1, #2
   84988:	442f      	add	r7, r5
   8498a:	e739      	b.n	84800 <__divdi3+0x114>

0008498c <__udivdi3>:
   8498c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84990:	4614      	mov	r4, r2
   84992:	4605      	mov	r5, r0
   84994:	460e      	mov	r6, r1
   84996:	2b00      	cmp	r3, #0
   84998:	d143      	bne.n	84a22 <__udivdi3+0x96>
   8499a:	428a      	cmp	r2, r1
   8499c:	d953      	bls.n	84a46 <__udivdi3+0xba>
   8499e:	fab2 f782 	clz	r7, r2
   849a2:	b157      	cbz	r7, 849ba <__udivdi3+0x2e>
   849a4:	f1c7 0620 	rsb	r6, r7, #32
   849a8:	fa20 f606 	lsr.w	r6, r0, r6
   849ac:	fa01 f307 	lsl.w	r3, r1, r7
   849b0:	fa02 f407 	lsl.w	r4, r2, r7
   849b4:	fa00 f507 	lsl.w	r5, r0, r7
   849b8:	431e      	orrs	r6, r3
   849ba:	0c21      	lsrs	r1, r4, #16
   849bc:	fbb6 f2f1 	udiv	r2, r6, r1
   849c0:	fb01 6612 	mls	r6, r1, r2, r6
   849c4:	b2a0      	uxth	r0, r4
   849c6:	fb00 f302 	mul.w	r3, r0, r2
   849ca:	0c2f      	lsrs	r7, r5, #16
   849cc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   849d0:	42b3      	cmp	r3, r6
   849d2:	d909      	bls.n	849e8 <__udivdi3+0x5c>
   849d4:	1936      	adds	r6, r6, r4
   849d6:	f102 37ff 	add.w	r7, r2, #4294967295
   849da:	f080 80fd 	bcs.w	84bd8 <__udivdi3+0x24c>
   849de:	42b3      	cmp	r3, r6
   849e0:	f240 80fa 	bls.w	84bd8 <__udivdi3+0x24c>
   849e4:	3a02      	subs	r2, #2
   849e6:	4426      	add	r6, r4
   849e8:	1af6      	subs	r6, r6, r3
   849ea:	fbb6 f3f1 	udiv	r3, r6, r1
   849ee:	fb01 6113 	mls	r1, r1, r3, r6
   849f2:	fb00 f003 	mul.w	r0, r0, r3
   849f6:	b2ad      	uxth	r5, r5
   849f8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   849fc:	4288      	cmp	r0, r1
   849fe:	d908      	bls.n	84a12 <__udivdi3+0x86>
   84a00:	1909      	adds	r1, r1, r4
   84a02:	f103 36ff 	add.w	r6, r3, #4294967295
   84a06:	f080 80e9 	bcs.w	84bdc <__udivdi3+0x250>
   84a0a:	4288      	cmp	r0, r1
   84a0c:	f240 80e6 	bls.w	84bdc <__udivdi3+0x250>
   84a10:	3b02      	subs	r3, #2
   84a12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   84a16:	2300      	movs	r3, #0
   84a18:	4610      	mov	r0, r2
   84a1a:	4619      	mov	r1, r3
   84a1c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84a20:	4770      	bx	lr
   84a22:	428b      	cmp	r3, r1
   84a24:	d84c      	bhi.n	84ac0 <__udivdi3+0x134>
   84a26:	fab3 f683 	clz	r6, r3
   84a2a:	2e00      	cmp	r6, #0
   84a2c:	d14f      	bne.n	84ace <__udivdi3+0x142>
   84a2e:	428b      	cmp	r3, r1
   84a30:	d302      	bcc.n	84a38 <__udivdi3+0xac>
   84a32:	4282      	cmp	r2, r0
   84a34:	f200 80dd 	bhi.w	84bf2 <__udivdi3+0x266>
   84a38:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84a3c:	2300      	movs	r3, #0
   84a3e:	2201      	movs	r2, #1
   84a40:	4610      	mov	r0, r2
   84a42:	4619      	mov	r1, r3
   84a44:	4770      	bx	lr
   84a46:	b912      	cbnz	r2, 84a4e <__udivdi3+0xc2>
   84a48:	2401      	movs	r4, #1
   84a4a:	fbb4 f4f2 	udiv	r4, r4, r2
   84a4e:	fab4 f284 	clz	r2, r4
   84a52:	2a00      	cmp	r2, #0
   84a54:	f040 8082 	bne.w	84b5c <__udivdi3+0x1d0>
   84a58:	1b09      	subs	r1, r1, r4
   84a5a:	0c26      	lsrs	r6, r4, #16
   84a5c:	b2a7      	uxth	r7, r4
   84a5e:	2301      	movs	r3, #1
   84a60:	fbb1 f0f6 	udiv	r0, r1, r6
   84a64:	fb06 1110 	mls	r1, r6, r0, r1
   84a68:	fb07 f200 	mul.w	r2, r7, r0
   84a6c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84a70:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   84a74:	428a      	cmp	r2, r1
   84a76:	d907      	bls.n	84a88 <__udivdi3+0xfc>
   84a78:	1909      	adds	r1, r1, r4
   84a7a:	f100 3cff 	add.w	ip, r0, #4294967295
   84a7e:	d202      	bcs.n	84a86 <__udivdi3+0xfa>
   84a80:	428a      	cmp	r2, r1
   84a82:	f200 80c8 	bhi.w	84c16 <__udivdi3+0x28a>
   84a86:	4660      	mov	r0, ip
   84a88:	1a89      	subs	r1, r1, r2
   84a8a:	fbb1 f2f6 	udiv	r2, r1, r6
   84a8e:	fb06 1112 	mls	r1, r6, r2, r1
   84a92:	fb07 f702 	mul.w	r7, r7, r2
   84a96:	b2ad      	uxth	r5, r5
   84a98:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   84a9c:	42af      	cmp	r7, r5
   84a9e:	d908      	bls.n	84ab2 <__udivdi3+0x126>
   84aa0:	192c      	adds	r4, r5, r4
   84aa2:	f102 31ff 	add.w	r1, r2, #4294967295
   84aa6:	f080 809b 	bcs.w	84be0 <__udivdi3+0x254>
   84aaa:	42a7      	cmp	r7, r4
   84aac:	f240 8098 	bls.w	84be0 <__udivdi3+0x254>
   84ab0:	3a02      	subs	r2, #2
   84ab2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   84ab6:	4610      	mov	r0, r2
   84ab8:	4619      	mov	r1, r3
   84aba:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84abe:	4770      	bx	lr
   84ac0:	2300      	movs	r3, #0
   84ac2:	461a      	mov	r2, r3
   84ac4:	4610      	mov	r0, r2
   84ac6:	4619      	mov	r1, r3
   84ac8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84acc:	4770      	bx	lr
   84ace:	f1c6 0520 	rsb	r5, r6, #32
   84ad2:	fa22 f705 	lsr.w	r7, r2, r5
   84ad6:	fa03 f406 	lsl.w	r4, r3, r6
   84ada:	fa21 f305 	lsr.w	r3, r1, r5
   84ade:	fa01 fb06 	lsl.w	fp, r1, r6
   84ae2:	fa20 f505 	lsr.w	r5, r0, r5
   84ae6:	433c      	orrs	r4, r7
   84ae8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84aec:	fbb3 fcf8 	udiv	ip, r3, r8
   84af0:	fb08 331c 	mls	r3, r8, ip, r3
   84af4:	fa1f f984 	uxth.w	r9, r4
   84af8:	fb09 fa0c 	mul.w	sl, r9, ip
   84afc:	ea45 0b0b 	orr.w	fp, r5, fp
   84b00:	ea4f 451b 	mov.w	r5, fp, lsr #16
   84b04:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   84b08:	459a      	cmp	sl, r3
   84b0a:	fa02 f206 	lsl.w	r2, r2, r6
   84b0e:	d904      	bls.n	84b1a <__udivdi3+0x18e>
   84b10:	191b      	adds	r3, r3, r4
   84b12:	f10c 35ff 	add.w	r5, ip, #4294967295
   84b16:	d36f      	bcc.n	84bf8 <__udivdi3+0x26c>
   84b18:	46ac      	mov	ip, r5
   84b1a:	ebca 0303 	rsb	r3, sl, r3
   84b1e:	fbb3 f5f8 	udiv	r5, r3, r8
   84b22:	fb08 3315 	mls	r3, r8, r5, r3
   84b26:	fb09 f905 	mul.w	r9, r9, r5
   84b2a:	fa1f fb8b 	uxth.w	fp, fp
   84b2e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   84b32:	45b9      	cmp	r9, r7
   84b34:	d904      	bls.n	84b40 <__udivdi3+0x1b4>
   84b36:	193f      	adds	r7, r7, r4
   84b38:	f105 33ff 	add.w	r3, r5, #4294967295
   84b3c:	d362      	bcc.n	84c04 <__udivdi3+0x278>
   84b3e:	461d      	mov	r5, r3
   84b40:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   84b44:	fbac 2302 	umull	r2, r3, ip, r2
   84b48:	ebc9 0707 	rsb	r7, r9, r7
   84b4c:	429f      	cmp	r7, r3
   84b4e:	f04f 0500 	mov.w	r5, #0
   84b52:	d34a      	bcc.n	84bea <__udivdi3+0x25e>
   84b54:	d046      	beq.n	84be4 <__udivdi3+0x258>
   84b56:	4662      	mov	r2, ip
   84b58:	462b      	mov	r3, r5
   84b5a:	e75d      	b.n	84a18 <__udivdi3+0x8c>
   84b5c:	4094      	lsls	r4, r2
   84b5e:	f1c2 0920 	rsb	r9, r2, #32
   84b62:	fa21 fc09 	lsr.w	ip, r1, r9
   84b66:	4091      	lsls	r1, r2
   84b68:	fa20 f909 	lsr.w	r9, r0, r9
   84b6c:	0c26      	lsrs	r6, r4, #16
   84b6e:	fbbc f8f6 	udiv	r8, ip, r6
   84b72:	fb06 cc18 	mls	ip, r6, r8, ip
   84b76:	b2a7      	uxth	r7, r4
   84b78:	fb07 f308 	mul.w	r3, r7, r8
   84b7c:	ea49 0901 	orr.w	r9, r9, r1
   84b80:	ea4f 4119 	mov.w	r1, r9, lsr #16
   84b84:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   84b88:	4563      	cmp	r3, ip
   84b8a:	fa00 f502 	lsl.w	r5, r0, r2
   84b8e:	d909      	bls.n	84ba4 <__udivdi3+0x218>
   84b90:	eb1c 0c04 	adds.w	ip, ip, r4
   84b94:	f108 32ff 	add.w	r2, r8, #4294967295
   84b98:	d23b      	bcs.n	84c12 <__udivdi3+0x286>
   84b9a:	4563      	cmp	r3, ip
   84b9c:	d939      	bls.n	84c12 <__udivdi3+0x286>
   84b9e:	f1a8 0802 	sub.w	r8, r8, #2
   84ba2:	44a4      	add	ip, r4
   84ba4:	ebc3 0c0c 	rsb	ip, r3, ip
   84ba8:	fbbc f3f6 	udiv	r3, ip, r6
   84bac:	fb06 c113 	mls	r1, r6, r3, ip
   84bb0:	fb07 f203 	mul.w	r2, r7, r3
   84bb4:	fa1f f989 	uxth.w	r9, r9
   84bb8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   84bbc:	428a      	cmp	r2, r1
   84bbe:	d907      	bls.n	84bd0 <__udivdi3+0x244>
   84bc0:	1909      	adds	r1, r1, r4
   84bc2:	f103 30ff 	add.w	r0, r3, #4294967295
   84bc6:	d222      	bcs.n	84c0e <__udivdi3+0x282>
   84bc8:	428a      	cmp	r2, r1
   84bca:	d920      	bls.n	84c0e <__udivdi3+0x282>
   84bcc:	3b02      	subs	r3, #2
   84bce:	4421      	add	r1, r4
   84bd0:	1a89      	subs	r1, r1, r2
   84bd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   84bd6:	e743      	b.n	84a60 <__udivdi3+0xd4>
   84bd8:	463a      	mov	r2, r7
   84bda:	e705      	b.n	849e8 <__udivdi3+0x5c>
   84bdc:	4633      	mov	r3, r6
   84bde:	e718      	b.n	84a12 <__udivdi3+0x86>
   84be0:	460a      	mov	r2, r1
   84be2:	e766      	b.n	84ab2 <__udivdi3+0x126>
   84be4:	40b0      	lsls	r0, r6
   84be6:	4290      	cmp	r0, r2
   84be8:	d2b5      	bcs.n	84b56 <__udivdi3+0x1ca>
   84bea:	f10c 32ff 	add.w	r2, ip, #4294967295
   84bee:	2300      	movs	r3, #0
   84bf0:	e712      	b.n	84a18 <__udivdi3+0x8c>
   84bf2:	4633      	mov	r3, r6
   84bf4:	4632      	mov	r2, r6
   84bf6:	e70f      	b.n	84a18 <__udivdi3+0x8c>
   84bf8:	459a      	cmp	sl, r3
   84bfa:	d98d      	bls.n	84b18 <__udivdi3+0x18c>
   84bfc:	f1ac 0c02 	sub.w	ip, ip, #2
   84c00:	4423      	add	r3, r4
   84c02:	e78a      	b.n	84b1a <__udivdi3+0x18e>
   84c04:	45b9      	cmp	r9, r7
   84c06:	d99a      	bls.n	84b3e <__udivdi3+0x1b2>
   84c08:	3d02      	subs	r5, #2
   84c0a:	4427      	add	r7, r4
   84c0c:	e798      	b.n	84b40 <__udivdi3+0x1b4>
   84c0e:	4603      	mov	r3, r0
   84c10:	e7de      	b.n	84bd0 <__udivdi3+0x244>
   84c12:	4690      	mov	r8, r2
   84c14:	e7c6      	b.n	84ba4 <__udivdi3+0x218>
   84c16:	3802      	subs	r0, #2
   84c18:	4421      	add	r1, r4
   84c1a:	e735      	b.n	84a88 <__udivdi3+0xfc>
   84c1c:	6f727245 	.word	0x6f727245
   84c20:	21212172 	.word	0x21212172
   84c24:	45484120 	.word	0x45484120
   84c28:	48454148 	.word	0x48454148
   84c2c:	45414845 	.word	0x45414845
   84c30:	00454148 	.word	0x00454148

00084c34 <UnityStrOk>:
   84c34:	00004b4f                                OK..

00084c38 <UnityStrSpacer>:
   84c38:	0000202e                                . ..

00084c3c <UnityStrWas>:
   84c3c:	73615720 00000020                        Was ...

00084c44 <UnityStrFail>:
   84c44:	4c494146 00000000                       FAIL....

00084c4c <UnityStrExpected>:
   84c4c:	70784520 65746365 00002064               Expected ..

00084c58 <UnityStrBreaker>:
   84c58:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   84c68:	2d2d2d2d 002d2d2d                       -------.

00084c70 <UnityStrResultsFailures>:
   84c70:	69614620 6572756c 00002073               Failures ..

00084c7c <UnityStrResultsIgnored>:
   84c7c:	6e674920 6465726f 00000020               Ignored ...

00084c88 <UnityStrResultsTests>:
   84c88:	73655420 00207374                        Tests .

00084c90 <UnityStrPass>:
   84c90:	53534150 00000000 36324250 20736920     PASS....PB26 is 
   84ca0:	20746f6e 6f206e61 75707475 00000074     not an output...
   84cb0:	37324250 20736920 20746f6e 6f206e61     PB27 is not an o
   84cc0:	75707475 00000074 36324250 20736920     utput...PB26 is 
   84cd0:	20746f6e 68676968 00000000 37324250     not high....PB27
   84ce0:	20736920 20746f6e 68676968 00000000      is not high....
   84cf0:	37324250 20736920 20746f6e 00776f6c     PB27 is not low.
   84d00:	736e6f43 20656c6f 64616572 00000a79     Console ready...
   84d10:	3d3d3d3d 3d3d3d3d 3d3d3d3d 00000a3d     =============...
   84d20:	742f2e2e 2f747365 74736574 69676944     ../test/testDigi
   84d30:	496c6174 00632e4f 74736574 6769645f     talIO.c.test_dig
   84d40:	6c617469 50657544 33316e69 74696e49     italDuePin13Init
   84d50:	696c6169 72506573 7265706f 0000796c     ialiseProperly..
   84d60:	74736574 6769645f 6c617469 50657544     test_digitalDueP
   84d70:	33316e69 65537349 00000074 74736574     in13IsSet...test
   84d80:	6769645f 6c617469 50657544 33316e69     _digitalDuePin13
   84d90:	6c437349 65726165 00000064 74736574     IsCleared...test
   84da0:	6769645f 6c617469 50657544 32326e69     _digitalDuePin22
   84db0:	74696e49 696c6169 72506573 7265706f     InitialiseProper
   84dc0:	0000796c 74736574 6769645f 6c617469     ly..test_digital
   84dd0:	50657544 32326e69 65537349 00000074     DuePin22IsSet...
   84de0:	74736574 6769645f 6c617469 50657544     test_digitalDueP
   84df0:	32326e69 6c437349 65726165 00000064     in22IsCleared...
   84e00:	74736574 6769645f 6c617469 50657544     test_digitalDueP
   84e10:	33316e69 32646e41 696e4932 6c616974     in13And22Initial
   84e20:	50657369 65706f72 00796c72 74736574     iseProperly.test
   84e30:	6769645f 6c617469 50657544 33316e69     _digitalDuePin13
   84e40:	32646e41 53734932 00007465 74736574     And22IsSet..test
   84e50:	6769645f 6c617469 50657544 33316e69     _digitalDuePin13
   84e60:	6c437369 65726165 646e4164 73493232     isClearedAnd22Is
   84e70:	00746553 00000043                       Set.C...

00084e78 <_global_impure_ptr>:
   84e78:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   84e88:	46454443 00000000 33323130 37363534     CDEF....01234567
   84e98:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84ea8:	0000296c                                l)..

00084eac <zeroes.6721>:
   84eac:	30303030 30303030 30303030 30303030     0000000000000000

00084ebc <blanks.6720>:
   84ebc:	20202020 20202020 20202020 20202020                     

00084ecc <_init>:
   84ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84ece:	bf00      	nop
   84ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84ed2:	bc08      	pop	{r3}
   84ed4:	469e      	mov	lr, r3
   84ed6:	4770      	bx	lr

00084ed8 <__init_array_start>:
   84ed8:	00082d59 	.word	0x00082d59

00084edc <__frame_dummy_init_array_entry>:
   84edc:	00080119                                ....

00084ee0 <_fini>:
   84ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84ee2:	bf00      	nop
   84ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84ee6:	bc08      	pop	{r3}
   84ee8:	469e      	mov	lr, r3
   84eea:	4770      	bx	lr

00084eec <__fini_array_start>:
   84eec:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00084e74 00000000 00000000 00000000     tN..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	00084421                                !D..
